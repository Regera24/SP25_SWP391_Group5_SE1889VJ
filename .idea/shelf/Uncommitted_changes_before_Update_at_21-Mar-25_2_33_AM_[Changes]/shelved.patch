Index: swp391/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.application.name=RickyRice\r\nserver.port=9999\r\n\r\nspring.datasource.url=jdbc:sqlserver://localhost:1433;databaseName=SWP391_Project;encrypt=true;trustServerCertificate=true\r\nspring.datasource.username=sa\r\nspring.datasource.password=123\r\n\r\nspring.servlet.multipart.enabled=true\r\nspring.servlet.multipart.max-file-size=10MB\r\nspring.servlet.multipart.max-request-size=10MB\r\n\r\n#spring.jpa.hibernate.ddl-auto=none\r\nspring.jpa.hibernate.ddl-auto = update\r\n#spring.jpa.hibernate.ddl-auto = update\r\n#spring.jpa.hibernate.ddl-auto = create-drop\r\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.SQLServer2012Dialect\r\nspring.jpa.properties.hibernate.enable_lazy_load_no_trans=true\r\n\r\n\r\nspring.jpa.properties.hibernate.format_sql=true\r\n\r\napp.jwtExpirationMs=2592000000\r\napp.jwtSecret=T7EOnmBnmqvRABNZf9TsmuHLyFmauuAV66Nd8OdaTlFLBTocK2nH0NKIcwLpjJAosgGs8tV2BuuIQ2doKjiFfA==\r\n\r\nspring.mail.host=smtp.gmail.com\r\nspring.mail.port=587\r\nspring.mail.username=keepme2401@gmail.com\r\nspring.mail.password=tccpotdwysrognyx\r\nspring.mail.properties.mail.smtp.auth=true\r\nspring.mail.properties.mail.smtp.starttls.enable=true\r\n\r\ncloudinary.cloud-name=do9tp2bph\r\ncloudinary.api-key=637613168259424\r\ncloudinary.api-secret=ryWJdtT3C2tSRVrPmxuytLiiBl0\r\n\r\nspring.rabbitmq.host=localhost\r\nspring.rabbitmq.port=5672\r\nspring.rabbitmq.username=admin\r\nspring.rabbitmq.password=admin\r\n\r\nricky.outbound.redirect_uri: http://localhost:3000/authenticate\r\nricky.outbound.grant_type: authorization_code\r\nricky.outbound.client_secret: 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\r\nricky.outbound.client_id: 10678190159-7muks5sd3gv5lh4f92sfgfq6dth9pdet.apps.googleusercontent.com\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/swp391/src/main/resources/application.properties b/swp391/src/main/resources/application.properties
--- a/swp391/src/main/resources/application.properties	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/resources/application.properties	(date 1742498409985)
@@ -3,7 +3,7 @@
 
 spring.datasource.url=jdbc:sqlserver://localhost:1433;databaseName=SWP391_Project;encrypt=true;trustServerCertificate=true
 spring.datasource.username=sa
-spring.datasource.password=123
+spring.datasource.password=12345
 
 spring.servlet.multipart.enabled=true
 spring.servlet.multipart.max-file-size=10MB
@@ -40,6 +40,4 @@
 
 ricky.outbound.redirect_uri: http://localhost:3000/authenticate
 ricky.outbound.grant_type: authorization_code
-ricky.outbound.client_secret: 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
-ricky.outbound.client_id: 10678190159-7muks5sd3gv5lh4f92sfgfq6dth9pdet.apps.googleusercontent.com
 
Index: swp391/src/main/java/org/group5/swp391/dto/response/PaymentTransctionResponse.java
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/dto/response/PaymentTransctionResponse.java b/swp391/src/main/java/org/group5/swp391/dto/response/PaymentTransctionResponse.java
deleted file mode 100644
--- a/swp391/src/main/java/org/group5/swp391/dto/response/PaymentTransctionResponse.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ /dev/null	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
@@ -1,17 +0,0 @@
-package org.group5.swp391.dto.response;
-
-import lombok.*;
-import lombok.experimental.FieldDefaults;
-
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-@FieldDefaults(level = AccessLevel.PRIVATE)
-@Builder
-public class PaymentTransctionResponse {
-    Double vnpAmount;
-    String vnpResponseCode;
-    String vnpOrderInfo;
-    String vnpTransactionNo;
-    String vnp_TxnRef;
-}
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1742498244273)
+++ b/.idea/misc.xml	(date 1742498244273)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/swp391/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="22" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1742498244276)
+++ b/.idea/modules.xml	(date 1742498244276)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/RickyRice_SWP_main.iml" filepath="$PROJECT_DIR$/.idea/RickyRice_SWP_main.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: Front-End/swp_interface/src/Pages/ShopOwner/Store/Store.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useEffect, useState } from 'react';\r\nimport { message, Input, Spin, Pagination } from 'antd'; // Import Pagination từ Ant Design\r\nimport StoreCard from '../../../Components/StoreOwner/StoreCard'; // Import ProductCard\r\nimport qs from 'qs';\r\nimport './style.scss';\r\nimport { getToken } from '../../../Utils/UserInfoUtils';\r\nimport API from '../../../Utils/API/API';\r\nimport { getDataWithToken } from '../../../Utils/FetchUtils';\r\n\r\nconst { Search } = Input;\r\n\r\nconst Store = () => {\r\n    const token = getToken();\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const [timeoutId, setTimeoutId] = useState(null);\r\n\r\n    // Quản lý trạng thái phân trang\r\n    const [pagination, setPagination] = useState({\r\n        current: 1, // Trang hiện tại (thường bắt đầu từ 1)\r\n        pageSize: 5, // Số lượng item mỗi trang\r\n        total: 0 // Tổng số item (lấy từ response API)\r\n    });\r\n\r\n    const getStoreParams = () => {\r\n        return qs.stringify({\r\n            storeName: searchValue,\r\n            page: pagination.current - 1, // Backend thường nhận page bắt đầu từ 0\r\n            size: pagination.pageSize, // Số item mỗi trang\r\n        });\r\n    };\r\n\r\n    const fetchStores = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const queryParams = `?${getStoreParams()}`;\r\n            const response = await getDataWithToken(API.STORE_OWNER.GET_STORE + queryParams, token);\r\n\r\n            // Update data và thông tin pagination\r\n            setData(response.content);\r\n            setPagination((prev) => ({\r\n                ...prev,\r\n                total: response.totalElements, // Tổng số lượng item từ API\r\n            }));\r\n        } catch (error) {\r\n            message.error('Không thể tải dữ liệu danh sách stores');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchStores();\r\n    }, [searchValue, pagination.current, pagination.pageSize]);\r\n\r\n    const handleSearch = (e) => {\r\n        const value = e.target.value;\r\n\r\n        if (timeoutId) {\r\n            clearTimeout(timeoutId);\r\n        }\r\n\r\n        const newTimeoutId = setTimeout(() => {\r\n            setSearchValue(value);\r\n\r\n            // Reset về trang đầu tiên khi tìm kiếm\r\n            setPagination((prev) => ({\r\n                ...prev,\r\n                current: 1,\r\n            }));\r\n        }, 1000);\r\n\r\n        setTimeoutId(newTimeoutId);\r\n    };\r\n\r\n    const handlePaginationChange = (page, pageSize) => {\r\n        // Cập nhật thông tin phân trang (trang hiện tại & số item/trang)\r\n        setPagination((prev) => ({\r\n            ...prev,\r\n            current: page,\r\n            pageSize,\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Search\r\n                placeholder=\"Enter Store Name\"\r\n                onChange={handleSearch}\r\n                enterButton\r\n                style={{ marginBottom: 16 }}\r\n                loading={loading}\r\n            />\r\n            <Spin spinning={loading}>\r\n                <div className=\"product-card-container\">\r\n                    {data && data.map((store) => (\r\n                        <StoreCard\r\n                            key={store.storeID} // Sử dụng storeID làm key\r\n                            urlStore={`/store/${store.storeID}/zone`} // Đường dẫn\r\n                            storeName={store.storeName} // Tên cửa hàng\r\n                            storeStatus={store.status === 'ACTIVE' ? 'Active' : 'Inactive'} // Trạng thái\r\n                            urlImg={store.imageUrl || 'https://via.placeholder.com/150'} // Ảnh mặc định nếu không có ảnh\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </Spin>\r\n            {/* Ant Design Pagination */}\r\n            <div className=\"pagination-container\">\r\n                <Pagination\r\n                    current={pagination.current} \r\n                    pageSize={pagination.pageSize} \r\n                    total={pagination.total} \r\n                    onChange={handlePaginationChange} \r\n                    showSizeChanger \r\n                    pageSizeOptions={['1', '2', '3', '4', '5']} \r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Store;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Pages/ShopOwner/Store/Store.js b/Front-End/swp_interface/src/Pages/ShopOwner/Store/Store.js
--- a/Front-End/swp_interface/src/Pages/ShopOwner/Store/Store.js	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/Front-End/swp_interface/src/Pages/ShopOwner/Store/Store.js	(date 1742498244290)
@@ -1,123 +1,186 @@
-import React, { useEffect, useState } from 'react';
-import { message, Input, Spin, Pagination } from 'antd'; // Import Pagination từ Ant Design
-import StoreCard from '../../../Components/StoreOwner/StoreCard'; // Import ProductCard
-import qs from 'qs';
-import './style.scss';
-import { getToken } from '../../../Utils/UserInfoUtils';
-import API from '../../../Utils/API/API';
-import { getDataWithToken } from '../../../Utils/FetchUtils';
+import React, { useEffect, useState } from "react";
+import {
+  message,
+  Input,
+  Spin,
+  Pagination,
+  Button,
+  Row,
+  Col,
+  Dropdown,
+  Menu,
+} from "antd";
+import StoreCard from "../../../Components/StoreOwner/StoreCard";
+import qs from "qs";
+import "./style.scss";
+import { getToken } from "../../../Utils/UserInfoUtils";
+import API from "../../../Utils/API/API";
+import { getDataWithToken } from "../../../Utils/FetchUtils";
+import { useNavigate } from "react-router-dom";
 
 const { Search } = Input;
 
 const Store = () => {
-    const token = getToken();
-    const [data, setData] = useState([]);
-    const [loading, setLoading] = useState(false);
-    const [searchValue, setSearchValue] = useState('');
-    const [timeoutId, setTimeoutId] = useState(null);
+  const token = getToken();
+  const [data, setData] = useState([]);
+  const [loading, setLoading] = useState(false);
+  const [searchValue, setSearchValue] = useState("");
+  const [timeoutId, setTimeoutId] = useState(null);
+  const [storeRequests, setStoreRequests] = useState([]);
+  const navigate = useNavigate();
 
-    // Quản lý trạng thái phân trang
-    const [pagination, setPagination] = useState({
-        current: 1, // Trang hiện tại (thường bắt đầu từ 1)
-        pageSize: 5, // Số lượng item mỗi trang
-        total: 0 // Tổng số item (lấy từ response API)
-    });
+  // Quản lý trạng thái phân trang
+  const [pagination, setPagination] = useState({
+    current: 1, // Trang hiện tại (thường bắt đầu từ 1)
+    pageSize: 5, // Số lượng item mỗi trang
+    total: 0, // Tổng số item (lấy từ response API)
+  });
 
-    const getStoreParams = () => {
-        return qs.stringify({
-            storeName: searchValue,
-            page: pagination.current - 1, // Backend thường nhận page bắt đầu từ 0
-            size: pagination.pageSize, // Số item mỗi trang
-        });
-    };
+  const getStoreParams = () => {
+    return qs.stringify({
+      storeName: searchValue,
+      page: pagination.current - 1, // Backend thường nhận page bắt đầu từ 0
+      size: pagination.pageSize, // Số item mỗi trang
+    });
+  };
 
-    const fetchStores = async () => {
-        setLoading(true);
-        try {
-            const queryParams = `?${getStoreParams()}`;
-            const response = await getDataWithToken(API.STORE_OWNER.GET_STORE + queryParams, token);
-
-            // Update data và thông tin pagination
-            setData(response.content);
-            setPagination((prev) => ({
-                ...prev,
-                total: response.totalElements, // Tổng số lượng item từ API
-            }));
-        } catch (error) {
-            message.error('Không thể tải dữ liệu danh sách stores');
-        } finally {
-            setLoading(false);
-        }
-    };
+  const fetchStores = async () => {
+    setLoading(true);
+    try {
+      const queryParams = `?${getStoreParams()}`;
+      const response = await getDataWithToken(
+        API.STORE_OWNER.GET_STORE + queryParams,
+        token
+      );
+      // Update data và thông tin pagination
+      setData(response.content);
+      setPagination((prev) => ({
+        ...prev,
+        total: response.totalElements, // Tổng số lượng item từ API
+      }));
+    } catch (error) {
+      message.error("Không thể tải dữ liệu danh sách stores");
+    } finally {
+      setLoading(false);
+    }
+  };
 
-    useEffect(() => {
-        fetchStores();
-    }, [searchValue, pagination.current, pagination.pageSize]);
+  const fetchStoreRequests = async () => {
+    try {
+      const response = await getDataWithToken(
+        API.STORE_OWNER.GET_REQUEST_STORE,
+        token
+      );
+      if (response.code === 200) {
+        setStoreRequests(response.data);
+      } else {
+        message.error("Không thể tải danh sách cửa hàng mới");
+      }
+    } catch (error) {
+      message.error("Lỗi khi tải danh sách cửa hàng mới");
+    }
+  };
+
+  useEffect(() => {
+    fetchStores();
+    fetchStoreRequests();
+  }, [searchValue, pagination.current, pagination.pageSize]);
 
-    const handleSearch = (e) => {
-        const value = e.target.value;
-
-        if (timeoutId) {
-            clearTimeout(timeoutId);
-        }
-
-        const newTimeoutId = setTimeout(() => {
-            setSearchValue(value);
+  const handleSearch = (e) => {
+    const value = e.target.value;
+    if (timeoutId) {
+      clearTimeout(timeoutId);
+    }
+    const newTimeoutId = setTimeout(() => {
+      setSearchValue(value);
 
-            // Reset về trang đầu tiên khi tìm kiếm
-            setPagination((prev) => ({
-                ...prev,
-                current: 1,
-            }));
-        }, 1000);
+      // Reset về trang đầu tiên khi tìm kiếm
+      setPagination((prev) => ({
+        ...prev,
+        current: 1,
+      }));
+    }, 1000);
 
-        setTimeoutId(newTimeoutId);
-    };
+    setTimeoutId(newTimeoutId);
+  };
 
-    const handlePaginationChange = (page, pageSize) => {
-        // Cập nhật thông tin phân trang (trang hiện tại & số item/trang)
-        setPagination((prev) => ({
-            ...prev,
-            current: page,
-            pageSize,
-        }));
-    };
+  const handlePaginationChange = (page, pageSize) => {
+    // Cập nhật thông tin phân trang (trang hiện tại & số item/trang)
+    setPagination((prev) => ({
+      ...prev,
+      current: page,
+      pageSize,
+    }));
+  };
 
-    return (
-        <div>
-            <Search
-                placeholder="Enter Store Name"
-                onChange={handleSearch}
-                enterButton
-                style={{ marginBottom: 16 }}
-                loading={loading}
-            />
-            <Spin spinning={loading}>
-                <div className="product-card-container">
-                    {data && data.map((store) => (
-                        <StoreCard
-                            key={store.storeID} // Sử dụng storeID làm key
-                            urlStore={`/store/${store.storeID}/zone`} // Đường dẫn
-                            storeName={store.storeName} // Tên cửa hàng
-                            storeStatus={store.status === 'ACTIVE' ? 'Active' : 'Inactive'} // Trạng thái
-                            urlImg={store.imageUrl || 'https://via.placeholder.com/150'} // Ảnh mặc định nếu không có ảnh
-                        />
-                    ))}
-                </div>
-            </Spin>
-            {/* Ant Design Pagination */}
-            <div className="pagination-container">
-                <Pagination
-                    current={pagination.current} 
-                    pageSize={pagination.pageSize} 
-                    total={pagination.total} 
-                    onChange={handlePaginationChange} 
-                    showSizeChanger 
-                    pageSizeOptions={['1', '2', '3', '4', '5']} 
-                />
-            </div>
-        </div>
-    );
+  const storeMenu = (
+    <Menu style={{ maxHeight: "300px", overflowY: "auto" }}>
+      {storeRequests.length > 0 ? (
+        storeRequests.map((store, index) => (
+          <Menu.Item
+            key={store.transactionNo}
+            onClick={() =>
+              navigate(`/store-owner/create-store/${store.transactionNo}`)
+            }
+          >
+            Cửa hàng {index + 1} - {store.subcriptionTimeOfExpiration} tháng
+          </Menu.Item>
+        ))
+      ) : (
+        <Menu.Item disabled>Không có cửa hàng mới</Menu.Item>
+      )}
+    </Menu>
+  );
+
+  return (
+    <div>
+      <Row gutter={16} align="middle" justify="space-between">
+        <Col>
+          <Dropdown overlay={storeMenu} trigger={["click"]}>
+            <Button type="primary" style={{ marginBottom: 16, width: "100%" }}>
+              Tạo cửa hàng mới ({storeRequests.length})
+            </Button>
+          </Dropdown>
+        </Col>
+        <Col flex="auto">
+          <Search
+            placeholder="Enter Store Name"
+            onChange={handleSearch}
+            enterButton
+            style={{ marginBottom: 16, width: "100%" }}
+            loading={loading}
+          />
+        </Col>
+      </Row>
+      <Spin spinning={loading}>
+        <div className="product-card-container">
+          {data &&
+            data.map((store) => (
+              <StoreCard
+                key={store.storeID}
+                urlStore={`/store/${store.storeID}/zone`}
+                storeName={store.storeName}
+                storeStatus={store.status === "ACTIVE" ? "Active" : "Inactive"}
+                urlImg={store.imageUrl || "https://via.placeholder.com/150"}
+                onUpdateExpiration={() => navigate(`/service/${store.storeID}`)}
+              />
+            ))}
+        </div>
+      </Spin>
+
+      {/* Ant Design Pagination */}
+      <div className="pagination-container">
+        <Pagination
+          current={pagination.current}
+          pageSize={pagination.pageSize}
+          total={pagination.total}
+          onChange={handlePaginationChange}
+          showSizeChanger
+          pageSizeOptions={["1", "2", "3", "4", "5"]}
+        />
+      </div>
+    </div>
+  );
 };
 
-export default Store;
\ No newline at end of file
+export default Store;
Index: Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/components/invoiceList.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Button, Input, Space, Spin, Table, Tag, Modal, Descriptions } from 'antd';\r\nimport axios from 'axios';\r\nimport debounce from \"lodash.debounce\";\r\nimport moment from 'moment';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport API from '../../../Utils/API/API';\r\nimport { getToken } from '../../../Utils/UserInfoUtils';\r\nimport '../styleInvoices.css';\r\nconst InvoiceList = () => {\r\n    const [loading, setLoading] = useState(true);\r\n    const [customers, setCustomers] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [pageSize, setPageSize] = useState(10);\r\n    const [totalItems, setTotalItems] = useState(0);\r\n    const [sorterState, setSorterState] = useState({ field: null, order: null });\r\n    const [filters, setFilters] = useState({\r\n        phonesearch: null,\r\n    });\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [selectedInvoice, setSelectedInvoice] = useState(null);\r\n    const [selectedInvoice2, setSelectedInvoice2] = useState(null);\r\n    const [modalLoading, setModalLoading] = useState(false);\r\n    const navigate = useNavigate();\r\n    const token = getToken();\r\n\r\n    const InvoiceColumns = [\r\n        {\r\n            title: 'STT',\r\n            key: 'stt',\r\n            render: (text, record, index) => (currentPage - 1) * pageSize + index + 1,\r\n\r\n        },\r\n        {\r\n            title: 'Customer Details',\r\n            key: 'customerDetails',\r\n            render: (_, record) => (\r\n                <>\r\n                    <div><strong>Name:</strong> {record.customerName}</div>\r\n                    <div><strong>Phone:</strong> {record.customerPhone}</div>\r\n                </>\r\n            ),\r\n            width: '15%',\r\n        },\r\n        {\r\n            title: 'Trạng Thái',\r\n            dataIndex: 'type',\r\n            key: 'type',\r\n            render: (type) => (\r\n                <Tag color={type ? 'green' : 'red'}>\r\n                    {type ? 'Nhập gạo' : 'Xuất gạo'}\r\n                </Tag>\r\n            ),\r\n            filters: [\r\n                { text: 'Nhập gạo', value: true },\r\n                { text: 'Xuất gạo', value: false },\r\n            ],\r\n            onFilter: (value, record) => record.type === value,\r\n        },\r\n        {\r\n            title: 'Tổng Tiền',\r\n            dataIndex: 'totalAmount',\r\n            render: (totalAmount) => `${(totalAmount || 0).toLocaleString()} đ`,\r\n            key: 'totalAmount',\r\n            sorter: true,\r\n\r\n\r\n        },\r\n        {\r\n            title: 'MoneyShipping',\r\n            dataIndex: 'totalShipping',\r\n            render: (totalShipping) => `${(totalShipping || 0).toLocaleString()} đ`,\r\n            key: 'totalShipping',\r\n            sorter: true,\r\n\r\n        },\r\n        {\r\n            title: 'Tạo Ra Lúc',\r\n            dataIndex: 'created_at',\r\n            key: 'created_at',\r\n            sorter: true,\r\n            render: (text) => text ? moment(Number(text)).format('DD/MM/YYYY HH:mm:ss') : 'N/A'\r\n        },\r\n        {\r\n            title: 'Chỉnh Sửa Lúc',\r\n            dataIndex: 'updated_at',\r\n            key: 'updated_at',\r\n            render: (text) => text ? moment(Number(text)).format('DD/MM/YYYY HH:mm:ss') : 'N/A'\r\n        },\r\n        {\r\n            title: 'Mô Tả ',\r\n            dataIndex: 'description',\r\n            key: 'description',\r\n\r\n        },\r\n\r\n\r\n    ];\r\n    const detailColumns = [\r\n        {\r\n            title: 'STT',\r\n            key: 'stt',\r\n            render: (text, record, index) => index + 1,\r\n            width: '10%',\r\n        },\r\n        {\r\n            title: 'Tên sản phẩm',\r\n            dataIndex: 'productName',\r\n            key: 'productName',\r\n            width: '25%',\r\n        },\r\n        {\r\n            title: 'Số lượng',\r\n            dataIndex: 'quantity',\r\n            key: 'quantity',\r\n            width: '15%',\r\n        },\r\n        {\r\n            title: 'Đơn giá',\r\n            dataIndex: 'price',\r\n            key: 'price',\r\n            render: (price) => `${(price || 0).toLocaleString()} đ`,\r\n            width: '20%',\r\n        },\r\n        {\r\n            title: 'Giảm Giá',\r\n            dataIndex: 'discount',\r\n            key: 'discount',\r\n            render: (_, record) => `${(record.discount).toLocaleString()} đ`,\r\n            width: '20%',\r\n        },\r\n    ];\r\n\r\n    const handleTableChange = (pagination, filters, sorter) => {\r\n        const { current, pageSize } = pagination;\r\n        const { field, order } = sorter || {};\r\n        setCurrentPage(current);\r\n        setPageSize(pageSize);\r\n        setSorterState({ field, order });\r\n        fetchZone(current, pageSize, filters, { field, order });\r\n    };\r\n    const handleFilterSubmit = () => {\r\n        fetchZone(currentPage, pageSize, filters, sorterState\r\n            //null, searchTerm\r\n        );\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        fetchZone(currentPage, pageSize, filters, sorterState\r\n            // null, searchTerm\r\n        );\r\n    }, [currentPage, pageSize, filters, sorterState]);\r\n\r\n    const fetchZone = async (page, size,\r\n        filters, sorter\r\n        //search\r\n    ) => {\r\n        const { field, order } = sorter || {};\r\n        const sortByMapping = {\r\n            totalAmount: 'productMoney',\r\n            totalShipping: 'shipMoney',\r\n            created_at: 'createdAt',\r\n        };\r\n        const sortBy = field ? sortByMapping[field] || field : 'createdAt';\r\n        try {\r\n            const response = await axios.get(API.EMPLOYEE.GET_eINVOICES, {\r\n                params: {\r\n                    page: page - 1,\r\n                    size: size,\r\n                    phonesearch: filters ? filters.phonesearch : null,\r\n                    sortBy: sortBy,\r\n                    sortOrder: order === 'ascend' ? true : false\r\n                },\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            });\r\n            console.log(\"Dữ liệu liên quan22:\", response.data);\r\n            const data = Array.isArray(response.data.content) ? response.data.content : [];\r\n            setCustomers(data);\r\n            setTotalItems(response.data.totalElements || 0);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            console.error('nổ rồi các cháu ơi, lỗi lỗi lỗi', error)\r\n            setLoading(false);\r\n        }\r\n\r\n    }\r\n    const fetchInvoiceDetails = async (invoiceId) => {\r\n        setModalLoading(true);\r\n\r\n        try {\r\n            const response = await axios.get(API.EMPLOYEE.GET_eINVOICES_DETAILS, {\r\n                params: {\r\n                    invoiceId: invoiceId\r\n                },\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            });\r\n            console.log('Dữ liệu chi tiết hóa đơn:', response.data);\r\n            setSelectedInvoice2(response.data);\r\n            const details = Array.isArray(response.data) ? response.data : [];\r\n            setSelectedInvoice((prev) => ({\r\n                ...prev,\r\n                ...response.data,\r\n                details: details,\r\n            }));\r\n            setIsModalOpen(true);\r\n        } catch (error) {\r\n            console.error('Lỗi khi lấy chi tiết hóa đơn:', error);\r\n        } finally {\r\n            setModalLoading(false);\r\n        }\r\n    };\r\n    const handleFilterChange = debounce((type, value) => {\r\n        setFilters({ ...filters, [type]: value });\r\n    }, 1000)\r\n    const handleRowClick = (record) => {\r\n        setSelectedInvoice({\r\n            id: record.id,\r\n            customerName: record.customerName,\r\n            customerPhone: record.customerPhone,\r\n            type: record.type,\r\n            totalAmount: record.totalAmount,\r\n            totalShipping: record.totalShipping,\r\n            created_at: record.created_at,\r\n            details: [],\r\n        });\r\n        setIsModalOpen(true);\r\n        fetchInvoiceDetails(record.id);\r\n    };\r\n    const closeModal = () => {\r\n        setIsModalOpen(false);\r\n        setSelectedInvoice(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", padding: \"0 15px\" }}>\r\n                <h3><i style={{ marginLeft: 15, color: \"#E3C584\" }}>Danh Sách Hóa Đơn Khách Hàng </i></h3>\r\n                <Space size=\"middle\">\r\n                    <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"flex-start\", gap: \"20px\" }}>\r\n                        <Input\r\n                            placeholder=\"Tìm SDT\"\r\n                            maxLength={10}\r\n                            style={{ width: 220 }}\r\n                            allowClear onChange={(e) => handleFilterChange('phonesearch', e.target.value)}\r\n\r\n                        />\r\n                    </div>\r\n                    <Button type=\"primary\" onClick={handleFilterSubmit} >\r\n                        Tìm Kiếm\r\n                    </Button>\r\n\r\n                </Space>\r\n\r\n            </div>\r\n            {loading ? (<Spin size=\"large\" />) : (\r\n                <Table style={{ marginTop: 25 }}\r\n                    dataSource={customers}\r\n                    columns={InvoiceColumns}\r\n                    pagination={{\r\n                        current: currentPage,\r\n                        pageSize: pageSize,\r\n                        total: totalItems,\r\n                        showSizeChanger: true,\r\n                        pageSizeOptions: ['1', '5', '10'],\r\n                    }}\r\n                    onChange={handleTableChange}\r\n                    className=\"custom-table\"\r\n                    onRow={(record) => ({\r\n                        onClick: () => handleRowClick(record),\r\n                        style: { cursor: 'pointer' },\r\n                    })}\r\n                    rowKey=\"id\"\r\n                />\r\n            )}\r\n            <Modal\r\n                title={`Chi tiết hóa đơn #${selectedInvoice?.id || ''}`}\r\n                visible={isModalOpen}\r\n                onCancel={closeModal}\r\n                footer={[\r\n                    <Button key=\"close\" onClick={closeModal}>\r\n                        Đóng\r\n                    </Button>,\r\n                ]}\r\n                width={800}\r\n            >\r\n                {modalLoading ? (\r\n                    <Spin tip=\"Đang tải chi tiết...\" />\r\n                ) : selectedInvoice ? (\r\n                    <>\r\n                        <Descriptions bordered column={2} style={{ marginBottom: 16 }}>\r\n                            <Descriptions.Item label=\"Tên khách hàng\">\r\n                                {selectedInvoice.customerName || 'N/A'}\r\n                            </Descriptions.Item>\r\n                            <Descriptions.Item label=\"Số điện thoại\">\r\n                                {selectedInvoice.customerPhone || 'N/A'}\r\n                            </Descriptions.Item>\r\n                            <Descriptions.Item label=\"Trạng thái\">\r\n                                <Tag color={selectedInvoice.type ? 'green' : 'red'}>\r\n                                    {selectedInvoice.type ? 'Nhập gạo' : 'Xuất gạo'}\r\n                                </Tag>\r\n                            </Descriptions.Item>\r\n                            <Descriptions.Item label=\"Thời gian tạo\">\r\n                                {selectedInvoice.created_at\r\n                                    ? moment(Number(selectedInvoice.created_at)).format('DD/MM/YYYY HH:mm:ss')\r\n                                    : 'N/A'}\r\n                            </Descriptions.Item>\r\n                            <Descriptions.Item label=\"Tổng tiền sản phẩm\">\r\n                                {(selectedInvoice.totalAmount || 0).toLocaleString()} đ\r\n                            </Descriptions.Item>\r\n                            <Descriptions.Item label=\"Tiền vận chuyển\">\r\n                                {(selectedInvoice.totalShipping || 0).toLocaleString()} đ\r\n                            </Descriptions.Item>\r\n                        </Descriptions>\r\n\r\n                        <h4>Danh sách sản phẩm</h4>\r\n                        <Table\r\n                            columns={detailColumns}\r\n                            dataSource={selectedInvoice2 || []}\r\n                            rowKey={(record, index) => index}\r\n                            pagination={false}\r\n                            scroll={{ y: 240 }}\r\n                        />\r\n                        <div style={{ marginTop: 16, textAlign: 'right' }}>\r\n                            <p><strong>Tổng tiền sản phẩm:</strong> {(selectedInvoice.totalAmount || 0).toLocaleString()} đ</p>\r\n                            <p><strong>Tiền vận chuyển:</strong> {(selectedInvoice.totalShipping || 0).toLocaleString()} đ</p>\r\n                            <p><strong>Tổng cộng:</strong> {((selectedInvoice.totalAmount + selectedInvoice.totalShipping) || 0).toLocaleString()} đ</p>\r\n                        </div>\r\n                    </>\r\n                ) : (\r\n                    <p>Không có dữ liệu chi tiết.</p>\r\n                )}\r\n            </Modal>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InvoiceList;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/components/invoiceList.js b/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/components/invoiceList.js
--- a/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/components/invoiceList.js	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/components/invoiceList.js	(date 1742498244287)
@@ -16,6 +16,15 @@
     const [sorterState, setSorterState] = useState({ field: null, order: null });
     const [filters, setFilters] = useState({
         phonesearch: null,
+        namesearch: null,
+    });
+    const [dynamicFilters, setDynamicFilters] = useState({
+        minAmount: null,
+        maxAmount: null,
+        minShipping: null,
+        maxShipping: null,
+        startDate: null,
+        endDate: null,
     });
     const [isModalOpen, setIsModalOpen] = useState(false);
     const [selectedInvoice, setSelectedInvoice] = useState(null);
@@ -137,20 +146,21 @@
         setCurrentPage(current);
         setPageSize(pageSize);
         setSorterState({ field, order });
-        fetchZone(current, pageSize, filters, { field, order });
+        fetchZone(current, pageSize, { ...filters, ...dynamicFilters }, filters, { field, order });
     };
     const handleFilterSubmit = () => {
-        fetchZone(currentPage, pageSize, filters, sorterState
-            //null, searchTerm
-        );
+        // fetchZone(currentPage, pageSize, filters, sorterState
+        //     //null, searchTerm
+        // );
+        fetchZone(currentPage, pageSize, { ...filters, ...dynamicFilters }, sorterState);
     };
 
 
     useEffect(() => {
-        fetchZone(currentPage, pageSize, filters, sorterState
+        fetchZone(currentPage, pageSize, { ...filters, ...dynamicFilters }, sorterState
             // null, searchTerm
         );
-    }, [currentPage, pageSize, filters, sorterState]);
+    }, [currentPage, pageSize, filters, dynamicFilters, sorterState]);
 
     const fetchZone = async (page, size,
         filters, sorter
@@ -169,6 +179,13 @@
                     page: page - 1,
                     size: size,
                     phonesearch: filters ? filters.phonesearch : null,
+                    namesearch: filters ? filters.namesearch : null,
+                    minAmount: filters.minAmount,
+                    maxAmount: filters.maxAmount,
+                    minShipping: filters.minShipping,
+                    maxShipping: filters.maxShipping,
+                    startDate: filters.startDate,
+                    endDate: filters.endDate,
                     sortBy: sortBy,
                     sortOrder: order === 'ascend' ? true : false
                 },
@@ -215,8 +232,17 @@
         }
     };
     const handleFilterChange = debounce((type, value) => {
-        setFilters({ ...filters, [type]: value });
+        setFilters((prevFilters) => ({
+            ...prevFilters,
+            [type]: value || null,
+        }));
     }, 1000)
+    const handleDynamicFilterChange = debounce((type, value) => {
+        setDynamicFilters((prev) => ({
+            ...prev,
+            [type]: value || null,
+        }));
+    }, 1000);
     const handleRowClick = (record) => {
         setSelectedInvoice({
             id: record.id,
@@ -251,11 +277,85 @@
                         />
                     </div>
                     <Button type="primary" onClick={handleFilterSubmit} >
-                        Tìm Kiếm
+                        Tìm Kiếm SDT
+                    </Button>
+
+                </Space>
+                <Space size="middle">
+                    <div style={{ display: "flex", alignItems: "center", justifyContent: "flex-start", gap: "20px" }}>
+                        <Input
+                            placeholder="Tìm tên"
+                            maxLength={10}
+                            style={{ width: 220 }}
+                            allowClear onChange={(e) => handleFilterChange('namesearch', e.target.value)}
+
+                        />
+                    </div>
+                    <Button type="primary" onClick={handleFilterSubmit} >
+                        Tìm Kiếm Tên
                     </Button>
 
                 </Space>
 
+            </div>
+            <div className="filter-container">
+                <Space size="middle">
+                    <div style={{ display: "flex", alignItems: "center", justifyContent: "flex-start", gap: "20px", color: "#6B7012" }}>
+                        <span>Tiền Tối Thiểu :</span>
+                        <Input
+                            type="number"
+                            placeholder="Nhập min"
+                            style={{ width: 100 }}
+                            onChange={(e) => handleDynamicFilterChange('minAmount', e.target.value)}
+
+                        />
+                    </div>
+                    <div style={{ display: "flex", alignItems: "center", justifyContent: "flex-start", gap: "20px", color: "#6B7012" }}>
+                        <span>Tiền Tối Đa :</span>
+                        <Input
+                            type="number"
+                            placeholder="Nhập min"
+                            style={{ width: 100 }}
+                            onChange={(e) => handleDynamicFilterChange('maxAmount', e.target.value)}
+                        />
+                    </div>
+                    <div style={{ display: "flex", alignItems: "center", justifyContent: "flex-start", gap: "20px", color: "#6B7012" }}>
+                        <span>Tiền Ship Tối Thiểu :</span>
+                        <Input
+                            type="number"
+                            placeholder="Nhập min"
+                            style={{ width: 100 }}
+                            onChange={(e) => handleDynamicFilterChange('minShipping', e.target.value)}
+                        />
+                    </div>
+                    <div style={{ display: "flex", alignItems: "center", justifyContent: "flex-start", gap: "20px", color: "#6B7012" }}>
+                        <span>Tiền Ship Tối Đa :</span>
+                        <Input
+                            type="number"
+                            placeholder="Nhập min"
+                            style={{ width: 100 }}
+                            onChange={(e) => handleDynamicFilterChange('maxShipping', e.target.value)}
+                        />
+                    </div>
+                    <div style={{ display: "flex", alignItems: "center", justifyContent: "flex-start", gap: "20px", color: "#6B7012" }}>
+                        <span> Ngày Bắt Đầu:</span>
+                        <Input
+                            type="datetime-local"
+                            placeholder="Nhập min"
+                            style={{ width: 100 }}
+                            onChange={(e) => handleDynamicFilterChange('startDate', e.target.value)}
+                        />
+                    </div>
+                    <div style={{ display: "flex", alignItems: "center", justifyContent: "flex-start", gap: "20px", color: "#6B7012" }}>
+                        <span>Ngày Kết Thúc:</span>
+                        <Input
+                            type="datetime-local"
+                            placeholder="Nhập min"
+                            style={{ width: 100 }}
+                            onChange={(e) => handleDynamicFilterChange('endDate', e.target.value)}
+                        />
+                    </div>
+                </Space>
             </div>
             {loading ? (<Spin size="large" />) : (
                 <Table style={{ marginTop: 25 }}
@@ -310,7 +410,7 @@
                                     : 'N/A'}
                             </Descriptions.Item>
                             <Descriptions.Item label="Tổng tiền sản phẩm">
-                                {(selectedInvoice.totalAmount || 0).toLocaleString()} đ
+                                {(selectedInvoice.totalAmount - selectedInvoice.totalShipping || 0).toLocaleString()} đ
                             </Descriptions.Item>
                             <Descriptions.Item label="Tiền vận chuyển">
                                 {(selectedInvoice.totalShipping || 0).toLocaleString()} đ
@@ -326,9 +426,9 @@
                             scroll={{ y: 240 }}
                         />
                         <div style={{ marginTop: 16, textAlign: 'right' }}>
-                            <p><strong>Tổng tiền sản phẩm:</strong> {(selectedInvoice.totalAmount || 0).toLocaleString()} đ</p>
+                            <p><strong>Tổng tiền sản phẩm:</strong> {(selectedInvoice.totalAmount - selectedInvoice.totalShipping || 0).toLocaleString()} đ</p>
                             <p><strong>Tiền vận chuyển:</strong> {(selectedInvoice.totalShipping || 0).toLocaleString()} đ</p>
-                            <p><strong>Tổng cộng:</strong> {((selectedInvoice.totalAmount + selectedInvoice.totalShipping) || 0).toLocaleString()} đ</p>
+                            <p><strong>Tổng cộng:</strong> {((selectedInvoice.totalAmount) || 0).toLocaleString()} đ</p>
                         </div>
                     </>
                 ) : (
Index: .idea/RickyRice_SWP_main.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/RickyRice_SWP_main.iml b/.idea/RickyRice_SWP_main.iml
new file mode 100644
--- /dev/null	(date 1742498244273)
+++ b/.idea/RickyRice_SWP_main.iml	(date 1742498244273)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1742498244276)
+++ b/.idea/vcs.xml	(date 1742498244276)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1742498244273)
+++ b/.idea/.gitignore	(date 1742498244273)
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
Index: Front-End/swp_interface/src/Pages/ZoneLayout/Zone.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport logo from '../../assets/img/logoviet.png'\r\nimport { Table, Input } from 'antd';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Pagination } from \"antd\";\r\nimport debounce from \"lodash.debounce\";\r\nimport moment from 'moment';\r\nimport './ZoneIndex.css'\r\nimport {\r\n    MenuFoldOutlined,\r\n    MenuUnfoldOutlined,\r\n    UploadOutlined,\r\n    UserOutlined,\r\n    ShopOutlined,\r\n    VideoCameraOutlined,\r\n    InsertRowBelowOutlined,\r\n    TeamOutlined,\r\n} from '@ant-design/icons';\r\nimport axios from 'axios';\r\nimport { Spin, List as ListItem } from 'antd';\r\nimport { Button, Layout, Menu, theme, SearchOutlined, Select, Space, Modal } from 'antd';\r\nimport CustomFooter from \"../../Components/Footer\";\r\nimport Search from 'antd/es/transfer/search';\r\n\r\nimport { getToken } from '../../Utils/UserInfoUtils';\r\nimport API from '../../Utils/API/API';\r\nconst { Header, Sider, Content } = Layout;\r\n\r\n\r\n\r\n\r\nconst ZoneList = () => {\r\n    const [collapsed, setCollapsed] = useState(false);\r\n    const navigate = useNavigate();\r\n    const [zone, setZone] = useState([]);\r\n    const [modalData, setModalData] = useState([]);\r\n    const [selectedZoneName, setSelectedZoneName] = useState(null);\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [pageSize, setPageSize] = useState(10);\r\n    const [totalItems, setTotalItems] = useState(0);\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const [sorterState, setSorterState] = useState(null);\r\n    const token = getToken();\r\n\r\n    const [filters, setFilters] = useState({\r\n        quantityMin: null,\r\n        quantityMax: null,\r\n        sizeMin: null,\r\n        sizeMax: null,\r\n    });\r\n\r\n    const {\r\n        token: { colorBgContainer, borderRadiusLG },\r\n    } = theme.useToken();\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        fetchZone(currentPage, pageSize, filters, null, searchTerm);\r\n    }, [currentPage, pageSize, searchTerm]);\r\n\r\n    const Zonecolumns = [\r\n        {\r\n            title: 'STT',\r\n            key: 'stt',\r\n            render: (text, record, index) => index + 1,\r\n            width: 50,\r\n        },\r\n        {\r\n            title: 'Tên',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            width: 150,\r\n        },\r\n        {\r\n            title: 'Vị Trí',\r\n            dataIndex: 'location',\r\n            sorter: true,\r\n            key: 'location',\r\n            width: 150,\r\n        },\r\n        {\r\n            title: 'Chỉnh Sửa Lúc',\r\n            dataIndex: 'updated_at',\r\n            key: 'updated_at',\r\n            render: (text) => text ? moment(Number(text)).format('DD/MM/YYYY HH:mm:ss') : 'N/A',\r\n            width: 150,\r\n        },\r\n        {\r\n            title: \"Cửa Hàng\",\r\n            key: \"actions\",\r\n            render: (text, record) => (\r\n                <Button type=\"primary\" onClick={() => {\r\n                    showModal(record);\r\n                }}\r\n                >\r\n                    Thông tin\r\n                </Button>\r\n            ),\r\n            width: 100,\r\n        }\r\n\r\n    ]; const ZoneIN4columns = [\r\n        {\r\n            title: 'STT',\r\n            key: 'stt',\r\n            render: (text, record, index) => index + 1,\r\n        },\r\n        {\r\n            title: 'ID Cửa Hàng',\r\n            dataIndex: 'storeID',\r\n            key: 'storeID',\r\n        },\r\n\r\n        {\r\n            title: 'Hình Ảnh Cửa Hàng ',\r\n            dataIndex: 'image',\r\n            key: 'image',\r\n        },\r\n        {\r\n            title: 'Tên',\r\n            dataIndex: 'storeName',\r\n            key: 'name',\r\n        },\r\n\r\n        {\r\n            title: 'Địa Chỉ',\r\n            dataIndex: 'address',\r\n            key: 'address',\r\n        },\r\n        {\r\n            title: 'Hotline',\r\n            dataIndex: 'hotline',\r\n            key: 'hotline',\r\n        },\r\n        {\r\n            title: 'Giờ Mở Cửa',\r\n            dataIndex: 'operatingHour',\r\n            key: 'operatingHour',\r\n        },\r\n        {\r\n            title: 'Trạng Thái ',\r\n            dataIndex: 'operatingHour',\r\n            key: 'operatingHour',\r\n            render: (text, record) => {\r\n                const currentTime = moment();\r\n                const [start, end] = text.split('-');\r\n                const startTime = moment(start, 'h A');\r\n                const endTime = moment(end, 'h A');\r\n                const isOpen = currentTime.isBetween(startTime, endTime);\r\n\r\n\r\n                return (\r\n                    <span style={{ color: isOpen ? 'green' : 'red', fontWeight: 'bold' }}>\r\n                        {isOpen ? 'Cửa Hàng Đang Mở ' : 'Cửa Hàng Đã Đóng'}\r\n                    </span>\r\n                );\r\n            },\r\n        },\r\n\r\n\r\n\r\n\r\n    ];\r\n\r\n\r\n    const handleFilterChange = (type, value) => {\r\n        setFilters({ ...filters, [type]: value });\r\n    };\r\n    const handleFilterSubmit = () => {\r\n        fetchZone(currentPage, pageSize, filters, null, searchTerm);\r\n    };\r\n\r\n\r\n    const handleNavigation = (path) => {\r\n        navigate(path);\r\n    };\r\n\r\n    const handleSearchChange = debounce((value) => {\r\n        setSearchTerm(value);\r\n        setLoading(true);\r\n        fetchZone(currentPage, pageSize, filters, null, searchTerm);\r\n    }, 1500);\r\n\r\n    const handleTableChange = (pagination, _, sorter) => {\r\n\r\n        const { current, pageSize } = pagination;\r\n        const sortBy = sorter.columnKey || \"size\";\r\n        const sortOrder = sorter.order\r\n            ? sorter.order === \"ascend\" ? \"false\" : \"true\"\r\n            : \"false\";\r\n\r\n        setCurrentPage(current);\r\n        setPageSize(pageSize);\r\n        setSorterState({\r\n            field: sortBy,\r\n            order: sortOrder,\r\n        });\r\n        fetchZone(current, pageSize, filters, {\r\n            field: sorter.columnKey,\r\n            order: sortOrder,\r\n        }, searchTerm);\r\n    };\r\n    // 'http://localhost:9999/employee/ricezone'\r\n    const fetchZone = async (page, size, filters, sorter, search) => {\r\n        const { field, order } = sorter || sorterState || {};\r\n        try {\r\n            const response = await axios.get(API.EMPLOYEE.GET_RICEZONE, {\r\n\r\n                params: {\r\n                    page: page - 1,\r\n                    size: size,\r\n                    sortBy: field,\r\n                    sortOrder: order || false,\r\n                    search: search || \"\",\r\n                },\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`, // Chèn token vào header\r\n                },\r\n            });\r\n            console.log(\"Dữ liệu liên quan22:\", response.data);\r\n            console.log(response.data.content)\r\n            setZone(response.data.content);\r\n\r\n            setTotalItems(response.data.totalElements);\r\n            setLoading(false); //false la trang thai  loading data xong\r\n\r\n        } catch (error) {\r\n            console.error('nổ rồi các cháu ơi, lỗi lỗi lỗi', error)\r\n            setLoading(false);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const showModal = (zone) => {\r\n        setModalData(zone.employeeStoreDTO ? [zone.employeeStoreDTO] : []);\r\n        setSelectedZoneName(zone.name);\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n            <Layout style={{ minHeight: '100vh' }}>\r\n                <Sider\r\n                    style={{\r\n                        backgroundColor: 'white',\r\n                        color: '#fff',\r\n                    }}\r\n                    trigger={null} collapsible collapsed={collapsed}>\r\n                    <div className=\"demo-logo-vertical\" />\r\n                    <div style={{ height: '80px' }}>\r\n                        <img style={{ width: '90px', marginRight: '100px' }} src={logo} alt=\"logo\" class=\"header__navbar__img\" />\r\n                    </div>\r\n                    <Menu\r\n                        theme=\"light\"\r\n                        mode=\"inline\"\r\n                        defaultSelectedKeys={['2']}\r\n                    >\r\n                        <Menu.Item\r\n                            key=\"1\"\r\n                            icon={<InsertRowBelowOutlined />}\r\n                            onClick={() => handleNavigation('/employee/products')}\r\n                        >\r\n                            Sản Phẩm Gạo\r\n                        </Menu.Item>\r\n                        <Menu.Item\r\n                            key=\"2\"\r\n                            icon={<ShopOutlined />}\r\n                            onClick={() => handleNavigation('/employee/ricezone')}\r\n                        >\r\n                            Khu Vực Gạo\r\n                        </Menu.Item>\r\n                        <Menu.Item\r\n                            key=\"3\"\r\n                            icon={<TeamOutlined />}\r\n                            onClick={() => handleNavigation('/employee/customers')}\r\n                        >\r\n                            Khách Hàng\r\n                        </Menu.Item>\r\n                        <Menu.Item\r\n                            key=\"4\"\r\n                            icon={<TeamOutlined />}\r\n                            onClick={() => handleNavigation('/employee/invoices')}\r\n                        >\r\n                            Hóa Đơn\r\n                        </Menu.Item>\r\n\r\n                    </Menu>\r\n                </Sider>\r\n                <Layout>\r\n                    <Header\r\n                        style={{\r\n                            padding: '0 16px',\r\n                            background: colorBgContainer,\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            justifyContent: 'space-between',\r\n                        }}\r\n                    >\r\n\r\n                        <Button\r\n                            type=\"text\"\r\n                            icon={collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}\r\n                            onClick={() => setCollapsed(!collapsed)}\r\n                            style={{\r\n                                fontSize: '16px',\r\n                                width: 64,\r\n                                height: 64,\r\n                            }}\r\n                        />\r\n\r\n                        <Space.Compact\r\n                            style={{\r\n                                width: '100%',\r\n                            }}\r\n                        >\r\n                            <Input\r\n                                placeholder=\"Tìm kiếm khu vực...\"\r\n                                onChange={(e) => handleSearchChange(e.target.value)}\r\n                            />\r\n                            <Button type=\"primary\">Tìm Kiếm</Button>\r\n                        </Space.Compact>\r\n                    </Header>\r\n                    <Content\r\n                        style={{\r\n                            margin: '24px 16px',\r\n                            padding: 24,\r\n                            minHeight: 280,\r\n                            background: colorBgContainer,\r\n                            borderRadius: borderRadiusLG,\r\n                        }}\r\n                    >\r\n                        <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", padding: \"0 15px\" }}>\r\n                            <h3><i style={{ marginLeft: 15, color: \"#E3C584\" }}>Khu Vực Chứa Gạo  </i></h3>\r\n                            <Space size=\"middle\">\r\n                                <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"flex-start\", gap: \"20px\", color: \"#6B7012\" }}>\r\n                                    <span>Số Lượng Tối Thiểu :</span>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        placeholder=\"Min\"\r\n                                        min={0}\r\n                                        style={{ width: 120 }}\r\n                                        allowClear onChange={(e) => handleFilterChange('quantityMin', e.target.value)}\r\n                                    />\r\n                                </div>\r\n                                <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"flex-start\", gap: \"20px\", color: \"#6B7012\" }}>\r\n                                    <span>Số Lượng Tối Đa :</span>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        placeholder=\"Max\"\r\n                                        min={0}\r\n                                        style={{ width: 120 }}\r\n                                        allowClear onChange={(e) => handleFilterChange('quantityMax', e.target.value)}\r\n                                    />\r\n                                </div>\r\n                                {/* <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"flex-start\", gap: \"20px\" }}>\r\n                                    <span>Size Tối Thiểu:</span>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        placeholder=\"Min\"\r\n                                        min={0}\r\n                                        style={{ width: 120 }}\r\n                                        allowClear onChange={(e) => handleFilterChange('sizeMin', e.target.value)}\r\n                                    />\r\n                                </div>\r\n                                <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"flex-start\", gap: \"20px\" }}>\r\n                                    <span>Size Tối Đa:</span>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        placeholder=\"Max\"\r\n                                        min={0}\r\n                                        style={{ width: 120 }}\r\n                                        allowClear onChange={(e) => handleFilterChange('sizeMax', e.target.value)}\r\n                                    />\r\n                                </div> */}\r\n                                <Button type=\"primary\" onClick={handleFilterSubmit}>\r\n                                    Lọc Sản Phẩm\r\n                                </Button>\r\n                            </Space>\r\n\r\n\r\n\r\n                            {/* <span style={{ marginLeft: 840 }}> <DropDown /></span> */}\r\n                        </div>\r\n\r\n                        {loading ? (<Spin size=\"large\" />) : (\r\n                            <Table style={{ marginTop: 45 }}\r\n                                dataSource={zone}\r\n                                columns={Zonecolumns}\r\n                                rowClassName={(record) =>\r\n                                    record.quantity === 0 ? \"row-red\" : \"\"\r\n                                }\r\n\r\n                                pagination={{\r\n                                    current: currentPage,\r\n                                    pageSize: pageSize,\r\n                                    total: totalItems,\r\n                                    showSizeChanger: true,\r\n                                    pageSizeOptions: ['1', '5', '10'],\r\n                                    onChange: (page, size) => {\r\n                                        setCurrentPage(page);\r\n                                        setPageSize(size);\r\n                                        fetchZone(page, size, filters, null, searchTerm);\r\n                                    },\r\n                                }}\r\n                                onChange={handleTableChange}\r\n                                className=\"custom-table\"\r\n                            />\r\n                        )}\r\n                    </Content>\r\n                </Layout>\r\n            </Layout>\r\n\r\n            <Modal\r\n                title={<span style={{ fontWeight: 500, fontSize: '18px', color: \"#E3C584\" }}> Cửa Hàng Của : {selectedZoneName}</span>}\r\n                open={isModalVisible}\r\n                onOk={handleOk}\r\n                onCancel={handleCancel}\r\n                footer={[\r\n                    <Button key=\"back\" onClick={handleCancel}>\r\n                        Đóng\r\n                    </Button>,\r\n                ]}\r\n                style={{ top: 300, left: 40 }}\r\n                width=\"75%\"\r\n                bodyStyle={{ height: '10vh' }}\r\n            >\r\n                <Table\r\n                    dataSource={modalData}\r\n                    columns={ZoneIN4columns}\r\n                    rowKey={(record) => record.storeID}\r\n                    pagination={false}\r\n                />\r\n            </Modal>\r\n\r\n\r\n            <CustomFooter />\r\n        </div>\r\n    );\r\n};\r\nexport default ZoneList;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Pages/ZoneLayout/Zone.js b/Front-End/swp_interface/src/Pages/ZoneLayout/Zone.js
--- a/Front-End/swp_interface/src/Pages/ZoneLayout/Zone.js	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/Front-End/swp_interface/src/Pages/ZoneLayout/Zone.js	(date 1742498244292)
@@ -15,6 +15,7 @@
     VideoCameraOutlined,
     InsertRowBelowOutlined,
     TeamOutlined,
+    SolutionOutlined,
 } from '@ant-design/icons';
 import axios from 'axios';
 import { Spin, List as ListItem } from 'antd';
@@ -293,7 +294,7 @@
                         </Menu.Item>
                         <Menu.Item
                             key="4"
-                            icon={<TeamOutlined />}
+                            icon={<SolutionOutlined />}
                             onClick={() => handleNavigation('/employee/invoices')}
                         >
                             Hóa Đơn
@@ -322,18 +323,6 @@
                                 height: 64,
                             }}
                         />
-
-                        <Space.Compact
-                            style={{
-                                width: '100%',
-                            }}
-                        >
-                            <Input
-                                placeholder="Tìm kiếm khu vực..."
-                                onChange={(e) => handleSearchChange(e.target.value)}
-                            />
-                            <Button type="primary">Tìm Kiếm</Button>
-                        </Space.Compact>
                     </Header>
                     <Content
                         style={{
@@ -344,57 +333,19 @@
                             borderRadius: borderRadiusLG,
                         }}
                     >
-                        <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center", padding: "0 15px" }}>
-                            <h3><i style={{ marginLeft: 15, color: "#E3C584" }}>Khu Vực Chứa Gạo  </i></h3>
-                            <Space size="middle">
-                                <div style={{ display: "flex", alignItems: "center", justifyContent: "flex-start", gap: "20px", color: "#6B7012" }}>
-                                    <span>Số Lượng Tối Thiểu :</span>
-                                    <Input
-                                        type="number"
-                                        placeholder="Min"
-                                        min={0}
-                                        style={{ width: 120 }}
-                                        allowClear onChange={(e) => handleFilterChange('quantityMin', e.target.value)}
-                                    />
-                                </div>
-                                <div style={{ display: "flex", alignItems: "center", justifyContent: "flex-start", gap: "20px", color: "#6B7012" }}>
-                                    <span>Số Lượng Tối Đa :</span>
-                                    <Input
-                                        type="number"
-                                        placeholder="Max"
-                                        min={0}
-                                        style={{ width: 120 }}
-                                        allowClear onChange={(e) => handleFilterChange('quantityMax', e.target.value)}
-                                    />
-                                </div>
-                                {/* <div style={{ display: "flex", alignItems: "center", justifyContent: "flex-start", gap: "20px" }}>
-                                    <span>Size Tối Thiểu:</span>
-                                    <Input
-                                        type="number"
-                                        placeholder="Min"
-                                        min={0}
-                                        style={{ width: 120 }}
-                                        allowClear onChange={(e) => handleFilterChange('sizeMin', e.target.value)}
-                                    />
-                                </div>
-                                <div style={{ display: "flex", alignItems: "center", justifyContent: "flex-start", gap: "20px" }}>
-                                    <span>Size Tối Đa:</span>
-                                    <Input
-                                        type="number"
-                                        placeholder="Max"
-                                        min={0}
-                                        style={{ width: 120 }}
-                                        allowClear onChange={(e) => handleFilterChange('sizeMax', e.target.value)}
-                                    />
-                                </div> */}
-                                <Button type="primary" onClick={handleFilterSubmit}>
-                                    Lọc Sản Phẩm
-                                </Button>
-                            </Space>
-
-
-
-                            {/* <span style={{ marginLeft: 840 }}> <DropDown /></span> */}
+                        <div style={{ display: "flex", justifyContent: "space-around", alignItems: "center", padding: "0 15px" }}>
+                            <h3 style={{ textAlign: "center", margin: 0, color: "#E3C584" }}><i>Khu Vực Chứa Gạo  </i></h3>
+                            <Space.Compact
+                                style={{
+                                    width: '20%',
+                                }}
+                            >
+                                <Input
+                                    placeholder="Tìm kiếm khu vực..."
+                                    onChange={(e) => handleSearchChange(e.target.value)}
+                                />
+                                <Button type="primary">Tìm Kiếm</Button>
+                            </Space.Compact>
                         </div>
 
                         {loading ? (<Spin size="large" />) : (
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1742499063859)
+++ b/.idea/compiler.xml	(date 1742499063859)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <annotationProcessing>
+      <profile default="true" name="Default" enabled="true" />
+      <profile name="Maven default annotation processors profile" enabled="true">
+        <sourceOutputDir name="target/generated-sources/annotations" />
+        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
+        <outputRelativeToContentRoot value="true" />
+        <module name="swp391" />
+      </profile>
+    </annotationProcessing>
+  </component>
+  <component name="JavacSettings">
+    <option name="ADDITIONAL_OPTIONS_OVERRIDE">
+      <module name="swp391" options="-parameters" />
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
new file mode 100644
--- /dev/null	(date 1742498244273)
+++ b/.idea/encodings.xml	(date 1742498244273)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/swp391/src/main/java" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/components/invoiceCustomerCreate.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from 'react';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport { Button, Col, DatePicker, Drawer, Form, Input, Row, Select, Space, message, notification } from 'antd';\r\nimport API from '../../../Utils/API/API';\r\nimport { getToken } from '../../../Utils/UserInfoUtils';\r\nconst { Option } = Select;\r\n\r\nconst InvoiceCustomerCreate = ({ onCustomerCreated }) => {\r\n    const [open, setOpen] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [form] = Form.useForm();\r\n    const [api, contextHolder] = notification.useNotification();\r\n\r\n    const token = getToken();\r\n    const showDrawer = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const onClose = () => {\r\n        setOpen(false);\r\n        form.resetFields();\r\n    };\r\n\r\n    const handleReset = () => {\r\n        form.resetFields();\r\n    };\r\n    const openNotificationWithIcon = (type, title, description) => {\r\n        api[type]({\r\n            message: title,\r\n            description: description,\r\n            placement: 'bottomRight',\r\n        });\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        try {\r\n            const values = await form.validateFields();\r\n            const createdAt = moment().valueOf(); // Epoch timestamp (millisecond)\r\n            const requestData = {\r\n                employeeStoreDTO: {\r\n                    storeID: values.store\r\n                },\r\n                name: values.name.trim(),\r\n                phoneNumber: values.phoneNumber.trim(),\r\n                email: values.email ? values.email.trim() : null,\r\n                address: values.address ? values.address.trim() : null,\r\n                createdBy: null\r\n            };\r\n\r\n\r\n            const response = await axios.post(\r\n                API.EMPLOYEE.CREATE_CUSTOMER,\r\n                requestData,\r\n                {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`, // Thêm token vào header\r\n                    },\r\n                }\r\n            );\r\n            console.log(\"Dữ liệu gửi lên Backend thanh cong :\", requestData);\r\n            if (response.status === 201) {\r\n                openNotificationWithIcon('success', 'Thành công', 'Tạo khách hàng mới thành công!');\r\n                if (onCustomerCreated) {\r\n                    onCustomerCreated(values.phoneNumber.trim(), values.name.trim());\r\n                }\r\n                setTimeout(() => {\r\n                    onClose();\r\n                }, 1000);\r\n            }\r\n            //  else {\r\n            //     openNotificationWithIcon('error', 'Lỗi', 'Kiểm tra lại value phone hoặc email trùng nha onichang, Không gửi dữ liệu được đến backend nha onichan');\r\n            // }\r\n        } catch (error) {\r\n            openNotificationWithIcon('error', 'Thất Bại', 'Valid Kiểm tra lại value phone hoặc email, Không gửi dữ liệu được đến backend');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {contextHolder}\r\n            <Button type=\"primary\" onClick={showDrawer} icon={<PlusOutlined />}>\r\n                Khách Hàng Mới\r\n            </Button>\r\n            <Drawer\r\n                title=\"Tạo khách hàng mới\"\r\n                width={720}\r\n                onClose={onClose}\r\n                open={open}\r\n                styles={{\r\n                    body: {\r\n                        paddingBottom: 80,\r\n                    },\r\n                }}\r\n                extra={\r\n                    <Space>\r\n                        <Button\r\n                            htmlType=\"button\"\r\n                            onClick={handleReset}\r\n                        >\r\n                            Reset\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => {\r\n                                handleSubmit();\r\n                            }}\r\n                            type=\"primary\"\r\n                            loading={loading}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    </Space>\r\n                }\r\n            >\r\n                <Form form={form} layout=\"vertical\" hideRequiredMark>\r\n                    <Row gutter={16}>\r\n                        <Col span={12}>\r\n                            <Form.Item\r\n                                name=\"name\"\r\n                                label=\"Tên Khách Hàng\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Nhập tên khách hàng di',\r\n                                    },\r\n                                ]}\r\n                            >\r\n                                <Input placeholder=\"Nhập Tên Khách Hàng\" />\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span={12}>\r\n                            <Form.Item\r\n                                name=\"phoneNumber\"\r\n                                label=\"Số Điện Thoại\"\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Cần có số điện thoại',\r\n                                    },\r\n                                    {\r\n                                        pattern: /^0\\d{9}$/,\r\n                                        message: 'Vui lòng nhập 10 số và bắt đầu từ 0',\r\n                                    }\r\n                                ]}\r\n                            >\r\n                                <Input type='number' max={10}\r\n                                    style={{\r\n                                        width: '100%',\r\n                                    }}\r\n                                    placeholder=\"Nhập Số điện Thoại\"\r\n                                />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row gutter={16}>\r\n                        <Col span={12}>\r\n                            <Form.Item\r\n                                name=\"email\"\r\n                                label=\"Email\"\r\n\r\n                                rules={[\r\n                                    {\r\n                                        type: 'email',\r\n                                        message: 'Email không đúng định dạng',\r\n                                    }\r\n                                ]}\r\n                            >\r\n                                <Input placeholder=\"Nhập Email của khách hàng\" />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row gutter={16}>\r\n                        <Col span={24}>\r\n                            <Form.Item\r\n                                name=\"address\"\r\n                                label=\"Địa Chỉ\"\r\n                                rules={[\r\n                                    {\r\n                                        required: false,\r\n                                        message: 'Vui lòng nhập mô tả',\r\n                                    },\r\n                                ]}\r\n                            >\r\n                                <Input.TextArea rows={4} placeholder=\"Nhập mô tả về khách hàng\" />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Drawer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default InvoiceCustomerCreate;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/components/invoiceCustomerCreate.js b/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/components/invoiceCustomerCreate.js
--- a/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/components/invoiceCustomerCreate.js	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/components/invoiceCustomerCreate.js	(date 1742498244285)
@@ -5,14 +5,14 @@
 import { Button, Col, DatePicker, Drawer, Form, Input, Row, Select, Space, message, notification } from 'antd';
 import API from '../../../Utils/API/API';
 import { getToken } from '../../../Utils/UserInfoUtils';
+import { success, error } from '../../../Utils/AntdNotification';
 const { Option } = Select;
 
 const InvoiceCustomerCreate = ({ onCustomerCreated }) => {
     const [open, setOpen] = useState(false);
     const [loading, setLoading] = useState(false);
     const [form] = Form.useForm();
-    const [api, contextHolder] = notification.useNotification();
-
+    const [messageApi, contextHolder] = message.useMessage();
     const token = getToken();
     const showDrawer = () => {
         setOpen(true);
@@ -26,15 +26,8 @@
     const handleReset = () => {
         form.resetFields();
     };
-    const openNotificationWithIcon = (type, title, description) => {
-        api[type]({
-            message: title,
-            description: description,
-            placement: 'bottomRight',
-        });
-    };
-
     const handleSubmit = async () => {
+        setLoading(true)
         try {
             const values = await form.validateFields();
             const createdAt = moment().valueOf(); // Epoch timestamp (millisecond)
@@ -60,20 +53,25 @@
                 }
             );
             console.log("Dữ liệu gửi lên Backend thanh cong :", requestData);
-            if (response.status === 201) {
-                openNotificationWithIcon('success', 'Thành công', 'Tạo khách hàng mới thành công!');
-                if (onCustomerCreated) {
-                    onCustomerCreated(values.phoneNumber.trim(), values.name.trim());
-                }
-                setTimeout(() => {
-                    onClose();
-                }, 1000);
+            success("Tạo khách hàng mới thành công", messageApi);
+            if (onCustomerCreated) {
+                onCustomerCreated(values.phoneNumber.trim(), values.name.trim());
+            }
+            setTimeout(() => {
+                onClose();
+            }, 1000);
+
+        } catch (err) {
+            if (err.errorFields) {
+                messageApi.open({
+                    type: 'warning',
+                    content: 'Vui lòng điền đầy đủ và đúng thông tin trước khi gửi!',
+                });
+            } else {
+                error(err.response?.data?.message || "Tạo mới tài khoản thất bại.", messageApi);
             }
-            //  else {
-            //     openNotificationWithIcon('error', 'Lỗi', 'Kiểm tra lại value phone hoặc email trùng nha onichang, Không gửi dữ liệu được đến backend nha onichan');
-            // }
-        } catch (error) {
-            openNotificationWithIcon('error', 'Thất Bại', 'Valid Kiểm tra lại value phone hoặc email, Không gửi dữ liệu được đến backend');
+        } finally {
+            setLoading(false);
         }
     };
 
@@ -81,7 +79,6 @@
         <>
             {contextHolder}
             <Button type="primary" onClick={showDrawer} icon={<PlusOutlined />}>
-                Khách Hàng Mới
             </Button>
             <Drawer
                 title="Tạo khách hàng mới"
@@ -113,7 +110,7 @@
                     </Space>
                 }
             >
-                <Form form={form} layout="vertical" hideRequiredMark>
+                <Form form={form} layout="vertical" hideRequiredMark validateTrigger="onSubmit">
                     <Row gutter={16}>
                         <Col span={12}>
                             <Form.Item
Index: Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/components/invoiceDetail.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport InvoiceCustomerCreate from './invoiceCustomerCreate';\r\nimport { Radio, Tabs, Select, Button, Spin, Table, InputNumber, Input, Layout, Form, Modal, message, notification } from 'antd';\r\nimport { SettingOutlined } from '@ant-design/icons';\r\nimport axios from 'axios';\r\nimport API from '../../../Utils/API/API';\r\nimport { getToken } from '../../../Utils/UserInfoUtils';\r\nimport { Content } from 'antd/es/layout/layout';\r\nimport TextArea from 'antd/es/input/TextArea';\r\n\r\nconst InvoiceDetail = () => {\r\n    // của tạo mới Invoice\r\n    const [size, setSize] = useState('small');\r\n    const [activeKey, setActiveKey] = useState('1');\r\n    const [options, setOptions] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [items, setItems] = useState([]);\r\n    const [selectedProduct, setSelectedProduct] = useState([]);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    const [totalAmount, setTotalAmount] = useState(0);\r\n    const [discount, setDiscount] = useState(0);\r\n    const [customerPayment, setCustomerPayment] = useState(0);\r\n    const [totalwithoutdiscount, setTotalWithoutDiscount] = useState(0);\r\n    const [moneyShipping, setMoneyShipping] = useState(0);\r\n    const [packageOptions, setPackageOptions] = useState([]);\r\n\r\n\r\n\r\n    // của thông tin khách hàng \r\n    const [options2, setOptions2] = useState([]);\r\n    const [customerName, setCustomerName] = useState('');\r\n    const [open, setOpen] = useState(false);\r\n    const [externalPhoneNumber, setExternalPhoneNumber] = useState('');\r\n    const [externaName, setExternalName] = useState('');\r\n\r\n    //của chỉnh sửa khách hàng \r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [form] = Form.useForm();\r\n    const [api, contextHolder] = notification.useNotification();\r\n\r\n    const token = getToken();\r\n\r\n    const showDrawer = () => {\r\n        setOpen(true);\r\n    };\r\n    const onClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const openNotificationWithIcon = (type, title, description) => {\r\n        api[type]({\r\n            message: title,\r\n            description: description,\r\n            placement: 'bottomRight',\r\n        });\r\n    };\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n        // form.setFieldsValue({ phoneNumber: currentTab.customerPhone, phoneNumberNew: currentTab.customerPhone });\r\n    };\r\n    const handleOk = () => {\r\n        form.validateFields().then((values) => {\r\n            axios.put(\r\n                API.EMPLOYEE.INVOICE_UPDATE_USER(values.phoneNumber),\r\n                {\r\n                    phoneNumber: values.phoneNumber,\r\n                    phoneNumberNew: values.phoneNumberNew,\r\n                    name: values.name,\r\n                },\r\n                {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,\r\n                    },\r\n                }\r\n            ).then((response) => {\r\n                setItems((prevItems) =>\r\n                    prevItems.map((item) =>\r\n                        item.key === activeKey\r\n                            ? {\r\n                                ...item,\r\n                                customerPhone: values.phoneNumberNew,\r\n                                customerName: values.name,\r\n                            }\r\n                            : item\r\n                    )\r\n                );\r\n                fetchData2();\r\n                setIsModalVisible(false);\r\n                form.resetFields();\r\n                openNotificationWithIcon('success', 'Thành công', 'Cập Nhật khách hàng thành công!');\r\n            }).catch(() => {\r\n                openNotificationWithIcon('error', 'Thất Bại', 'Số điện thoại không tìm được hoặc đang bị trùng ');\r\n            });\r\n        }).catch(() => {\r\n            openNotificationWithIcon('error', 'Thất Bại', 'Validation Form diii onichan');\r\n        });\r\n    };\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n        form.resetFields();\r\n    };\r\n    const handleCustomerCreated = (phoneNumber, name) => {\r\n        setExternalPhoneNumber(phoneNumber);\r\n        setExternalName(name);\r\n        setItems(prevItems =>\r\n            prevItems.map(item =>\r\n                item.key === activeKey\r\n                    ? { ...item, customerPhone: phoneNumber, customerName: name }\r\n                    : item\r\n            )\r\n        );\r\n        console.log('Số điện thoại từ component con là là là:', phoneNumber);\r\n    };\r\n    const calculateTotalWithoutDiscount = (dataSource) => {\r\n        return dataSource.reduce((sum, item) => {\r\n            return sum + (item.quantity * item.price);\r\n        }, 0);\r\n    };\r\n    const calculateTotalDiscount = (dataSource) => {\r\n        return dataSource.reduce((sum, item) => sum + (item.discount * item.quantity || 0), 0);\r\n    };\r\n\r\n    const calculateTotalAmount = (dataSource) => {\r\n        return dataSource.reduce((sum, item) => {\r\n            const itemTotal =\r\n                item.quantity * item.price - (item.discount * item.quantity || 0) + (item.moneyShip * item.quantity || 0);\r\n            return sum + itemTotal;\r\n        }, 0);\r\n    };\r\n    const calculateFinalAmount = () => {\r\n        return totalAmount - discount;\r\n    };\r\n\r\n    const calculateChange = () => {\r\n        const finalAmount = calculateFinalAmount();\r\n        return customerPayment - finalAmount >= 0 ? customerPayment - finalAmount : 0;\r\n    };\r\n    const columns = [\r\n        {\r\n            title: 'Lựa chọn',\r\n            key: 'option',\r\n            render: (text, record) => (\r\n                <Button type=\"link\" danger onClick={() => handleDeleteRow(record.key)}>\r\n                    <i class=\"bi bi-trash\"></i>\r\n                </Button>\r\n            ),\r\n        },\r\n        {\r\n            title: 'Mã Sản Phẩm',\r\n            dataIndex: 'productID',\r\n            key: 'productID',\r\n\r\n        },\r\n        {\r\n            title: 'Đóng Gói',\r\n            dataIndex: 'packageId',\r\n            key: 'packageId',\r\n            render: (text, record) => (\r\n                <Select\r\n                    style={{ width: 120 }}\r\n                    value={record.packageId}\r\n                    onChange={(value) => handlePackageChange(value, record.key)}\r\n                    options={packageOptions}\r\n                    placeholder=\"Chọn đơn vị\"\r\n                    loading={loading}\r\n                />\r\n            ),\r\n        },\r\n        {\r\n            title: 'Tên sản phẩm',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: 'Discount/Kg ',\r\n            key: 'discount',\r\n            render: (text, record) => (\r\n                <InputNumber\r\n                    defaultValue={0}\r\n                    min={0}\r\n                    value={record.discount}\r\n                    onChange={(value) => handleInputChange2(value, record.key, 'discount')}\r\n                />\r\n            ),\r\n        },\r\n        {\r\n            title: 'Số lượng',\r\n            dataIndex: 'quantity',\r\n            key: 'quantity',\r\n            render: (text, record) => (\r\n                <InputNumber\r\n                    defaultValue={1}\r\n                    min={1}\r\n                    value={record.quantity}\r\n                    onChange={(value) => handleInputChange(value, record.key, 'quantity')}\r\n                />\r\n            ),\r\n        },\r\n        {\r\n            title: 'Đơn giá/Kg',\r\n            dataIndex: 'price',\r\n            key: 'price',\r\n        },\r\n        {\r\n            title: 'Ship/Kg',\r\n            dataIndex: 'moneyShip',\r\n            key: 'moneyShip',\r\n            render: (text, record) => (\r\n                <InputNumber\r\n                    defaultValue={0}\r\n                    min={0}\r\n                    value={record.moneyShip}\r\n                    onChange={(value) => handleInputChange2(value, record.key, 'moneyShip')} // Sử dụng handleInputChange2\r\n                />\r\n            ),\r\n        },\r\n\r\n        {\r\n            title: 'Thành tiền(VND)',\r\n            dataIndex: 'total',\r\n            key: 'total',\r\n            render: (text) => (text || 0).toLocaleString(),\r\n        },\r\n    ];\r\n    const handleInputChange = (value, key, field) => {\r\n        const finalValue = value === null || value < 1 ? 1 : value;\r\n        setItems(prevItems =>\r\n            prevItems.map(item => {\r\n                if (item.key === activeKey) {\r\n                    const updatedDataSource = item.children.props.dataSource.map(row =>\r\n                        row.key === key\r\n                            ? {\r\n                                ...row,\r\n                                [field]: finalValue,\r\n                                total:\r\n                                    finalValue * row.price -\r\n                                    (row.discount * finalValue || 0) +\r\n                                    (row.moneyShip * finalValue || 0),\r\n                            }\r\n                            : row\r\n                    );\r\n                    setTotalAmount(calculateTotalAmount(updatedDataSource));\r\n                    setTotalWithoutDiscount(calculateTotalWithoutDiscount(updatedDataSource));\r\n\r\n                    return {\r\n                        ...item,\r\n                        children: (\r\n                            <Table\r\n                                columns={columns}\r\n                                pagination={false}\r\n                                dataSource={updatedDataSource}\r\n                                size={size}\r\n                            />\r\n                        ),\r\n                    };\r\n                }\r\n                return item;\r\n            })\r\n        );\r\n    };\r\n\r\n    const handleInputChange2 = (value, key, field) => {\r\n        const finalValue = value === null || value < 0 ? 0 : value;\r\n        setItems(prevItems =>\r\n            prevItems.map(item => {\r\n                if (item.key === activeKey) {\r\n                    const updatedDataSource = item.children.props.dataSource.map(row =>\r\n                        row.key === key\r\n                            ? {\r\n                                ...row,\r\n                                [field]: finalValue,\r\n                                total:\r\n                                    row.quantity * row.price -\r\n                                    (field === 'discount' ? finalValue * row.quantity : row.discount * row.quantity || 0) +\r\n                                    (field === 'moneyShip' ? finalValue * row.quantity : row.moneyShip * row.quantity || 0),\r\n                            }\r\n                            : row\r\n                    );\r\n                    setTotalAmount(calculateTotalAmount(updatedDataSource));\r\n                    setTotalWithoutDiscount(calculateTotalWithoutDiscount(updatedDataSource));\r\n\r\n                    return {\r\n                        ...item,\r\n                        children: (\r\n                            <Table\r\n                                columns={columns}\r\n                                dataSource={updatedDataSource}\r\n                                pagination={false}\r\n                                size={size}\r\n                            />\r\n                        ),\r\n                    };\r\n                }\r\n                return item;\r\n            })\r\n        );\r\n    };\r\n    const handlePackageChange = (value, key) => {\r\n        setItems(prevItems =>\r\n            prevItems.map(item => {\r\n                if (item.key === activeKey) {\r\n                    const updatedDataSource = item.children.props.dataSource.map(row =>\r\n                        row.key === key\r\n                            ? { ...row, packageId: value }\r\n                            : row\r\n                    );\r\n                    return {\r\n                        ...item,\r\n                        children: (\r\n                            <Table\r\n                                columns={columns}\r\n                                pagination={false}\r\n                                dataSource={updatedDataSource}\r\n                                size={size}\r\n                            />\r\n                        ),\r\n                    };\r\n                }\r\n                return item;\r\n            })\r\n        );\r\n    };\r\n\r\n    const addProductToTab = () => {\r\n        if (!selectedProduct || selectedProduct.length === 0) {\r\n            setErrorMessage(\"Chưa chọn sản phẩm nào\");\r\n            return;\r\n        }\r\n        if (!activeKey || items.length === 0) {\r\n            setErrorMessage(\"Chưa có tab nào để thêm sản phẩm nha\");\r\n            return;\r\n        }\r\n        if (!selectedProduct.productID || !selectedProduct.label || !selectedProduct.price) {\r\n            setErrorMessage(\"Thông tin sản phẩm không đầy đủ\");\r\n            return;\r\n        }\r\n        setErrorMessage(\"\");\r\n\r\n        const newItems = items.map(item => {\r\n            if (item.key === activeKey) {\r\n                const existingProducts = item.children.props.dataSource || [];\r\n                const productIndex = existingProducts.findIndex(p => p.name === selectedProduct.label);\r\n\r\n                let updatedDataSource;\r\n                if (productIndex !== -1) {\r\n                    updatedDataSource = existingProducts.map((product, index) =>\r\n                        index === productIndex\r\n                            ? {\r\n                                ...product,\r\n                                quantity: product.quantity + 1,\r\n                                total:\r\n                                    (product.quantity + 1) * product.price -\r\n                                    (product.discount * (product.quantity + 1) || 0) +\r\n                                    (product.moneyShip * (product.quantity + 1) || 0),\r\n                            }\r\n                            : product\r\n                    );\r\n                } else {\r\n                    updatedDataSource = [\r\n                        ...existingProducts,\r\n                        {\r\n                            key: Date.now().toString(),\r\n                            name: selectedProduct.label,\r\n                            quantity: 1,\r\n                            price: selectedProduct.price,\r\n                            image: selectedProduct.image,\r\n                            productID: selectedProduct.productID,\r\n                            discount: 0,\r\n                            moneyShip: 0,\r\n                            total: 1 * selectedProduct.price,\r\n                            packageId: packageOptions.length > 0 ? packageOptions[0].value : undefined\r\n                        },\r\n                    ];\r\n                }\r\n                setTotalAmount(calculateTotalAmount(updatedDataSource));\r\n                setTotalWithoutDiscount(calculateTotalWithoutDiscount(updatedDataSource));\r\n\r\n                return {\r\n                    ...item,\r\n                    children: (\r\n                        <Table\r\n                            columns={columns}\r\n                            dataSource={updatedDataSource}\r\n                            pagination={false}\r\n                            size={size}\r\n                            rowClassName={() => (size === 'large' ? 'large-row' : 'small-row')}\r\n                        />\r\n                    ),\r\n                };\r\n            }\r\n            return item;\r\n        });\r\n\r\n        setItems(newItems);\r\n    };\r\n    const handleDeleteRow = (key) => {\r\n        setItems(prevItems =>\r\n            prevItems.map(item => {\r\n                if (item.key === activeKey) {\r\n                    const updatedDataSource = item.children.props.dataSource.filter(row => row.key !== key);\r\n                    setTotalAmount(calculateTotalAmount(updatedDataSource));\r\n                    setTotalWithoutDiscount(calculateTotalWithoutDiscount(updatedDataSource));\r\n\r\n                    return {\r\n                        ...item,\r\n                        children: (\r\n                            <Table\r\n                                columns={columns}\r\n                                dataSource={updatedDataSource}\r\n                                pagination={false}\r\n                                size={size}\r\n                            />\r\n                        ),\r\n                    };\r\n                }\r\n                return item;\r\n            })\r\n        );\r\n    };\r\n\r\n\r\n\r\n\r\n    const add = () => {\r\n        const newKey = Date.now().toString();\r\n        setItems([\r\n            ...(items || []),\r\n            {\r\n                label: `New Tab`,\r\n                key: newKey,\r\n                customerPhone: '',\r\n                customerName: '',\r\n                description: '',\r\n                customerPayment: 0,\r\n                children: (\r\n                    <Table\r\n                        columns={columns}\r\n                        dataSource={[]}\r\n                        pagination={false}\r\n                        size={size}\r\n                        rowClassName={() => size === 'large' ? 'large-row' : 'small-row'}\r\n                    />\r\n                ),\r\n            },\r\n        ]);\r\n        setActiveKey(newKey);\r\n        setTotalAmount(0);\r\n        setTotalWithoutDiscount(0);\r\n        setDiscount(0);\r\n        setCustomerPayment(0);\r\n        setExternalPhoneNumber('');\r\n        setExternalName('');\r\n    };\r\n    const remove = (targetKey) => {\r\n        if (!items) return;\r\n        const targetIndex = items.findIndex((item) => item.key === targetKey);\r\n        const newItems = items.filter((item) => item.key !== targetKey);\r\n        if (newItems.length && targetKey === activeKey) {\r\n            const newActiveKey =\r\n                newItems[targetIndex === newItems.length ? targetIndex - 1 : targetIndex].key;\r\n            setActiveKey(newActiveKey);\r\n            const activeTabDataSource = newItems.find(item => item.key === newActiveKey)?.children.props.dataSource || [];\r\n            setTotalAmount(calculateTotalAmount(activeTabDataSource));\r\n            setTotalWithoutDiscount(calculateTotalWithoutDiscount(activeTabDataSource));\r\n\r\n        } else if (newItems.length === 0) {\r\n            setTotalAmount(0);\r\n            setTotalWithoutDiscount(0);\r\n            setDiscount(0);\r\n            setCustomerPayment(0);\r\n        }\r\n        setItems(newItems);\r\n    };\r\n    const onTabChange = (key) => {\r\n        setActiveKey(key);\r\n        const activeTab = items.find(item => item.key === key);\r\n        if (activeTab) {\r\n            setTotalAmount(calculateTotalAmount(activeTab.children.props.dataSource));\r\n            setTotalWithoutDiscount(calculateTotalWithoutDiscount(activeTab.children.props.dataSource));\r\n            setCustomerPayment(activeTab.customerPayment || 0);\r\n        }\r\n    };\r\n    const handleDescriptionChange = (e) => {\r\n        const newDescription = e.target.value;\r\n        setItems(prevItems =>\r\n            prevItems.map(item =>\r\n                item.key === activeKey\r\n                    ? { ...item, description: newDescription }\r\n                    : item\r\n            )\r\n        );\r\n    };\r\n\r\n    const handleCustomerChange = (phone, option) => {\r\n        const customerName = option ? option.name : '';\r\n        setExternalPhoneNumber('');\r\n        setExternalName('');\r\n        setItems(prevItems =>\r\n            prevItems.map(item =>\r\n                item.key === activeKey\r\n                    ? { ...item, customerPhone: phone, customerName }\r\n                    : item\r\n            )\r\n        );\r\n    };\r\n\r\n    const handleCustomerNameChange = (e) => {\r\n        const newName = e.target.value;\r\n        setItems(prevItems =>\r\n            prevItems.map(item =>\r\n                item.key === activeKey\r\n                    ? { ...item, customerName: newName }\r\n                    : item\r\n            )\r\n        );\r\n    };\r\n    // dme cai chuyen tab nay kho vai l ay anh duc a\r\n    const currentTab = items.find(item => item.key === activeKey) || { customerPhone: '', customerName: '' };\r\n    const onEdit = (targetKey, action) => {\r\n        if (action === 'add') {\r\n            add();\r\n        } else {\r\n            remove(targetKey);\r\n        }\r\n    };\r\n    const onChange = (e) => {\r\n        setSize(e.target.value);\r\n    };\r\n\r\n    const fetchData = (searchValue = \"\") => {\r\n        setLoading(true);\r\n        axios.get(API.EMPLOYEE.GET_PRODUCTS_BY_NAMElist, {\r\n            params: {\r\n                name: searchValue,\r\n            },\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        })\r\n            .then(response => {\r\n                const formattedOptions = response.data.map(item => ({\r\n                    value: item.name,\r\n                    label: item.name,\r\n                    price: item.price,\r\n                    productID: item.productID,\r\n                    image: item.productImage,\r\n                }));\r\n                setOptions(formattedOptions);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Lỗi khi lấy dữ liệu:\", error);\r\n            })\r\n            .finally(() => {\r\n                setLoading(false);\r\n            });\r\n    };\r\n    const fetchData2 = (searchValue = \"\") => {\r\n        setLoading(true);\r\n        axios.get(API.EMPLOYEE.GET_ALL_CUSTOMERlist, {\r\n            params: {\r\n                phonesearch: searchValue,\r\n            },\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        })\r\n            .then(response => {\r\n                const formattedOptions = response.data.map(item => ({\r\n                    value: item.phoneNumber,\r\n                    label: `${item.phoneNumber} - ${item.name}`,\r\n                    name: item.name\r\n                }));\r\n                setOptions2(formattedOptions);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Lỗi khi lấy dữ liệu:\", error);\r\n            })\r\n            .finally(() => {\r\n                setLoading(false);\r\n            });\r\n    };\r\n    const fetchPackageData = () => {\r\n        setLoading(true);\r\n        axios.get(API.EMPLOYEE.INVOICE_PACKAGElist, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        })\r\n            .then(response => {\r\n                const formattedOptions = response.data.map(item => ({\r\n                    value: item.id,\r\n                    label: item.description\r\n                }));\r\n                setPackageOptions(formattedOptions);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Lỗi khi lấy dữ liệu package:\", error);\r\n            })\r\n            .finally(() => {\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n    //render Effect \r\n    useEffect(() => {\r\n        fetchData();\r\n        fetchData2();\r\n        fetchPackageData();\r\n        if (items.length > 0) {\r\n            const activeTab = items.find(item => item.key === activeKey);\r\n            if (activeTab) {\r\n                setTotalAmount(calculateTotalAmount(activeTab.children.props.dataSource));\r\n                setTotalWithoutDiscount(calculateTotalWithoutDiscount(activeTab.children.props.dataSource));\r\n            }\r\n        }\r\n    }, []);\r\n    useEffect(() => {\r\n        if (currentTab.customerPhone) {\r\n            form.setFieldsValue({\r\n                name: currentTab.customerName || '',\r\n                phoneNumber: currentTab.customerPhone || '',\r\n                phoneNumberNew: currentTab.customerPhone || '',\r\n            });\r\n        }\r\n    }, [currentTab, form]);\r\n    useEffect(() => {\r\n        const activeTab = items.find(item => item.key === activeKey);\r\n        if (activeTab) {\r\n            const totalShipping = activeTab.children.props.dataSource.reduce(\r\n                (sum, item) => sum + (item.moneyShip * item.quantity || 0),\r\n                0\r\n            );\r\n            setMoneyShipping(totalShipping);\r\n        }\r\n    }, [items, activeKey]);\r\n\r\n\r\n    const onSearch2 = (value) => {\r\n        fetchData(value);\r\n    };\r\n    const onSearchCustomer = (value) => {\r\n        fetchData2(value);\r\n    };\r\n\r\n    const labelStyle = {\r\n        width: 200,\r\n        textAlign: 'left',\r\n        paddingRight: 12,\r\n    };\r\n\r\n    const inputStyle = {\r\n        flex: 1,\r\n        border: 'none',\r\n        borderBottom: '1px solid #ddd',\r\n        padding: '4px 0'\r\n    };\r\n    const handlePayment = () => {\r\n        const invoiceData = {\r\n            invoice: {\r\n                customerPhone: currentTab.customerPhone,\r\n                customerName: currentTab.customerName,\r\n                totalAmount: calculateFinalAmount(),\r\n                totalShipping: moneyShipping,\r\n                description: currentTab.description || '',\r\n            },\r\n            invoiceDetails: items\r\n                .find(item => item.key === activeKey)\r\n                ?.children.props.dataSource.map(product => ({\r\n                    productID: product.productID,\r\n                    packageId: product.packageId,\r\n                    quantity: product.quantity,\r\n                    price: product.price,\r\n                    discount: product.discount,\r\n                })) || [],\r\n        };\r\n\r\n        if (!invoiceData.invoice.customerPhone || invoiceData.invoiceDetails.length === 0) {\r\n            openNotificationWithIcon('error', 'Lỗi', 'Vui lòng điền đầy đủ thông tin khách hàng và sản phẩm!');\r\n            return;\r\n        }\r\n        if (!/^[0-9]{10}$/.test(currentTab.customerPhone)) {\r\n            openNotificationWithIcon('error', 'Lỗi', 'Số điện thoại phải là 10 chữ số!');\r\n            return;\r\n        }\r\n\r\n        axios.post(\r\n            API.EMPLOYEE.INVOICE_CREATE,\r\n            invoiceData,\r\n            {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            }\r\n        )\r\n            .then(response => {\r\n                openNotificationWithIcon('success', 'Thành công', 'Hóa đơn đã được tạo thành công!');\r\n                remove(activeKey);\r\n                if (items.length > 1) {\r\n                    const remainingItems = items.filter(item => item.key !== activeKey);\r\n                    const newActiveKey = remainingItems[0].key;\r\n                    setActiveKey(newActiveKey);\r\n                    const activeTabDataSource = remainingItems.find(item => item.key === newActiveKey)?.children.props.dataSource || [];\r\n                    setTotalAmount(calculateTotalAmount(activeTabDataSource));\r\n                    setTotalWithoutDiscount(calculateTotalWithoutDiscount(activeTabDataSource));\r\n                    setCustomerPayment(remainingItems.find(item => item.key === newActiveKey)?.customerPayment || 0);\r\n                } else {\r\n                    setActiveKey(null);\r\n                    setTotalAmount(0);\r\n                    setMoneyShipping(0);\r\n                    setCustomerPayment(0);\r\n                    setDiscount(0);\r\n                    setCustomerPayment(0);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                openNotificationWithIcon('error', 'Thất bại', 'Có lỗi xảy ra khi tạo hóa đơn!');\r\n            });\r\n        console.log('Dữ liệu sẽ gửi về backend:', JSON.stringify(invoiceData, null, 2));\r\n    };\r\n    const handleCustomerPaymentChange = (value) => {\r\n        const finalValue = value || 0;\r\n        setItems(prevItems =>\r\n            prevItems.map(item =>\r\n                item.key === activeKey\r\n                    ? { ...item, customerPayment: finalValue }\r\n                    : item\r\n            )\r\n        );\r\n        setCustomerPayment(finalValue);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {contextHolder}\r\n            <div className=\"main-container\">\r\n                <Content className=\"invoice-content\">\r\n                    <h1 className=\"invoice-title\">Hoá Đơn Khách Hàng</h1>\r\n                    <div className=\"control-section\">\r\n                        <Radio.Group value={size} onChange={(e) => setSize(e.target.value)}>\r\n                            <Radio.Button value=\"small\">Small</Radio.Button>\r\n                            <Radio.Button value=\"large\">Large</Radio.Button>\r\n                        </Radio.Group>\r\n                        <div className=\"product-selection\">\r\n                            <div className=\"select-wrapper\">\r\n                                <Select\r\n                                    showSearch\r\n                                    placeholder=\"Chọn sản phẩm\"\r\n                                    optionFilterProp=\"label\"\r\n                                    style={{ width: '300px' }}\r\n                                    options={options}\r\n                                    onSearch={onSearch2}\r\n                                    onChange={(value, option) => setSelectedProduct(option)}\r\n                                    notFoundContent={loading ? <Spin size=\"small\" /> : \"Không tìm thấy\"}\r\n                                />\r\n                                <Button type=\"primary\" onClick={addProductToTab}>\r\n                                    Thêm\r\n                                </Button>\r\n                            </div>\r\n                            {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <Tabs\r\n                        type=\"editable-card\"\r\n                        size={size}\r\n                        activeKey={activeKey}\r\n                        onChange={onTabChange}\r\n                        onEdit={onEdit}\r\n                        items={items}\r\n                        className=\"invoice-tabs\"\r\n                    />\r\n                    <style jsx>{`\r\n                    .large-row td {\r\n                        font-size: 18px !important;\r\n                    }\r\n                    .small-row td {\r\n                        font-size: 14px !important;\r\n                    }\r\n                    .ant-table-thead th {\r\n                        font-size: ${size === 'large' ? '16px' : '13px'} !important;\r\n                    }\r\n                 `}</style>\r\n                </Content>\r\n\r\n                <Content className=\"customer-content\">\r\n                    <h1 className=\"customer-title\">Thông Tin Khách Hàng</h1>\r\n                    <div className=\"customer-info\">\r\n                        <div className=\"customer-form\">\r\n                            <div className=\"form-row\">\r\n                                <label className=\"form-label\">Phone Number: </label>\r\n                                {currentTab.customerPhone && (\r\n                                    <Button type=\"link\" onClick={showModal} >\r\n                                        <SettingOutlined />\r\n                                    </Button>\r\n                                )}\r\n                                <Select\r\n                                    showSearch\r\n                                    placeholder=\"Chọn số điện thoại\"\r\n                                    optionFilterProp=\"label\"\r\n                                    style={inputStyle}\r\n                                    options={options2}\r\n                                    value={currentTab.customerPhone || undefined}\r\n                                    onSearch={onSearchCustomer}\r\n                                    onChange={handleCustomerChange}\r\n                                    optionLabelProp=\"value\"\r\n                                    notFoundContent={loading ? <Spin size=\"small\" /> : \"Không tìm thấy\"}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-row\">\r\n                                <label className=\"form-label\">Tên khách hàng: </label>\r\n                                <Input\r\n                                    style={inputStyle}\r\n                                    value={currentTab.customerName}\r\n                                    onChange={handleCustomerNameChange}\r\n                                    readOnly\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <Modal\r\n                            title=\"Chỉnh sửa thông tin khách hàng\"\r\n                            visible={isModalVisible}\r\n                            onOk={handleOk}\r\n                            onCancel={handleCancel}\r\n                            okText=\"Lưu\"\r\n                            cancelText=\"Hủy\"\r\n                        >\r\n                            <Form\r\n                                form={form}\r\n                                layout=\"vertical\"\r\n                                initialValues={{\r\n                                    name: currentTab.customerName || '',\r\n                                    phoneNumber: currentTab.customerPhone || '',\r\n                                    email: '',\r\n                                    address: '',\r\n                                }}\r\n                            >\r\n                                <Form.Item\r\n                                    name=\"name\"\r\n                                    label=\"Tên khách hàng\"\r\n                                    rules={[{ required: true, message: 'Vui lòng nhập tên!' }]}\r\n                                >\r\n                                    <Input placeholder=\"Nhập tên khách hàng\" />\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    name=\"phoneNumber\"\r\n                                    label=\"Số điện thoại cũ\"\r\n                                    rules={[\r\n\r\n                                        { required: true, message: 'Vui lòng nhập số điện thoại!' },\r\n                                        { pattern: /^0\\d{9}$/, message: 'Số điện thoại phải là 10 chữ số và bắt đầu từ 0!' },\r\n                                    ]}\r\n                                >\r\n                                    <Input type='number' placeholder=\"Nhập số điện thoại\" readOnly />\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    name=\"phoneNumberNew\"\r\n                                    label=\"Số điện thoại mới\"\r\n                                    rules={[\r\n                                        { required: true, message: 'Vui lòng nhập số điện thoại!' },\r\n                                        { pattern: /^0\\d{9}$/, message: 'Số điện thoại phải là 10 chữ số và bắt đầu từ 0!' },\r\n                                    ]}\r\n                                >\r\n                                    <Input placeholder=\"Nhập số điện thoại\" />\r\n                                </Form.Item>\r\n\r\n                            </Form>\r\n                        </Modal>\r\n\r\n                        <div className=\"payment-details\">\r\n                            <div className=\"payment-row\">\r\n                                <label className=\"payment-label total-product-label\"><h5>Tổng tiền sản phẩm:</h5></label>\r\n                                <div className=\"payment-value total-product-value\">{totalAmount.toLocaleString()}</div>\r\n                            </div>\r\n                            <div className=\"payment-row\">\r\n                                <label className=\"payment-label final-amount-label\"><h5>Tiền khách phải trả:</h5></label>\r\n                                <div className=\"payment-value final-amount-value\">{calculateFinalAmount().toLocaleString()}</div>\r\n                            </div>\r\n                            <div className=\"payment-row\">\r\n                                <label className=\"payment-label customer-payment-label\"><h6>Tiền khách đưa:</h6></label>\r\n                                <InputNumber\r\n                                    placeholder=\"Nhập số tiền\"\r\n                                    min={0}\r\n                                    value={customerPayment}\r\n                                    onChange={handleCustomerPaymentChange}\r\n                                    // onChange={(value) => setCustomerPayment(value || 0)}\r\n                                    className=\"customer-payment-input\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"payment-row\">\r\n                                <label className=\"payment-label change-label\"><h6>Tiền thừa trả khách:</h6></label>\r\n                                <div className=\"payment-value change-value\">{calculateChange().toLocaleString()}</div>\r\n                            </div>\r\n                            <div className=\"customer-row\"><InvoiceCustomerCreate onCustomerCreated={handleCustomerCreated} /></div>\r\n                            <div className=\"description_content\">\r\n                                <label><h6><i>Ghi chú :</i></h6></label>\r\n                                <TextArea\r\n                                    rows={10}\r\n                                    value={currentTab.description || ''}\r\n                                    onChange={handleDescriptionChange}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Content>\r\n            </div>\r\n\r\n            <div className=\"invoice-footer\">\r\n                <div className=\"total-section\">\r\n                    <div className=\"detail-line\">\r\n                        <span className=\"detail-label\">Tiền hàng sản phẩm :</span>\r\n                        <span>{totalwithoutdiscount.toLocaleString()} VND</span>\r\n                    </div>\r\n                    <div className=\"detail-line\">\r\n                        <span className=\"detail-label\">Tiền ship sản phẩm :</span>\r\n                        <span>{moneyShipping.toLocaleString()} VND</span>\r\n                    </div>\r\n                    <div className=\"detail-line\">\r\n                        <span className=\"detail-label\">Voucher  của shop  : </span>\r\n                        <span> -{calculateTotalDiscount(items.find(item => item.key === activeKey)?.children.props.dataSource || []).toLocaleString()} VND</span>\r\n                    </div>\r\n                    <div className=\"total-line\">\r\n                        <h2 className=\"total-label\">Tổng tiền:</h2>\r\n                        <span className=\"total-amount\">{calculateFinalAmount().toLocaleString()} VND</span>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        size=\"large\"\r\n                        className=\"debt-button\"\r\n\r\n                    >\r\n                        Ghi Nợ\r\n                    </Button>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        size=\"large\"\r\n                        className=\"payment-button\"\r\n                        onClick={handlePayment}\r\n                    >\r\n                        Thanh Toán\r\n                    </Button>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default InvoiceDetail;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/components/invoiceDetail.js b/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/components/invoiceDetail.js
--- a/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/components/invoiceDetail.js	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/components/invoiceDetail.js	(date 1742498244285)
@@ -6,6 +6,7 @@
 import API from '../../../Utils/API/API';
 import { getToken } from '../../../Utils/UserInfoUtils';
 import { Content } from 'antd/es/layout/layout';
+import { success, error } from '../../../Utils/AntdNotification';
 import TextArea from 'antd/es/input/TextArea';
 
 const InvoiceDetail = () => {
@@ -21,10 +22,8 @@
     const [discount, setDiscount] = useState(0);
     const [customerPayment, setCustomerPayment] = useState(0);
     const [totalwithoutdiscount, setTotalWithoutDiscount] = useState(0);
-    const [moneyShipping, setMoneyShipping] = useState(0);
     const [packageOptions, setPackageOptions] = useState([]);
-
-
+    const [isExceedingQuantity, setIsExceedingQuantity] = useState(false);
 
     // của thông tin khách hàng 
     const [options2, setOptions2] = useState([]);
@@ -36,8 +35,7 @@
     //của chỉnh sửa khách hàng 
     const [isModalVisible, setIsModalVisible] = useState(false);
     const [form] = Form.useForm();
-    const [api, contextHolder] = notification.useNotification();
-
+    const [messageApi, contextHolder] = message.useMessage();
     const token = getToken();
 
     const showDrawer = () => {
@@ -47,7 +45,7 @@
         setOpen(false);
     };
     const openNotificationWithIcon = (type, title, description) => {
-        api[type]({
+        messageApi[type]({
             message: title,
             description: description,
             placement: 'bottomRight',
@@ -55,10 +53,10 @@
     };
     const showModal = () => {
         setIsModalVisible(true);
-        // form.setFieldsValue({ phoneNumber: currentTab.customerPhone, phoneNumberNew: currentTab.customerPhone });
     };
     const handleOk = () => {
         form.validateFields().then((values) => {
+
             axios.put(
                 API.EMPLOYEE.INVOICE_UPDATE_USER(values.phoneNumber),
                 {
@@ -86,13 +84,11 @@
                 fetchData2();
                 setIsModalVisible(false);
                 form.resetFields();
-                openNotificationWithIcon('success', 'Thành công', 'Cập Nhật khách hàng thành công!');
-            }).catch(() => {
-                openNotificationWithIcon('error', 'Thất Bại', 'Số điện thoại không tìm được hoặc đang bị trùng ');
+                success("Cập nhật khách hàng thành công", messageApi);
+            }).catch((err) => {
+                error(err.response.data.message || "Tạo mới tài khoản thất bại.", messageApi);
             });
-        }).catch(() => {
-            openNotificationWithIcon('error', 'Thất Bại', 'Validation Form diii onichan');
-        });
+        })
     };
     const handleCancel = () => {
         setIsModalVisible(false);
@@ -114,20 +110,34 @@
         return dataSource.reduce((sum, item) => {
             return sum + (item.quantity * item.price);
         }, 0);
+    };
+    const calculateTotalSellPrice = (dataSource) => {
+        if (!dataSource || !Array.isArray(dataSource)) return 0;
+        return dataSource.reduce((sum, item) => {
+            return sum + (item.quantity * (item.pricePay || item.price));
+        }, 0);
     };
     const calculateTotalDiscount = (dataSource) => {
         return dataSource.reduce((sum, item) => sum + (item.discount * item.quantity || 0), 0);
     };
 
-    const calculateTotalAmount = (dataSource) => {
+    const calculateProductTotal = (dataSource) => {
+        if (!dataSource || !Array.isArray(dataSource)) return 0;
         return dataSource.reduce((sum, item) => {
-            const itemTotal =
-                item.quantity * item.price - (item.discount * item.quantity || 0) + (item.moneyShip * item.quantity || 0);
+            const itemTotal = (item.quantity || 0) * (item.pricePay || item.price || 0) - ((item.discount || 0) * (item.quantity || 0));
             return sum + itemTotal;
         }, 0);
     };
+
+    const calculateTotalAmount = (dataSource, moneyShip) => {
+        const productTotal = calculateProductTotal(dataSource);
+        return productTotal + (dataSource && dataSource.length > 0 ? (moneyShip || 0) : 0);
+    };
     const calculateFinalAmount = () => {
-        return totalAmount - discount;
+        const activeTab = items.find(item => item.key === activeKey);
+        if (!activeTab) return 0;
+        const baseAmount = calculateTotalAmount(activeTab.children.props.dataSource, activeTab.moneyShip || 0);
+        return baseAmount - (discount || 0);
     };
 
     const calculateChange = () => {
@@ -148,22 +158,6 @@
             title: 'Mã Sản Phẩm',
             dataIndex: 'productID',
             key: 'productID',
-
-        },
-        {
-            title: 'Đóng Gói',
-            dataIndex: 'packageId',
-            key: 'packageId',
-            render: (text, record) => (
-                <Select
-                    style={{ width: 120 }}
-                    value={record.packageId}
-                    onChange={(value) => handlePackageChange(value, record.key)}
-                    options={packageOptions}
-                    placeholder="Chọn đơn vị"
-                    loading={loading}
-                />
-            ),
         },
         {
             title: 'Tên sản phẩm',
@@ -179,6 +173,8 @@
                     min={0}
                     value={record.discount}
                     onChange={(value) => handleInputChange2(value, record.key, 'discount')}
+                    formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
+                    parser={value => value.replace(/\$\s?|(,*)/g, '')}
                 />
             ),
         },
@@ -196,24 +192,41 @@
             ),
         },
         {
-            title: 'Đơn giá/Kg',
+            title: 'Đóng Gói',
+            dataIndex: 'packageId',
+            key: 'packageId',
+            render: (text, record) => (
+                <Select
+                    style={{ width: 120 }}
+                    value={record.packageId}
+                    onChange={(value) => handlePackageChange(value, record.key)}
+                    options={packageOptions}
+                    placeholder="Chọn đơn vị"
+                    loading={loading}
+                />
+            ),
+        },
+        {
+            title: 'Giá Gạo/Kg',
             dataIndex: 'price',
             key: 'price',
+            render: (text) => (text || 0).toLocaleString(),
         },
         {
-            title: 'Ship/Kg',
-            dataIndex: 'moneyShip',
-            key: 'moneyShip',
+            title: 'Giá bán/kg',
+            dataIndex: 'pricePay',
+            key: 'pricePay',
             render: (text, record) => (
                 <InputNumber
-                    defaultValue={0}
+                    defaultValue={record.price}
                     min={0}
-                    value={record.moneyShip}
-                    onChange={(value) => handleInputChange2(value, record.key, 'moneyShip')} // Sử dụng handleInputChange2
+                    value={record.pricePay}
+                    onChange={(value) => handleInputChange(value, record.key, 'pricePay')}
+                    formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
+                    parser={value => value.replace(/\$\s?|(,*)/g, '')}
                 />
             ),
         },
-
         {
             title: 'Thành tiền(VND)',
             dataIndex: 'total',
@@ -222,23 +235,38 @@
         },
     ];
     const handleInputChange = (value, key, field) => {
-        const finalValue = value === null || value < 1 ? 1 : value;
+        let finalValue;
+        if (field === 'quantity') {
+            finalValue = value === null || value < 1 ? 1 : value;
+        } else {
+            finalValue = value === null || value < 0 ? 0 : value;
+        }
         setItems(prevItems =>
             prevItems.map(item => {
                 if (item.key === activeKey) {
-                    const updatedDataSource = item.children.props.dataSource.map(row =>
-                        row.key === key
-                            ? {
+                    const updatedDataSource = item.children.props.dataSource.map(row => {
+                        if (row.key === key) {
+                            const productOption = options.find(opt => opt.productID === row.productID);
+                            const maxQuantity = productOption ? productOption.quantity : Infinity;
+                            const cappedValue = field === 'quantity' ? Math.min(finalValue, maxQuantity) : finalValue;
+
+                            return {
                                 ...row,
-                                [field]: finalValue,
+                                [field]: cappedValue,
                                 total:
-                                    finalValue * row.price -
-                                    (row.discount * finalValue || 0) +
-                                    (row.moneyShip * finalValue || 0),
-                            }
-                            : row
-                    );
-                    setTotalAmount(calculateTotalAmount(updatedDataSource));
+                                    field === 'quantity'
+                                        ? cappedValue * (row.pricePay || 0) - (row.discount * cappedValue || 0)
+                                        : row.quantity * (field === 'pricePay' ? cappedValue : row.pricePay || 0) - (row.discount * row.quantity || 0),
+                            };
+                        }
+                        return row;
+                    });
+                    const exceeds = updatedDataSource.some(row => {
+                        const productOption = options.find(opt => opt.productID === row.productID);
+                        return productOption && row.quantity > productOption.quantity;
+                    });
+                    setIsExceedingQuantity(exceeds);
+                    setTotalAmount(calculateProductTotal(updatedDataSource));
                     setTotalWithoutDiscount(calculateTotalWithoutDiscount(updatedDataSource));
 
                     return {
@@ -263,19 +291,20 @@
         setItems(prevItems =>
             prevItems.map(item => {
                 if (item.key === activeKey) {
-                    const updatedDataSource = item.children.props.dataSource.map(row =>
-                        row.key === key
-                            ? {
+                    const updatedDataSource = item.children.props.dataSource.map(row => {
+                        if (row.key === key) {
+                            const maxDiscount = row.pricePay || row.price || 0;
+                            const finalValue = value === null || value < 0 ? 0 : Math.min(value, maxDiscount);
+
+                            return {
                                 ...row,
                                 [field]: finalValue,
-                                total:
-                                    row.quantity * row.price -
-                                    (field === 'discount' ? finalValue * row.quantity : row.discount * row.quantity || 0) +
-                                    (field === 'moneyShip' ? finalValue * row.quantity : row.moneyShip * row.quantity || 0),
-                            }
-                            : row
-                    );
-                    setTotalAmount(calculateTotalAmount(updatedDataSource));
+                                total: row.quantity * (row.pricePay || 0) - (finalValue * row.quantity || 0),
+                            };
+                        }
+                        return row;
+                    });
+                    setTotalAmount(calculateProductTotal(updatedDataSource));
                     setTotalWithoutDiscount(calculateTotalWithoutDiscount(updatedDataSource));
 
                     return {
@@ -326,7 +355,7 @@
             return;
         }
         if (!activeKey || items.length === 0) {
-            setErrorMessage("Chưa có tab nào để thêm sản phẩm nha");
+            setErrorMessage("Chưa có tab nào để thêm sản phẩm");
             return;
         }
         if (!selectedProduct.productID || !selectedProduct.label || !selectedProduct.price) {
@@ -347,10 +376,7 @@
                             ? {
                                 ...product,
                                 quantity: product.quantity + 1,
-                                total:
-                                    (product.quantity + 1) * product.price -
-                                    (product.discount * (product.quantity + 1) || 0) +
-                                    (product.moneyShip * (product.quantity + 1) || 0),
+                                total: (product.quantity + 1) * (product.pricePay || product.price) - (product.discount * (product.quantity + 1) || 0),
                             }
                             : product
                     );
@@ -362,16 +388,16 @@
                             name: selectedProduct.label,
                             quantity: 1,
                             price: selectedProduct.price,
+                            pricePay: selectedProduct.price,
                             image: selectedProduct.image,
                             productID: selectedProduct.productID,
                             discount: 0,
-                            moneyShip: 0,
                             total: 1 * selectedProduct.price,
-                            packageId: packageOptions.length > 0 ? packageOptions[0].value : undefined
+                            packageId: packageOptions.length > 0 ? packageOptions[0].value : undefined,
                         },
                     ];
                 }
-                setTotalAmount(calculateTotalAmount(updatedDataSource));
+                setTotalAmount(calculateProductTotal(updatedDataSource));
                 setTotalWithoutDiscount(calculateTotalWithoutDiscount(updatedDataSource));
 
                 return {
@@ -397,7 +423,7 @@
             prevItems.map(item => {
                 if (item.key === activeKey) {
                     const updatedDataSource = item.children.props.dataSource.filter(row => row.key !== key);
-                    setTotalAmount(calculateTotalAmount(updatedDataSource));
+                    setTotalAmount(calculateProductTotal(updatedDataSource));
                     setTotalWithoutDiscount(calculateTotalWithoutDiscount(updatedDataSource));
 
                     return {
@@ -431,6 +457,7 @@
                 customerName: '',
                 description: '',
                 customerPayment: 0,
+                moneyShip: 0,
                 children: (
                     <Table
                         columns={columns}
@@ -459,7 +486,7 @@
                 newItems[targetIndex === newItems.length ? targetIndex - 1 : targetIndex].key;
             setActiveKey(newActiveKey);
             const activeTabDataSource = newItems.find(item => item.key === newActiveKey)?.children.props.dataSource || [];
-            setTotalAmount(calculateTotalAmount(activeTabDataSource));
+            setTotalAmount(calculateProductTotal(activeTabDataSource));
             setTotalWithoutDiscount(calculateTotalWithoutDiscount(activeTabDataSource));
 
         } else if (newItems.length === 0) {
@@ -474,9 +501,13 @@
         setActiveKey(key);
         const activeTab = items.find(item => item.key === key);
         if (activeTab) {
-            setTotalAmount(calculateTotalAmount(activeTab.children.props.dataSource));
+            setTotalAmount(calculateProductTotal(activeTab.children.props.dataSource));
             setTotalWithoutDiscount(calculateTotalWithoutDiscount(activeTab.children.props.dataSource));
             setCustomerPayment(activeTab.customerPayment || 0);
+        } else {
+            setTotalAmount(0);
+            setTotalWithoutDiscount(0);
+            setCustomerPayment(0);
         }
     };
     const handleDescriptionChange = (e) => {
@@ -513,7 +544,6 @@
             )
         );
     };
-    // dme cai chuyen tab nay kho vai l ay anh duc a
     const currentTab = items.find(item => item.key === activeKey) || { customerPhone: '', customerName: '' };
     const onEdit = (targetKey, action) => {
         if (action === 'add') {
@@ -543,6 +573,7 @@
                     price: item.price,
                     productID: item.productID,
                     image: item.productImage,
+                    quantity: item.quantity,
                 }));
                 setOptions(formattedOptions);
             })
@@ -605,13 +636,6 @@
         fetchData();
         fetchData2();
         fetchPackageData();
-        if (items.length > 0) {
-            const activeTab = items.find(item => item.key === activeKey);
-            if (activeTab) {
-                setTotalAmount(calculateTotalAmount(activeTab.children.props.dataSource));
-                setTotalWithoutDiscount(calculateTotalWithoutDiscount(activeTab.children.props.dataSource));
-            }
-        }
     }, []);
     useEffect(() => {
         if (currentTab.customerPhone) {
@@ -625,15 +649,11 @@
     useEffect(() => {
         const activeTab = items.find(item => item.key === activeKey);
         if (activeTab) {
-            const totalShipping = activeTab.children.props.dataSource.reduce(
-                (sum, item) => sum + (item.moneyShip * item.quantity || 0),
-                0
-            );
-            setMoneyShipping(totalShipping);
+            setTotalAmount(calculateProductTotal(activeTab.children.props.dataSource));
+            setTotalWithoutDiscount(calculateTotalWithoutDiscount(activeTab.children.props.dataSource));
         }
     }, [items, activeKey]);
 
-
     const onSearch2 = (value) => {
         fetchData(value);
     };
@@ -641,12 +661,6 @@
         fetchData2(value);
     };
 
-    const labelStyle = {
-        width: 200,
-        textAlign: 'left',
-        paddingRight: 12,
-    };
-
     const inputStyle = {
         flex: 1,
         border: 'none',
@@ -654,67 +668,68 @@
         padding: '4px 0'
     };
     const handlePayment = () => {
+        const activeTab = items.find(item => item.key === activeKey);
         const invoiceData = {
             invoice: {
-                customerPhone: currentTab.customerPhone,
-                customerName: currentTab.customerName,
+                customerPhone: activeTab.customerPhone,
+                customerName: activeTab.customerName,
                 totalAmount: calculateFinalAmount(),
-                totalShipping: moneyShipping,
-                description: currentTab.description || '',
+                totalShipping: activeTab.moneyShip,
+                description: activeTab.description || '',
+                type: false,
             },
-            invoiceDetails: items
-                .find(item => item.key === activeKey)
-                ?.children.props.dataSource.map(product => ({
-                    productID: product.productID,
-                    packageId: product.packageId,
-                    quantity: product.quantity,
-                    price: product.price,
-                    discount: product.discount,
-                })) || [],
+            invoiceDetails: activeTab.children.props.dataSource.map(product => ({
+                productID: product.productID,
+                packageId: product.packageId,
+                quantity: product.quantity,
+                price: product.pricePay || product.price,
+                discount: product.discount,
+            })),
         };
 
         if (!invoiceData.invoice.customerPhone || invoiceData.invoiceDetails.length === 0) {
-            openNotificationWithIcon('error', 'Lỗi', 'Vui lòng điền đầy đủ thông tin khách hàng và sản phẩm!');
+            messageApi.open({
+                type: 'warning',
+                content: 'Vui lòng điền đầy đủ và đúng thông tin cần thiết trước khi gửi!',
+            });
             return;
         }
-        if (!/^[0-9]{10}$/.test(currentTab.customerPhone)) {
-            openNotificationWithIcon('error', 'Lỗi', 'Số điện thoại phải là 10 chữ số!');
+        if (!/^[0-9]{10}$/.test(activeTab.customerPhone)) {
+            messageApi.open({
+                type: 'warning',
+                content: 'Vui lòng xem lại số điện thoại trước khi gửi!',
+            });
             return;
         }
 
-        axios.post(
-            API.EMPLOYEE.INVOICE_CREATE,
-            invoiceData,
-            {
-                headers: {
-                    Authorization: `Bearer ${token}`,
-                },
-            }
-        )
+        axios.post(API.EMPLOYEE.INVOICE_CREATE, invoiceData, {
+            headers: { Authorization: `Bearer ${token}` },
+        })
             .then(response => {
-                openNotificationWithIcon('success', 'Thành công', 'Hóa đơn đã được tạo thành công!');
                 remove(activeKey);
                 if (items.length > 1) {
                     const remainingItems = items.filter(item => item.key !== activeKey);
                     const newActiveKey = remainingItems[0].key;
                     setActiveKey(newActiveKey);
                     const activeTabDataSource = remainingItems.find(item => item.key === newActiveKey)?.children.props.dataSource || [];
-                    setTotalAmount(calculateTotalAmount(activeTabDataSource));
+                    // setTotalAmount(calculateTotalAmount(activeTabDataSource, remainingItems.find(item => item.key === newActiveKey)?.moneyShip || 0));
+                    setTotalAmount(calculateProductTotal(activeTabDataSource));
                     setTotalWithoutDiscount(calculateTotalWithoutDiscount(activeTabDataSource));
                     setCustomerPayment(remainingItems.find(item => item.key === newActiveKey)?.customerPayment || 0);
                 } else {
                     setActiveKey(null);
                     setTotalAmount(0);
-                    setMoneyShipping(0);
                     setCustomerPayment(0);
                     setDiscount(0);
-                    setCustomerPayment(0);
                 }
             })
-            .catch(error => {
-                openNotificationWithIcon('error', 'Thất bại', 'Có lỗi xảy ra khi tạo hóa đơn!');
+            .catch(err => {
+                error(err.response.data.message || "Lỗi khi tạo hóa đơn", messageApi);
+                messageApi.open({
+                    type: 'error',
+                    content: errorMessage,
+                });
             });
-        console.log('Dữ liệu sẽ gửi về backend:', JSON.stringify(invoiceData, null, 2));
     };
     const handleCustomerPaymentChange = (value) => {
         const finalValue = value || 0;
@@ -750,6 +765,14 @@
                                     onSearch={onSearch2}
                                     onChange={(value, option) => setSelectedProduct(option)}
                                     notFoundContent={loading ? <Spin size="small" /> : "Không tìm thấy"}
+                                    optionRender={(option) => (
+                                        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
+                                            <span>{option.data.value}</span>
+                                            <span style={{ opacity: 0.5, color: '#888' }}>
+                                                (Số lượng còn: {option.data.quantity})
+                                            </span>
+                                        </div>
+                                    )}
                                 />
                                 <Button type="primary" onClick={addProductToTab}>
                                     Thêm
@@ -787,11 +810,6 @@
                         <div className="customer-form">
                             <div className="form-row">
                                 <label className="form-label">Phone Number: </label>
-                                {currentTab.customerPhone && (
-                                    <Button type="link" onClick={showModal} >
-                                        <SettingOutlined />
-                                    </Button>
-                                )}
                                 <Select
                                     showSearch
                                     placeholder="Chọn số điện thoại"
@@ -804,15 +822,21 @@
                                     optionLabelProp="value"
                                     notFoundContent={loading ? <Spin size="small" /> : "Không tìm thấy"}
                                 />
+                                {currentTab.customerPhone && (
+                                    <Button type="link" onClick={showModal} >
+                                        <SettingOutlined />
+                                    </Button>
+                                )}
                             </div>
                             <div className="form-row">
-                                <label className="form-label">Tên khách hàng: </label>
+                                <label className="form-label2">Tên khách hàng:</label>
                                 <Input
                                     style={inputStyle}
                                     value={currentTab.customerName}
                                     onChange={handleCustomerNameChange}
                                     readOnly
                                 />
+                                <span className="new-customer"><InvoiceCustomerCreate onCustomerCreated={handleCustomerCreated} /></span>
                             </div>
                         </div>
 
@@ -872,7 +896,30 @@
                                 <div className="payment-value total-product-value">{totalAmount.toLocaleString()}</div>
                             </div>
                             <div className="payment-row">
-                                <label className="payment-label final-amount-label"><h5>Tiền khách phải trả:</h5></label>
+                                <label className="payment-label customer-payment-label"><h6>Phí vận chuyển:</h6></label>
+                                <InputNumber
+                                    className="customer-payment-input"
+                                    min={0}
+                                    value={items.find(item => item.key === activeKey)?.moneyShip || 0}
+                                    onChange={(value) => {
+                                        const finalValue = value || 0;
+                                        setItems(prevItems =>
+                                            prevItems.map(item =>
+                                                item.key === activeKey
+                                                    ? {
+                                                        ...item,
+                                                        moneyShip: finalValue,
+                                                    }
+                                                    : item
+                                            )
+                                        );
+                                    }}
+                                    formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
+                                    parser={value => value.replace(/\$\s?|(,*)/g, '')}
+                                />
+                            </div>
+                            <div className="payment-row">
+                                <label className="payment-label final-amount-label"><h6>Tiền khách phải trả:</h6></label>
                                 <div className="payment-value final-amount-value">{calculateFinalAmount().toLocaleString()}</div>
                             </div>
                             <div className="payment-row">
@@ -882,19 +929,19 @@
                                     min={0}
                                     value={customerPayment}
                                     onChange={handleCustomerPaymentChange}
-                                    // onChange={(value) => setCustomerPayment(value || 0)}
                                     className="customer-payment-input"
+                                    formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
+                                    parser={value => value.replace(/\$\s?|(,*)/g, '')}
                                 />
                             </div>
                             <div className="payment-row">
                                 <label className="payment-label change-label"><h6>Tiền thừa trả khách:</h6></label>
                                 <div className="payment-value change-value">{calculateChange().toLocaleString()}</div>
                             </div>
-                            <div className="customer-row"><InvoiceCustomerCreate onCustomerCreated={handleCustomerCreated} /></div>
                             <div className="description_content">
                                 <label><h6><i>Ghi chú :</i></h6></label>
                                 <TextArea
-                                    rows={10}
+                                    rows={5}
                                     value={currentTab.description || ''}
                                     onChange={handleDescriptionChange}
                                 />
@@ -907,16 +954,24 @@
             <div className="invoice-footer">
                 <div className="total-section">
                     <div className="detail-line">
-                        <span className="detail-label">Tiền hàng sản phẩm :</span>
+                        <span className="detail-label">Tiền hàng sản phẩm gốc :</span>
                         <span>{totalwithoutdiscount.toLocaleString()} VND</span>
                     </div>
                     <div className="detail-line">
-                        <span className="detail-label">Tiền ship sản phẩm :</span>
-                        <span>{moneyShipping.toLocaleString()} VND</span>
+                        <span className="detail-label">Tiền hàng sản phẩm bán :</span>
+                        <span>{calculateTotalSellPrice(items.find(item => item.key === activeKey)?.children.props.dataSource || []).toLocaleString()} VND</span>
                     </div>
                     <div className="detail-line">
-                        <span className="detail-label">Voucher  của shop  : </span>
-                        <span> -{calculateTotalDiscount(items.find(item => item.key === activeKey)?.children.props.dataSource || []).toLocaleString()} VND</span>
+                        <span className="detail-label">Tổng tiền giảm giá : </span>
+                        <span> - {calculateTotalDiscount(items.find(item => item.key === activeKey)?.children.props.dataSource || []).toLocaleString()} VND</span>
+                    </div>
+                    <div className="detail-line">
+                        <span className="detail-label">Tiền hàng sản phẩm :</span>
+                        <span>{totalAmount.toLocaleString()} VND</span>
+                    </div>
+                    <div className="detail-line">
+                        <span className="detail-label">Tiền ship sản phẩm :</span>
+                        <span>{(items.find(item => item.key === activeKey)?.moneyShip || 0).toLocaleString()} VND</span>
                     </div>
                     <div className="total-line">
                         <h2 className="total-label">Tổng tiền:</h2>
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jarRepositories.xml b/.idea/jarRepositories.xml
new file mode 100644
--- /dev/null	(date 1742498244273)
+++ b/.idea/jarRepositories.xml	(date 1742498244273)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Central Repository" />
+      <option name="url" value="https://repo.maven.apache.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: Front-End/swp_interface/.vscode/settings.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/.vscode/settings.json b/Front-End/swp_interface/.vscode/settings.json
new file mode 100644
--- /dev/null	(date 1742498244276)
+++ b/Front-End/swp_interface/.vscode/settings.json	(date 1742498244276)
@@ -0,0 +1,5 @@
+{
+    "cSpell.words": [
+        "VNPAY"
+    ]
+}
\ No newline at end of file
Index: swp391/src/main/java/org/group5/swp391/config/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.config;\r\n\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\r\nimport org.springframework.security.oauth2.jose.jws.MacAlgorithm;\r\nimport org.springframework.security.oauth2.jwt.JwtDecoder;\r\nimport org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.web.cors.CorsConfiguration;\r\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\r\n\r\nimport javax.crypto.spec.SecretKeySpec;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\n@EnableMethodSecurity(prePostEnabled = true)\r\npublic class SecurityConfig {\r\n    @Value(\"${app.jwtSecret}\")\r\n    private String jwtSecret;\r\n\r\n    private final String[] PUBLIC_ENDPOINTS = {\r\n            \"/auth/**\", \"/store/**\", \"/image\", \"/ws/**\", \"/service-web\"\r\n    };\r\n\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n        http.authorizeHttpRequests(request ->\r\n                request.requestMatchers(PUBLIC_ENDPOINTS).permitAll()\r\n                        .requestMatchers(\"/admin/**\").hasAuthority(\"ADMIN\")\r\n                        .requestMatchers(\"/store-owner/**\", \"/debt/**\").hasAuthority(\"STORE_OWNER\")\r\n                        .requestMatchers(\"/employee/**\").hasAuthority(\"EMPLOYEE\")\r\n                        .requestMatchers(\"/account/**\").hasAnyAuthority(\"ADMIN\", \"STORE_OWNER\", \"EMPLOYEE\")\r\n                        .requestMatchers(\"/vnpay/**\").hasAuthority(\"STORE_OWNER\")\r\n                        .anyRequest().authenticated()\r\n        );\r\n\r\n        http.csrf(AbstractHttpConfigurer::disable);\r\n\r\n        http.cors(corsConfigurer -> corsConfigurer.configurationSource(corsConfigurationSource()));\r\n\r\n        http.oauth2ResourceServer(oath2 ->\r\n                oath2.jwt(jwtConfigurer -> jwtConfigurer.decoder(jwtDecoder())\r\n                        .jwtAuthenticationConverter(jwtAuthenticationConverter()))\r\n        );\r\n        return http.build();\r\n    }\r\n\r\n    private UrlBasedCorsConfigurationSource corsConfigurationSource() {\r\n        CorsConfiguration config = new CorsConfiguration();\r\n        config.setAllowCredentials(true);\r\n        config.addAllowedOrigin(\"http://localhost:3000\");\r\n        config.addAllowedHeader(\"*\");\r\n        config.addAllowedMethod(\"*\");\r\n\r\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\r\n        source.registerCorsConfiguration(\"/**\", config);\r\n        return source;\r\n    }\r\n\r\n    @Bean\r\n    JwtDecoder jwtDecoder() {\r\n        SecretKeySpec secretKeySpec = new SecretKeySpec(jwtSecret.getBytes(), \"HS512\");\r\n        return NimbusJwtDecoder\r\n                .withSecretKey(secretKeySpec)\r\n                .macAlgorithm(MacAlgorithm.HS512)\r\n                .build();\r\n    }\r\n\r\n//    @Bean\r\n//    JwtAuthenticationConverter jwtAuthenticationConverter() {\r\n//        JwtGrantedAuthoritiesConverter converter = new JwtGrantedAuthoritiesConverter();\r\n//        converter.setAuthorityPrefix(\"ROLE_\");\r\n//        JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();\r\n//        jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(converter);\r\n//        return jwtAuthenticationConverter;\r\n//    }\r\n\r\n    @Bean\r\n    public CustomJwtAuthenticationConverter jwtAuthenticationConverter() {\r\n        return new CustomJwtAuthenticationConverter();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/config/SecurityConfig.java b/swp391/src/main/java/org/group5/swp391/config/SecurityConfig.java
--- a/swp391/src/main/java/org/group5/swp391/config/SecurityConfig.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/config/SecurityConfig.java	(date 1742498244293)
@@ -32,7 +32,7 @@
         http.authorizeHttpRequests(request ->
                 request.requestMatchers(PUBLIC_ENDPOINTS).permitAll()
                         .requestMatchers("/admin/**").hasAuthority("ADMIN")
-                        .requestMatchers("/store-owner/**", "/debt/**").hasAuthority("STORE_OWNER")
+                        .requestMatchers("/store-owner/**", "/debt/**", "/manage-store/**").hasAuthority("STORE_OWNER")
                         .requestMatchers("/employee/**").hasAuthority("EMPLOYEE")
                         .requestMatchers("/account/**").hasAnyAuthority("ADMIN", "STORE_OWNER", "EMPLOYEE")
                         .requestMatchers("/vnpay/**").hasAuthority("STORE_OWNER")
Index: Front-End/swp_interface/src/Pages/AdminDashboard/DashboardContent.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Card, Row, Col } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport RevenueStatistics from \"./RevenueStatistics\";\r\nimport API from \"../../Utils/API/API.js\";\r\nimport { getToken } from \"../../Utils/UserInfoUtils\";\r\n\r\nconst DashboardContent = () => {\r\n  const [totalRevenue, setTotalRevenue] = useState(0);\r\n  const [totalAccounts, setTotalAccounts] = useState(0);\r\n  const [totalStores, setTotalStores] = useState(0);\r\n  const [totalSubscriptions, setTotalSubscriptions] = useState(0);\r\n  const navigate = useNavigate();\r\n  const token = getToken();\r\n\r\n  useEffect(() => {\r\n    const fetchTotalAccounts = async () => {\r\n      try {\r\n        const response = await axios.get(API.ADMIN.GET_ALL_ACCOUNT, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        if (response.data.code === 200) {\r\n          setTotalAccounts(response.data.data.length);\r\n        }\r\n      } catch (err) {\r\n        console.error(\"API Error:\", err);\r\n      }\r\n    };\r\n    fetchTotalAccounts();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchTotalStores = async () => {\r\n      try {\r\n        const response = await axios.get(API.ADMIN.VIEW_ALL_STORE, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        if (response.data.code === 200) {\r\n          setTotalStores(response.data.data.length);\r\n        }\r\n      } catch (err) {\r\n        console.error(\"API Error:\", err);\r\n      }\r\n    };\r\n    fetchTotalStores();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchTotalSubscriptions = async () => {\r\n      try {\r\n        const response = await axios.get(API.ADMIN.VIEW_ALL_SUBSCRIPTION_PLAN, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        if (response.data.code === 200) {\r\n          setTotalSubscriptions(response.data.data.length);\r\n        }\r\n      } catch (err) {\r\n        console.error(\"API Error:\", err);\r\n      }\r\n    };\r\n    fetchTotalSubscriptions();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h2>Chào mừng bạn đến với bảng điều khiển của quản trị viên!</h2>\r\n      <br />\r\n      <Row className=\"mt-4\">\r\n        <Col md={3}>\r\n          <Card className=\"text-center bg-success text-white\">\r\n            <Card.Body>\r\n              <Card.Title>Tổng doanh thu</Card.Title>\r\n              <Card.Text>${totalRevenue.toLocaleString()}</Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n\r\n        <Col md={3}>\r\n          <Card\r\n            className=\"text-center bg-primary text-white\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() => navigate(\"/admin/account_owner\")}\r\n          >\r\n            <Card.Body>\r\n              <Card.Title>Tổng chủ cửa hàng</Card.Title>\r\n              <Card.Text>{totalAccounts}</Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n\r\n        <Col md={3}>\r\n          <Card\r\n            className=\"text-center bg-warning text-white\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() => navigate(\"/admin/view_stores\")}\r\n          >\r\n            <Card.Body>\r\n            <Card.Title>Tổng cửa hàng</Card.Title>\r\n              <Card.Text>{totalStores}</Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n\r\n        <Col md={3}>\r\n          <Card\r\n            className=\"text-center bg-info text-white\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() => navigate(\"/admin/subscription_plans\")}\r\n          >\r\n            <Card.Body>\r\n              <Card.Title>Tổng dịch vụ đăng kí</Card.Title>\r\n              <Card.Text>{totalSubscriptions}</Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n\r\n      <RevenueStatistics setTotalRevenue={setTotalRevenue} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardContent;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Pages/AdminDashboard/DashboardContent.js b/Front-End/swp_interface/src/Pages/AdminDashboard/DashboardContent.js
--- a/Front-End/swp_interface/src/Pages/AdminDashboard/DashboardContent.js	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/Front-End/swp_interface/src/Pages/AdminDashboard/DashboardContent.js	(date 1742498244281)
@@ -77,7 +77,7 @@
           <Card className="text-center bg-success text-white">
             <Card.Body>
               <Card.Title>Tổng doanh thu</Card.Title>
-              <Card.Text>${totalRevenue.toLocaleString()}</Card.Text>
+              <Card.Text>{totalRevenue.toLocaleString()} VND</Card.Text>
             </Card.Body>
           </Card>
         </Col>
Index: DBScript/PayTest.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DBScript/PayTest.txt b/DBScript/PayTest.txt
new file mode 100644
--- /dev/null	(date 1742498244276)
+++ b/DBScript/PayTest.txt	(date 1742498244276)
@@ -0,0 +1,4 @@
+Số thẻ:			9704198526191432198
+Tên chủ thẻ:		NGUYEN VAN A
+Ngày phát hành:		07/15
+Mật khẩu OTP:		123456
\ No newline at end of file
Index: swp391/src/main/java/org/group5/swp391/entity/AppStatistics.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.entity;\r\n\r\nimport jakarta.persistence.*;\r\nimport lombok.*;\r\nimport lombok.experimental.FieldDefaults;\r\n\r\n@Entity\r\n@Getter\r\n@Setter\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@FieldDefaults(level = AccessLevel.PRIVATE)\r\n@Table(name = \"AppStatistics\")\r\npublic class AppStatistics extends AbstractEntity{\r\n    @ManyToOne(cascade = { CascadeType.PERSIST, CascadeType.MERGE })\r\n    @JoinColumn(name = \"StoreID\")\r\n    Store store;\r\n\r\n    @Column(name = \"SubcriptionPlanName\")\r\n    String subcriptionPlanName;\r\n\r\n    @Column(name = \"SubcriptionPlanPrice\")\r\n    Double subcriptionPlanPrice;\r\n\r\n    @Column(name = \"SubcriptionDescription\")\r\n    String subcriptionDescription;\r\n\r\n    @Column(name = \"SubcriptionTimeOfExpiration\")\r\n    Integer subcriptionTimeOfExpiration;\r\n\r\n    @Column(name = \"TransactionNo\")\r\n    String transactionNo;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/entity/AppStatistics.java b/swp391/src/main/java/org/group5/swp391/entity/AppStatistics.java
--- a/swp391/src/main/java/org/group5/swp391/entity/AppStatistics.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/entity/AppStatistics.java	(date 1742498244298)
@@ -11,8 +11,8 @@
 @NoArgsConstructor
 @FieldDefaults(level = AccessLevel.PRIVATE)
 @Table(name = "AppStatistics")
-public class AppStatistics extends AbstractEntity{
-    @ManyToOne(cascade = { CascadeType.PERSIST, CascadeType.MERGE })
+public class AppStatistics extends AbstractEntity {
+    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE})
     @JoinColumn(name = "StoreID")
     Store store;
 
@@ -22,7 +22,7 @@
     @Column(name = "SubcriptionPlanPrice")
     Double subcriptionPlanPrice;
 
-    @Column(name = "SubcriptionDescription")
+    @Column(name = "SubcriptionDescription", columnDefinition = "NVARCHAR(255)")
     String subcriptionDescription;
 
     @Column(name = "SubcriptionTimeOfExpiration")
Index: Front-End/swp_interface/src/Pages/AdminDashboard/RevenueStatistics.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { Table, Form, Pagination } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport API from \"../../Utils/API/API.js\";\r\nimport { getToken } from \"../../Utils/UserInfoUtils\";\r\n\r\nconst RevenueStatistics = ({ setTotalRevenue }) => {\r\n  const [revenueData, setRevenueData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [sortBy, setSortBy] = useState(null);\r\n  const [sortOrder, setSortOrder] = useState(\"asc\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [recordsPerPage, setRecordsPerPage] = useState(5);\r\n  const token = getToken();\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(API.ADMIN.VIEW_REVENUE, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        if (response.data.code === 200) {\r\n          const data = response.data.data;\r\n          setRevenueData(data);\r\n          setTotalRevenue(\r\n            data.reduce((sum, item) => sum + item.subcriptionPlanPrice, 0)\r\n          );\r\n        } else {\r\n          setError(\"Failed to fetch data\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"Error fetching data:\", err);\r\n        setError(\"Error fetching data\");\r\n      })\r\n      .finally(() => setLoading(false));\r\n  }, [setTotalRevenue]);\r\n\r\n  const handleSort = (key) => {\r\n    setSortBy(key);\r\n    setSortOrder(sortBy === key && sortOrder === \"asc\" ? \"desc\" : \"asc\");\r\n  };\r\n\r\n  const filteredData = useMemo(() => {\r\n    return revenueData.filter((item) =>\r\n      [item.storeName, item.subcriptionPlanName, item.createdBy].some((field) =>\r\n        field.toLowerCase().includes(searchTerm.toLowerCase())\r\n      )\r\n    );\r\n  }, [revenueData, searchTerm]);\r\n\r\n  const sortedData = useMemo(() => {\r\n    if (!sortBy) return filteredData;\r\n    return [...filteredData].sort((a, b) => {\r\n      if (typeof a[sortBy] === \"number\") {\r\n        return sortOrder === \"asc\"\r\n          ? a[sortBy] - b[sortBy]\r\n          : b[sortBy] - a[sortBy];\r\n      }\r\n      return sortOrder === \"asc\"\r\n        ? a[sortBy].localeCompare(b[sortBy])\r\n        : b[sortBy].localeCompare(a[sortBy]);\r\n    });\r\n  }, [filteredData, sortBy, sortOrder]);\r\n\r\n  const totalPages = Math.ceil(sortedData.length / recordsPerPage);\r\n  const currentRecords = useMemo(() => {\r\n    return sortedData.slice(\r\n      (currentPage - 1) * recordsPerPage,\r\n      currentPage * recordsPerPage\r\n    );\r\n  }, [sortedData, currentPage, recordsPerPage]);\r\n\r\n  return (\r\n    <div>\r\n      <h3 className=\"mt-5\">Thống kê giao dịch</h3>\r\n\r\n      <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"Tìm kiếm theo tên cửa hàng, gói đăng kí, người tạo\"\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n          className=\"me-2\"\r\n          style={{ width: \"500px\" }}\r\n        />\r\n        <div className=\"d-flex align-items-center\">\r\n          <Form.Label className=\"me-2 mb-0\">Hiển thị</Form.Label>\r\n          <Form.Select\r\n            value={recordsPerPage}\r\n            onChange={(e) => {\r\n              setRecordsPerPage(Number(e.target.value));\r\n              setCurrentPage(1);\r\n            }}\r\n            style={{ width: \"80px\" }}\r\n          >\r\n            <option value=\"5\">5</option>\r\n            <option value=\"10\">10</option>\r\n            <option value=\"15\">15</option>\r\n          </Form.Select>\r\n          <span className=\"ms-2\">bản ghi / trang</span>\r\n        </div>\r\n      </div>\r\n\r\n      {loading ? (\r\n        <p>Đang tải dữ liệu...</p>\r\n      ) : error ? (\r\n        <p className=\"text-danger\">{error}</p>\r\n      ) : (\r\n        <>\r\n          <Table striped bordered hover className=\"mt-3\">\r\n            <thead>\r\n              <tr>\r\n                <th onClick={() => handleSort(\"storeName\")}>\r\n                  Tên cửa hàng{\" \"}\r\n                  {sortBy === \"storeName\"\r\n                    ? sortOrder === \"asc\"\r\n                      ? \"▲\"\r\n                      : \"▼\"\r\n                    : \"⇅\"}\r\n                </th>\r\n                <th>Gói đăng kí</th>\r\n                <th>Giá (VND)</th>\r\n                <th>Mô tả</th>\r\n                <th>Thời hạn (Tháng)</th>\r\n                <th onClick={() => handleSort(\"createdBy\")}>\r\n                  Người tạo{\" \"}\r\n                  {sortBy === \"createdBy\"\r\n                    ? sortOrder === \"asc\"\r\n                      ? \"▲\"\r\n                      : \"▼\"\r\n                    : \"⇅\"}\r\n                </th>\r\n                <th>Ngày tạo</th>\r\n                <th>Mã giao dịch</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {currentRecords.length > 0 ? (\r\n                currentRecords.map((item) => (\r\n                  <tr key={item.appStatisticsID}>\r\n                    <td>{item.storeName}</td>\r\n                    <td>{item.subcriptionPlanName}</td>\r\n                    <td className=\"text-right\">\r\n                      {item.subcriptionPlanPrice.toLocaleString()}\r\n                    </td>\r\n                    <td>{item.subcriptionDescription}</td>\r\n                    <td className=\"text-center\">\r\n                      {item.subcriptionTimeOfExpiration}\r\n                    </td>\r\n                    <td>{item.createdBy}</td>\r\n                    <td>{new Date(item.createdAt).toLocaleDateString()}</td>\r\n                    <td>{item.transactionNo}</td>\r\n                  </tr>\r\n                ))\r\n              ) : (\r\n                <tr>\r\n                  <td colSpan=\"7\" className=\"text-center text-muted\">\r\n                    Không có giao dịch được tìm thấy\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </Table>\r\n\r\n          <Pagination className=\"mt-3\">\r\n            <Pagination.Prev\r\n              onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}\r\n              disabled={currentPage === 1}\r\n            />\r\n            {[...Array(totalPages)].map((_, index) => (\r\n              <Pagination.Item\r\n                key={index}\r\n                active={index + 1 === currentPage}\r\n                onClick={() => setCurrentPage(index + 1)}\r\n              >\r\n                {index + 1}\r\n              </Pagination.Item>\r\n            ))}\r\n            <Pagination.Next\r\n              onClick={() =>\r\n                setCurrentPage((prev) => Math.min(prev + 1, totalPages))\r\n              }\r\n              disabled={currentPage === totalPages}\r\n            />\r\n          </Pagination>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RevenueStatistics;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Pages/AdminDashboard/RevenueStatistics.js b/Front-End/swp_interface/src/Pages/AdminDashboard/RevenueStatistics.js
--- a/Front-End/swp_interface/src/Pages/AdminDashboard/RevenueStatistics.js	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/Front-End/swp_interface/src/Pages/AdminDashboard/RevenueStatistics.js	(date 1742498244281)
@@ -12,7 +12,7 @@
   const [sortBy, setSortBy] = useState(null);
   const [sortOrder, setSortOrder] = useState("asc");
   const [currentPage, setCurrentPage] = useState(1);
-  const [recordsPerPage, setRecordsPerPage] = useState(5);
+  const [recordsPerPage, setRecordsPerPage] = useState(10);
   const token = getToken();
 
   useEffect(() => {
@@ -24,21 +24,23 @@
       })
       .then((response) => {
         if (response.data.code === 200) {
-          const data = response.data.data;
+          const data = response.data.data.filter(
+            (item) => item.createdBy && item.createdAt && item.transactionNo
+          );
           setRevenueData(data);
           setTotalRevenue(
             data.reduce((sum, item) => sum + item.subcriptionPlanPrice, 0)
           );
         } else {
-          setError("Failed to fetch data");
+          setError("Không thể lấy dữ liệu");
         }
       })
       .catch((err) => {
-        console.error("Error fetching data:", err);
-        setError("Error fetching data");
+        console.error("Lỗi khi lấy dữ liệu:", err);
+        setError("Lỗi khi lấy dữ liệu");
       })
       .finally(() => setLoading(false));
-  }, [setTotalRevenue]);
+  }, [setTotalRevenue, token]);
 
   const handleSort = (key) => {
     setSortBy(key);
@@ -47,9 +49,9 @@
 
   const filteredData = useMemo(() => {
     return revenueData.filter((item) =>
-      [item.storeName, item.subcriptionPlanName, item.createdBy].some((field) =>
-        field.toLowerCase().includes(searchTerm.toLowerCase())
-      )
+      [item.storeName, item.subcriptionPlanName, item.createdBy]
+        .filter(Boolean)
+        .some((field) => field.toLowerCase().includes(searchTerm.toLowerCase()))
     );
   }, [revenueData, searchTerm]);
 
@@ -82,14 +84,13 @@
       <div className="d-flex justify-content-between align-items-center mb-3">
         <Form.Control
           type="text"
-          placeholder="Tìm kiếm theo tên cửa hàng, gói đăng kí, người tạo"
+          placeholder="Tìm kiếm theo gói đăng kí, người tạo"
           value={searchTerm}
           onChange={(e) => setSearchTerm(e.target.value)}
           className="me-2"
           style={{ width: "500px" }}
         />
         <div className="d-flex align-items-center">
-          <Form.Label className="me-2 mb-0">Hiển thị</Form.Label>
           <Form.Select
             value={recordsPerPage}
             onChange={(e) => {
@@ -115,14 +116,6 @@
           <Table striped bordered hover className="mt-3">
             <thead>
               <tr>
-                <th onClick={() => handleSort("storeName")}>
-                  Tên cửa hàng{" "}
-                  {sortBy === "storeName"
-                    ? sortOrder === "asc"
-                      ? "▲"
-                      : "▼"
-                    : "⇅"}
-                </th>
                 <th>Gói đăng kí</th>
                 <th>Giá (VND)</th>
                 <th>Mô tả</th>
@@ -143,7 +136,6 @@
               {currentRecords.length > 0 ? (
                 currentRecords.map((item) => (
                   <tr key={item.appStatisticsID}>
-                    <td>{item.storeName}</td>
                     <td>{item.subcriptionPlanName}</td>
                     <td className="text-right">
                       {item.subcriptionPlanPrice.toLocaleString()}
@@ -152,42 +144,24 @@
                     <td className="text-center">
                       {item.subcriptionTimeOfExpiration}
                     </td>
-                    <td>{item.createdBy}</td>
-                    <td>{new Date(item.createdAt).toLocaleDateString()}</td>
-                    <td>{item.transactionNo}</td>
+                    <td>{item.createdBy ? item.createdBy : "N/A"}</td>
+                    <td>
+                      {item.createdAt
+                        ? new Date(item.createdAt).toLocaleDateString()
+                        : "N/A"}
+                    </td>
+                    <td>{item.transactionNo ? item.transactionNo : "N/A"}</td>
                   </tr>
                 ))
               ) : (
                 <tr>
-                  <td colSpan="7" className="text-center text-muted">
+                  <td colSpan="8" className="text-center text-muted">
                     Không có giao dịch được tìm thấy
                   </td>
                 </tr>
               )}
             </tbody>
           </Table>
-
-          <Pagination className="mt-3">
-            <Pagination.Prev
-              onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
-              disabled={currentPage === 1}
-            />
-            {[...Array(totalPages)].map((_, index) => (
-              <Pagination.Item
-                key={index}
-                active={index + 1 === currentPage}
-                onClick={() => setCurrentPage(index + 1)}
-              >
-                {index + 1}
-              </Pagination.Item>
-            ))}
-            <Pagination.Next
-              onClick={() =>
-                setCurrentPage((prev) => Math.min(prev + 1, totalPages))
-              }
-              disabled={currentPage === totalPages}
-            />
-          </Pagination>
         </>
       )}
     </div>
Index: swp391/src/main/java/org/group5/swp391/service/ProductService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.service;\r\n\r\nimport org.group5.swp391.dto.customer_requirement.CustomerProductDTO;\r\nimport org.group5.swp391.dto.employee.EmployeeProductDTO;\r\nimport org.group5.swp391.dto.store_owner.all_product.StoreProductDTO;\r\nimport org.group5.swp391.dto.store_owner.all_product.StoreProductDetailDTO;\r\nimport org.group5.swp391.dto.store_owner.store_detail.StoreDetailProductDTO;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport java.util.List;\r\n\r\n@Service\r\npublic interface ProductService {\r\n    public Page<StoreProductDTO> getProducts(String productName, int page, int size, String sortBy, boolean descending);\r\n    public Page<EmployeeProductDTO> getProductsByCateID(String CateID, int page, int size, String sortBy, boolean descending);\r\n    public Page<EmployeeProductDTO>getProductBySearch(String name, int page, int size, String sortBy, boolean descending);\r\n    public List<EmployeeProductDTO>getProductBySearchInList(String name);\r\n    public Page<CustomerProductDTO> getAllProducts();\r\n    public Page<CustomerProductDTO> searchProducts(String query, int page, int size);\r\n    public Page<CustomerProductDTO> searchProductsQuery(String querySearchName, Double minPrice, Double maxPrice, int page, int size, String sortBy, boolean descending, String categoryID);\r\n    public StoreProductDetailDTO updateStoreProduct(String productID, StoreProductDetailDTO dto);\r\n    public StoreProductDetailDTO getProduct(String id);\r\n    public String updateStoreProductImage(String productID, MultipartFile file);\r\n    public void deleteProduct(String productId);\r\n    public void addProduct(String storeID, StoreDetailProductDTO storeDetailProductDTO) throws Exception;\r\n    public void updateProduct(String storeID, String productID, StoreDetailProductDTO storeDetailProductDTO) throws Exception;\r\n    public Page<StoreDetailProductDTO> getAllProductsByStoreID(String search, String storeID, int page, int size, String sortBy, boolean descending);\r\n    }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/service/ProductService.java b/swp391/src/main/java/org/group5/swp391/service/ProductService.java
--- a/swp391/src/main/java/org/group5/swp391/service/ProductService.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/service/ProductService.java	(date 1742498244311)
@@ -15,7 +15,7 @@
 public interface ProductService {
     public Page<StoreProductDTO> getProducts(String productName, int page, int size, String sortBy, boolean descending);
     public Page<EmployeeProductDTO> getProductsByCateID(String CateID, int page, int size, String sortBy, boolean descending);
-    public Page<EmployeeProductDTO>getProductBySearch(String name, int page, int size, String sortBy, boolean descending);
+    public Page<EmployeeProductDTO>getProductBySearch(String name, int page, int size, String sortBy, boolean descending,Integer minQuantity, Integer maxQuantity);
     public List<EmployeeProductDTO>getProductBySearchInList(String name);
     public Page<CustomerProductDTO> getAllProducts();
     public Page<CustomerProductDTO> searchProducts(String query, int page, int size);
Index: Front-End/swp_interface/src/Pages/Employee_ProductLayout/components/productsList.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport {\r\n    MenuFoldOutlined,\r\n    MenuUnfoldOutlined,\r\n    UploadOutlined,\r\n    UserOutlined,\r\n    ShopOutlined,\r\n    VideoCameraOutlined,\r\n    InsertRowBelowOutlined,\r\n    TeamOutlined,\r\n} from '@ant-design/icons';\r\nimport axios from 'axios';\r\nimport logo from '../../../../src/assets/img/logoviet.png';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Button, Layout, Menu, theme, Input, Space } from 'antd';\r\nimport CustomFooter from \"../../../../src/Components/Footer\";\r\nimport { Table, Spin } from 'antd';\r\nimport API from '../../../Utils/API/API';\r\nimport { getToken } from '../../../Utils/UserInfoUtils';\r\nimport moment from 'moment';\r\nimport '../ProductIndex.css'\r\nconst { Header, Sider, Content } = Layout;\r\n\r\n\r\nconst Employee_Products = () => {\r\n    const [collapsed, setCollapsed] = useState(false);\r\n    const navigate = useNavigate();\r\n    const {\r\n        token: { colorBgContainer, borderRadiusLG },\r\n    } = theme.useToken();\r\n    const [products, setProducts] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [pageSize, setPageSize] = useState(10);\r\n    const [totalItems, setTotalItems] = useState(0);\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const [isSearch, setIsSearch] = useState(false);\r\n    const [sortInfo, setSortInfo] = useState({ field: 'price', order: false });\r\n    const token = getToken();\r\n\r\n    const handleNavigation = (path) => {\r\n        navigate(path);\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            title: 'STT',\r\n            key: 'stt',\r\n            render: (text, record, index) => index + 1,\r\n            width: 5,\r\n        },\r\n        {\r\n            title: 'Ảnh Sản Phẩm',\r\n            dataIndex: 'productImage',\r\n            key: 'productImage',\r\n            width: 10,\r\n            render: (productImage) => (\r\n                <img style={{ width: '100%' }} src={productImage} alt=\"\" />\r\n            ),\r\n        },\r\n        {\r\n            title: 'Gạo',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            width: 15,\r\n        },\r\n        {\r\n            title: 'Số Lượng ',\r\n            dataIndex: 'quantity',\r\n            key: 'quantity',\r\n            width: 5,\r\n        },\r\n        {\r\n            title: 'Mô Tả',\r\n            dataIndex: 'information',\r\n            key: 'information',\r\n            width: '30%',\r\n        },\r\n        {\r\n            title: 'Giá Gạo',\r\n            dataIndex: 'price',\r\n            sorter: true,\r\n            key: 'price',\r\n            width: 10,\r\n            render: (price) => `${price} đ`,\r\n        },\r\n        {\r\n            title: 'Loại Gạo',\r\n            key: 'categoryname',\r\n            width: 20,\r\n            render: (text, record) => (\r\n                <span>{record.employeeCategoryDTO?.name || 'N/A'}</span>\r\n            ),\r\n            filters: [\r\n                { text: 'Gạo Jasmine', value: 'Gạo Jasmine' },\r\n                { text: 'Gạo Hấp', value: 'Gạo Hấp' },\r\n                { text: 'Gạo Lứt', value: 'Gạo Lứt' },\r\n                { text: 'Gạo Basmati', value: 'Gạo Basmati' },\r\n                { text: 'Nếp', value: 'Nếp' },\r\n            ],\r\n            onFilter: (value, record) => record.employeeCategoryDTO?.name === value,\r\n        },\r\n        {\r\n\r\n            title: 'Chỉnh Sửa Lúc',\r\n            dataIndex: 'N/A',\r\n            key: 'N/A',\r\n            render: (text) => text ? moment(Number(text)).format('DD/MM/YYYY HH:mm:ss') : 'N/A',\r\n            width: 15,\r\n        }\r\n    ];\r\n    const handleSearch = async (page, size) => {\r\n        try {\r\n            const response = await axios.get(API.EMPLOYEE.GET_PRODUCTS_BY_NAME, {\r\n                params: {\r\n                    name: isSearch ? searchTerm : '',\r\n                    page: page - 1,\r\n                    size: size,\r\n                    sortBy: sortInfo.field,\r\n                    descending: sortInfo.order,\r\n                },\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`, // Thêm dấu backtick để sử dụng template string\r\n                },\r\n            });\r\n            console.log(\"Search response:\", response.data);\r\n            setProducts(response.data.content);\r\n            setTotalItems(response.data.totalElements);\r\n        } catch (error) {\r\n            console.error('Lỗi khi gọi API tìm kiếm:', error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n    const handleTableChange = (pagination, filters, sorter) => {\r\n        const { current, pageSize } = pagination;\r\n        setSortInfo({\r\n            field: sorter?.field || 'price',\r\n            order: sorter?.order === 'descend',\r\n        });\r\n        setCurrentPage(current);\r\n        setPageSize(pageSize);\r\n        handleSearch(current, pageSize, sorter);\r\n    };\r\n    useEffect(() => {\r\n        handleSearch(currentPage, pageSize);\r\n    }, [currentPage, pageSize, sortInfo]);\r\n    return (\r\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n            <Layout style={{ minHeight: '100vh' }}>\r\n                <Sider\r\n                    style={{\r\n                        backgroundColor: 'white',\r\n                        color: '#fff',\r\n                    }}\r\n                    trigger={null} collapsible collapsed={collapsed}>\r\n                    <div className=\"demo-logo-vertical\" />\r\n                    <div style={{ height: '80px' }}>\r\n                        <img style={{ width: '90px', marginRight: '100px' }} src={logo} alt=\"logo\" class=\"header__navbar__img\" />\r\n                    </div>\r\n                    <Menu\r\n                        theme=\"light\"\r\n                        mode=\"inline\"\r\n                        defaultSelectedKeys={['1']}\r\n                    >\r\n                        <Menu.Item\r\n                            key=\"1\"\r\n                            icon={<InsertRowBelowOutlined />}\r\n                            onClick={() => handleNavigation('/employee/products')}\r\n                        >\r\n                            Sản Phẩm Gạo\r\n                        </Menu.Item>\r\n                        <Menu.Item\r\n                            key=\"2\"\r\n                            icon={<ShopOutlined />}\r\n                            onClick={() => handleNavigation('/employee/ricezone')}\r\n                        >\r\n                            Khu Vực Gạo\r\n                        </Menu.Item>\r\n                        <Menu.Item\r\n                            key=\"3\"\r\n                            icon={<TeamOutlined />}\r\n                            onClick={() => handleNavigation('/employee/customers')}\r\n                        >\r\n                            Khách Hàng\r\n                        </Menu.Item>\r\n                        <Menu.Item\r\n                            key=\"4\"\r\n                            icon={<TeamOutlined />}\r\n                            onClick={() => handleNavigation('/employee/invoices')}\r\n                        >\r\n                            Hóa Đơn\r\n                        </Menu.Item>\r\n                    </Menu>\r\n                </Sider>\r\n                <Layout>\r\n                    <Header\r\n                        style={{\r\n                            padding: '0 16px',\r\n                            background: colorBgContainer,\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            justifyContent: 'space-between',\r\n                        }}\r\n                    >\r\n\r\n                        <Button\r\n                            type=\"text\"\r\n                            icon={collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}\r\n                            onClick={() => setCollapsed(!collapsed)}\r\n                            style={{\r\n                                fontSize: '16px',\r\n                                width: 64,\r\n                                height: 64,\r\n                            }}\r\n                        />\r\n\r\n                        <Space.Compact\r\n                            style={{\r\n                                width: '100%',\r\n                            }}\r\n                        >\r\n                            <Input\r\n                                placeholder='Tìm Tên Loại Gạo.....'\r\n                                value={searchTerm}\r\n                                onChange={(e) => { setIsSearch(false); setSearchTerm(e.target.value) }}\r\n                            />\r\n                            <Button type=\"primary\" onClick={() => { setIsSearch(true); handleSearch(1, pageSize) }}>Tìm Kiếm </Button>\r\n                        </Space.Compact>\r\n                    </Header>\r\n                    <Content\r\n                        style={{\r\n                            margin: '24px 16px',\r\n                            padding: 24,\r\n                            minHeight: 280,\r\n                            background: colorBgContainer,\r\n                            borderRadius: borderRadiusLG,\r\n                        }}\r\n                    >\r\n                        <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", padding: \"0 15px\" }}>\r\n                            <h3 style={{ textAlign: \"center\", margin: 0, color: \"#E3C584\" }}>\r\n                                <i>Danh mục sản phẩm của cửa hàng</i>\r\n                            </h3>\r\n                        </div>\r\n                        {loading ? (<Spin size=\"large\" />) : (\r\n                            <Table style={{ marginTop: 45 }}\r\n                                dataSource={products}\r\n                                columns={columns}\r\n                                rowClassName={(record) =>\r\n                                    record.quantity === 0 ? \"row-red\" : \"\"\r\n                                }\r\n\r\n                                pagination={{\r\n                                    current: currentPage,\r\n                                    pageSize: pageSize,\r\n                                    total: totalItems,\r\n                                    showSizeChanger: true,\r\n                                    pageSizeOptions: ['1', '5', '10', '20'],\r\n                                }}\r\n                                onChange={handleTableChange}\r\n                                className=\"custom-table\"\r\n                            />\r\n                        )}\r\n\r\n\r\n                    </Content>\r\n\r\n                </Layout>\r\n            </Layout>\r\n            <CustomFooter />\r\n        </div>\r\n    );\r\n};\r\nexport default Employee_Products;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Pages/Employee_ProductLayout/components/productsList.js b/Front-End/swp_interface/src/Pages/Employee_ProductLayout/components/productsList.js
--- a/Front-End/swp_interface/src/Pages/Employee_ProductLayout/components/productsList.js	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/Front-End/swp_interface/src/Pages/Employee_ProductLayout/components/productsList.js	(date 1742498244289)
@@ -8,6 +8,7 @@
     VideoCameraOutlined,
     InsertRowBelowOutlined,
     TeamOutlined,
+    SolutionOutlined,
 } from '@ant-design/icons';
 import axios from 'axios';
 import logo from '../../../../src/assets/img/logoviet.png';
@@ -37,6 +38,8 @@
     const [isSearch, setIsSearch] = useState(false);
     const [sortInfo, setSortInfo] = useState({ field: 'price', order: false });
     const token = getToken();
+    const [minQuantity, setMinQuantity] = useState(0);
+    const [maxQuantity, setMaxQuantity] = useState();
 
     const handleNavigation = (path) => {
         navigate(path);
@@ -118,6 +121,8 @@
                     size: size,
                     sortBy: sortInfo.field,
                     descending: sortInfo.order,
+                    minQuantity: minQuantity || undefined,
+                    maxQuantity: maxQuantity || undefined,
                 },
                 headers: {
                     Authorization: `Bearer ${token}`, // Thêm dấu backtick để sử dụng template string
@@ -186,7 +191,7 @@
                         </Menu.Item>
                         <Menu.Item
                             key="4"
-                            icon={<TeamOutlined />}
+                            icon={<SolutionOutlined />}
                             onClick={() => handleNavigation('/employee/invoices')}
                         >
                             Hóa Đơn
@@ -214,19 +219,6 @@
                                 height: 64,
                             }}
                         />
-
-                        <Space.Compact
-                            style={{
-                                width: '100%',
-                            }}
-                        >
-                            <Input
-                                placeholder='Tìm Tên Loại Gạo.....'
-                                value={searchTerm}
-                                onChange={(e) => { setIsSearch(false); setSearchTerm(e.target.value) }}
-                            />
-                            <Button type="primary" onClick={() => { setIsSearch(true); handleSearch(1, pageSize) }}>Tìm Kiếm </Button>
-                        </Space.Compact>
                     </Header>
                     <Content
                         style={{
@@ -237,10 +229,51 @@
                             borderRadius: borderRadiusLG,
                         }}
                     >
-                        <div style={{ display: "flex", justifyContent: "center", alignItems: "center", padding: "0 15px" }}>
+                        <div style={{ display: "flex", justifyContent: "space-around", alignItems: "center", padding: "0 15px" }}>
                             <h3 style={{ textAlign: "center", margin: 0, color: "#E3C584" }}>
                                 <i>Danh mục sản phẩm của cửa hàng</i>
                             </h3>
+                            <Space.Compact
+                                style={{
+                                    width: '20%',
+                                }}
+                            >
+                                <Input
+                                    placeholder='Tìm Tên Loại Gạo.....'
+                                    value={searchTerm}
+                                    onChange={(e) => { setIsSearch(false); setSearchTerm(e.target.value) }}
+                                />
+                                <Button type="primary" onClick={() => { setIsSearch(true); handleSearch(1, pageSize) }}>Tìm Kiếm </Button>
+                            </Space.Compact>
+                        </div>
+                        <div className="filter-container">
+                            <Space size="middle">
+                                <div style={{ display: "flex", alignItems: "center", justifyContent: "flex-start", gap: "20px", color: "#6B7012" }}>
+                                    <span>Số Lượng Tối Thiểu :</span>
+                                    <Input
+                                        type="number"
+                                        value={minQuantity}
+                                        onChange={(e) => setMinQuantity(e.target.value)}
+                                        placeholder="Nhập min"
+                                        style={{ width: 150 }}
+                                        allowClear
+                                    />
+                                </div>
+                                <div style={{ display: "flex", alignItems: "center", justifyContent: "flex-start", gap: "20px", color: "#6B7012" }}>
+                                    <span>Số Lượng Tối Đa :</span>
+                                    <Input
+                                        type="number"
+                                        value={maxQuantity}
+                                        onChange={(e) => setMaxQuantity(e.target.value)}
+                                        placeholder="Nhập max"
+                                        style={{ width: 150 }}
+                                        allowClear
+                                    />
+                                </div>
+                                <Button type="primary" onClick={() => { setIsSearch(true); handleSearch(1, pageSize); }}>
+                                    Lọc Sản Phẩm
+                                </Button>
+                            </Space>
                         </div>
                         {loading ? (<Spin size="large" />) : (
                             <Table style={{ marginTop: 45 }}
Index: swp391/src/main/java/org/group5/swp391/dto/response/store_response/StoreResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/dto/response/store_response/StoreResponse.java b/swp391/src/main/java/org/group5/swp391/dto/response/store_response/StoreResponse.java
new file mode 100644
--- /dev/null	(date 1742498244298)
+++ b/swp391/src/main/java/org/group5/swp391/dto/response/store_response/StoreResponse.java	(date 1742498244298)
@@ -0,0 +1,21 @@
+package org.group5.swp391.dto.response.store_response;
+
+import lombok.*;
+import lombok.experimental.FieldDefaults;
+
+import java.time.LocalDateTime;
+
+@Data
+@AllArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+@Builder
+public class StoreResponse {
+    String storeID;
+    String storeName;
+    String address;
+    String hotline;
+    String description;
+    String operatingHour;
+    LocalDateTime expireAt;
+    String image;
+}
Index: Front-End/swp_interface/src/Pages/StoreManagement/StoreInfor/CreateStore.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Pages/StoreManagement/StoreInfor/CreateStore.js b/Front-End/swp_interface/src/Pages/StoreManagement/StoreInfor/CreateStore.js
new file mode 100644
--- /dev/null	(date 1742498244290)
+++ b/Front-End/swp_interface/src/Pages/StoreManagement/StoreInfor/CreateStore.js	(date 1742498244290)
@@ -0,0 +1,193 @@
+import React, { useState } from "react";
+import { useParams, useNavigate } from "react-router-dom";
+import { PlusOutlined } from "@ant-design/icons";
+import { Form, Input, Upload, TimePicker, Button, message } from "antd";
+import dayjs from "dayjs";
+import axios from "axios";
+import { getToken } from "../../../Utils/UserInfoUtils";
+import API from "../../../Utils/API/API.js";
+
+const { TextArea } = Input;
+const format = "HH:mm";
+const layout = {
+  labelCol: { span: 8 },
+  wrapperCol: { span: 16 },
+};
+const token = getToken();
+
+const CreateStore = () => {
+  const { transactionNo } = useParams();
+  const navigate = useNavigate();
+  const [imageUrl, setImageUrl] = useState(null);
+  const [loading, setLoading] = useState(false);
+  const [messageApi, contextHolder] = message.useMessage();
+  const key = "creatingStore";
+
+  const startTime = dayjs("00:00", format);
+  const endTime = dayjs("00:00", format);
+
+  // Upload ảnh lên API
+  const handleUpload = async ({ file, onSuccess, onError }) => {
+    const formData = new FormData();
+    formData.append("file", file);
+
+    try {
+      const res = await axios.post(API.PUBLIC.UPLOAD_IMG, formData, {
+        headers: { "Content-Type": "multipart/form-data" },
+      });
+
+      if (res.data.code === 200) {
+        setImageUrl(res.data.data);
+        messageApi.success("Ảnh tải lên thành công!");
+        onSuccess("ok");
+      } else {
+        messageApi.error("Tải ảnh thất bại!");
+        onError(new Error("Upload failed"));
+      }
+    } catch (error) {
+      messageApi.error("Lỗi khi tải ảnh!");
+      onError(error);
+    }
+  };
+
+  const onFinish = async (values) => {
+    if (!imageUrl) {
+      messageApi.error("Vui lòng tải lên ảnh!");
+      return;
+    }
+
+    setLoading(true);
+
+    messageApi.open({
+      key,
+      type: "loading",
+      content: "Đang tạo cửa hàng...",
+    });
+
+    try {
+      const operatingHour = `${values.operatingHour[0].format(
+        format
+      )} - ${values.operatingHour[1].format(format)}`;
+
+      const payload = {
+        storeName: values.storeName,
+        address: values.address,
+        hotline: values.hotline,
+        description: values.description,
+        operatingHour,
+        image: imageUrl,
+      };
+
+      const res = await axios.post(
+        API.STORE_OWNER.CREATE_NEW_STORE(transactionNo),
+        payload,
+        {
+          headers: {
+            Authorization: `Bearer ${token}`,
+          },
+        }
+      );
+
+      if (res.status === 200) {
+        messageApi.open({
+          key,
+          type: "success",
+          content: "Tạo cửa hàng thành công!",
+          duration: 3,
+        });
+
+        setTimeout(() => {
+          navigate("/store-owner/store");
+        }, 3000);
+      } else {
+        messageApi.open({
+          key,
+          type: "error",
+          content: "Tạo cửa hàng thất bại!",
+        });
+      }
+    } catch (error) {
+      messageApi.open({
+        key,
+        type: "error",
+        content: "Lỗi khi tạo cửa hàng!",
+      });
+    } finally {
+      setLoading(false);
+    }
+  };
+
+  return (
+    <>
+      {contextHolder}
+      <Form
+        {...layout}
+        name="nest-messages"
+        onFinish={onFinish}
+        style={{ maxWidth: 600 }}
+      >
+        <Form.Item
+          name="storeName"
+          label="Tên cửa hàng"
+          rules={[{ required: true, message: "Vui lòng nhập tên!" }]}
+        >
+          <Input />
+        </Form.Item>
+        <Form.Item
+          name="address"
+          label="Địa chỉ"
+          rules={[{ required: true, message: "Vui lòng nhập địa chỉ!" }]}
+        >
+          <Input />
+        </Form.Item>
+        <Form.Item
+          name="hotline"
+          label="Điện thoại liên hệ"
+          rules={[{ required: true, message: "Vui lòng nhập số điện thoại!" }]}
+        >
+          <Input />
+        </Form.Item>
+        <Form.Item
+          name="operatingHour"
+          label="Giờ hoạt động"
+          rules={[{ required: true, message: "Vui lòng chọn giờ hoạt động!" }]}
+        >
+          <TimePicker.RangePicker
+            defaultValue={[startTime, endTime]}
+            format={format}
+          />
+        </Form.Item>
+        <Form.Item
+          name="description"
+          label="Mô tả"
+          rules={[{ required: true, message: "Vui lòng nhập mô tả!" }]}
+        >
+          <TextArea rows={4} />
+        </Form.Item>
+        <Form.Item label="Ảnh" required>
+          <Upload
+            customRequest={handleUpload}
+            listType="picture-card"
+            showUploadList={false}
+          >
+            {imageUrl ? (
+              <img src={imageUrl} alt="store" style={{ width: "100%" }} />
+            ) : (
+              <div>
+                <PlusOutlined />
+                <div style={{ marginTop: 8 }}>Ảnh</div>
+              </div>
+            )}
+          </Upload>
+        </Form.Item>
+        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>
+          <Button type="primary" htmlType="submit" loading={loading}>
+            Tạo cửa hàng
+          </Button>
+        </Form.Item>
+      </Form>
+    </>
+  );
+};
+
+export default CreateStore;
Index: Front-End/swp_interface/src/Pages/SubscriptionPlan/PaymentReturn.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { useEffect, useState } from \"react\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { getToken } from \"../../Utils/UserInfoUtils\";\r\nimport API from \"../../Utils/API/API.js\";\r\n\r\nexport default function PaymentReturn() {\r\n  const [searchParams] = useSearchParams();\r\n  const vnp_TxnRef = searchParams.get(\"vnp_TxnRef\");\r\n  const vnp_PayDate = searchParams.get(\"vnp_PayDate\");\r\n\r\n  const [transaction, setTransaction] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const token = getToken();\r\n\r\n  useEffect(() => {\r\n    const fetchTransaction = async () => {\r\n      if (!vnp_TxnRef || !vnp_PayDate || !token) {\r\n        setError(\"Thông tin giao dịch không hợp lệ.\");\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const formData = new URLSearchParams();\r\n      formData.append(\"order_id\", vnp_TxnRef);\r\n      formData.append(\"trans_date\", vnp_PayDate);\r\n\r\n      try {\r\n        const res = await fetch(API.VNPAY.PAYMENT_TRANSACTION, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          body: formData,\r\n        });\r\n\r\n        if (!res.ok) {\r\n          throw new Error(`Lỗi hệ thống! Mã: ${res.status}`);\r\n        }\r\n\r\n        const data = await res.json();\r\n        console.log(\"API Response:\", data);\r\n\r\n        if (!data.data) {\r\n          throw new Error(\"Không nhận được dữ liệu giao dịch.\");\r\n        }\r\n\r\n        let parsedData;\r\n        try {\r\n          parsedData = JSON.parse(data.data);\r\n        } catch {\r\n          throw new Error(\"Lỗi khi xử lý dữ liệu giao dịch.\");\r\n        }\r\n\r\n        if (parsedData.vnp_ResponseCode === \"94\") {\r\n          setError(\"Vui lòng kiểm tra giao dịch của bạn sau ít phút nữa.\");\r\n        } else {\r\n          setTransaction(parsedData);\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Fetch transaction error:\", err);\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchTransaction();\r\n  }, [vnp_TxnRef, vnp_PayDate, token]);\r\n\r\n  if (loading)\r\n    return <p className=\"text-center mt-5\">Đang kiểm tra giao dịch...</p>;\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"text-center mt-5\">\r\n        <p className=\"text-danger\">{error}</p>\r\n        <a href=\"/\" className=\"btn btn-primary mt-3\">\r\n          Quay về trang chủ\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const isSuccess = transaction?.vnp_TransactionStatus === \"00\";\r\n\r\n  return (\r\n    <div className=\"d-flex justify-content-center align-items-center vh-100\">\r\n      <div\r\n        className={`card shadow-lg text-center ${\r\n          isSuccess ? \"border-success\" : \"border-danger\"\r\n        }`}\r\n        style={{ width: \"400px\" }}\r\n      >\r\n        <div\r\n          className={`card-header ${\r\n            isSuccess ? \"bg-success text-white\" : \"bg-danger text-white\"\r\n          }`}\r\n        >\r\n          {isSuccess ? \"Thanh toán thành công\" : \"Thanh toán thất bại\"}\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">\r\n            {isSuccess ? \"Giao dịch hoàn tất!\" : \"Giao dịch không thành công!\"}\r\n          </h5>\r\n          <p className=\"card-text\">\r\n            Mã giao dịch: <strong>{transaction?.vnp_TxnRef}</strong>\r\n          </p>\r\n          <p className=\"card-text\">\r\n            Số tiền:{\" \"}\r\n            <strong>\r\n              {(Number(transaction?.vnp_Amount) / 100).toLocaleString(\"vi-VN\")}{\" \"}\r\n              VNĐ\r\n            </strong>\r\n          </p>\r\n          <a href=\"/\" className=\"btn btn-primary mt-3\">\r\n            Quay về trang chủ\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Pages/SubscriptionPlan/PaymentReturn.js b/Front-End/swp_interface/src/Pages/SubscriptionPlan/PaymentReturn.js
--- a/Front-End/swp_interface/src/Pages/SubscriptionPlan/PaymentReturn.js	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/Front-End/swp_interface/src/Pages/SubscriptionPlan/PaymentReturn.js	(date 1742498244291)
@@ -1,125 +1,65 @@
-import { useEffect, useState } from "react";
-import { useSearchParams } from "react-router-dom";
-import "bootstrap/dist/css/bootstrap.min.css";
+import React, { useEffect, useState } from "react";
+import { Button, Result, Spin } from "antd";
+import axios from "axios";
 import { getToken } from "../../Utils/UserInfoUtils";
 import API from "../../Utils/API/API.js";
 
-export default function PaymentReturn() {
-  const [searchParams] = useSearchParams();
-  const vnp_TxnRef = searchParams.get("vnp_TxnRef");
-  const vnp_PayDate = searchParams.get("vnp_PayDate");
-
-  const [transaction, setTransaction] = useState(null);
+const PaymentResult = () => {
+  const [message, setMessage] = useState("");
   const [loading, setLoading] = useState(true);
-  const [error, setError] = useState(null);
   const token = getToken();
 
   useEffect(() => {
-    const fetchTransaction = async () => {
-      if (!vnp_TxnRef || !vnp_PayDate || !token) {
-        setError("Thông tin giao dịch không hợp lệ.");
-        setLoading(false);
-        return;
-      }
+    const params = new URLSearchParams(window.location.search);
+    const orderId = params.get("vnp_TxnRef");
+    const transDate = params.get("vnp_PayDate");
+
+    if (!orderId || !transDate) {
+      setMessage("Thiếu thông tin đơn hàng hoặc thời gian giao dịch.");
+      setLoading(false);
+      return;
+    }
 
-      const formData = new URLSearchParams();
-      formData.append("order_id", vnp_TxnRef);
-      formData.append("trans_date", vnp_PayDate);
+    const apiUrl = API.VNPAY.PAYMENT_TRANSACTION(orderId, transDate);
 
-      try {
-        const res = await fetch(API.VNPAY.PAYMENT_TRANSACTION, {
-          method: "POST",
-          headers: {
-            "Content-Type": "application/x-www-form-urlencoded",
-            Authorization: `Bearer ${token}`,
-          },
-          body: formData,
-        });
-
-        if (!res.ok) {
-          throw new Error(`Lỗi hệ thống! Mã: ${res.status}`);
-        }
-
-        const data = await res.json();
-        console.log("API Response:", data);
-
-        if (!data.data) {
-          throw new Error("Không nhận được dữ liệu giao dịch.");
-        }
-
-        let parsedData;
-        try {
-          parsedData = JSON.parse(data.data);
-        } catch {
-          throw new Error("Lỗi khi xử lý dữ liệu giao dịch.");
-        }
-
-        if (parsedData.vnp_ResponseCode === "94") {
-          setError("Vui lòng kiểm tra giao dịch của bạn sau ít phút nữa.");
+    axios
+      .get(apiUrl, {
+        headers: {
+          Authorization: `Bearer ${token}`,
+        },
+      })
+      .then((res) => {
+        const responseData = res.data.data;
+        if (responseData && responseData.includes("vnp_ResponseCode: 94")) {
+          setMessage("Vui lòng kiểm tra lại sau ít phút.");
         } else {
-          setTransaction(parsedData);
+          setMessage(responseData || "Có lỗi xảy ra.");
         }
-      } catch (err) {
-        console.error("Fetch transaction error:", err);
-        setError(err.message);
-      } finally {
-        setLoading(false);
-      }
-    };
+      })
+      .catch((error) => {
+        console.error("Lỗi khi gọi API:", error);
+        setMessage("Lỗi kết nối đến server.");
+      })
+      .finally(() => setLoading(false));
+  }, [token]);
 
-    fetchTransaction();
-  }, [vnp_TxnRef, vnp_PayDate, token]);
-
-  if (loading)
-    return <p className="text-center mt-5">Đang kiểm tra giao dịch...</p>;
-
-  if (error) {
-    return (
-      <div className="text-center mt-5">
-        <p className="text-danger">{error}</p>
-        <a href="/" className="btn btn-primary mt-3">
-          Quay về trang chủ
-        </a>
-      </div>
-    );
-  }
-
-  const isSuccess = transaction?.vnp_TransactionStatus === "00";
-
   return (
-    <div className="d-flex justify-content-center align-items-center vh-100">
-      <div
-        className={`card shadow-lg text-center ${
-          isSuccess ? "border-success" : "border-danger"
-        }`}
-        style={{ width: "400px" }}
-      >
-        <div
-          className={`card-header ${
-            isSuccess ? "bg-success text-white" : "bg-danger text-white"
-          }`}
-        >
-          {isSuccess ? "Thanh toán thành công" : "Thanh toán thất bại"}
-        </div>
-        <div className="card-body">
-          <h5 className="card-title">
-            {isSuccess ? "Giao dịch hoàn tất!" : "Giao dịch không thành công!"}
-          </h5>
-          <p className="card-text">
-            Mã giao dịch: <strong>{transaction?.vnp_TxnRef}</strong>
-          </p>
-          <p className="card-text">
-            Số tiền:{" "}
-            <strong>
-              {(Number(transaction?.vnp_Amount) / 100).toLocaleString("vi-VN")}{" "}
-              VNĐ
-            </strong>
-          </p>
-          <a href="/" className="btn btn-primary mt-3">
-            Quay về trang chủ
-          </a>
-        </div>
-      </div>
-    </div>
-  );
-}
+    <Result
+      status={loading ? "info" : "success"}
+      title={loading ? <Spin size="large" /> : message}
+      extra={
+        !loading && [
+          <Button
+            type="primary"
+            key="home"
+            onClick={() => (window.location.href = "/")}
+          >
+            Quay lại trang chủ
+          </Button>
+        ]
+      }
+    />
+  );
+};
+
+export default PaymentResult;
Index: swp391/src/main/java/org/group5/swp391/controller/store/ManageStoreController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/controller/store/ManageStoreController.java b/swp391/src/main/java/org/group5/swp391/controller/store/ManageStoreController.java
new file mode 100644
--- /dev/null	(date 1742498244295)
+++ b/swp391/src/main/java/org/group5/swp391/controller/store/ManageStoreController.java	(date 1742498244295)
@@ -0,0 +1,86 @@
+package org.group5.swp391.controller.store;
+
+import jakarta.validation.Valid;
+import org.group5.swp391.dto.request.store_request.StoreRequest;
+import org.group5.swp391.dto.response.store_response.StoreResponse;
+import org.group5.swp391.service.StoreService;
+import org.springframework.security.core.context.SecurityContextHolder;
+import jakarta.servlet.http.HttpServletRequest;
+import lombok.RequiredArgsConstructor;
+import org.group5.swp391.dto.response.ApiResponse;
+import org.springframework.http.HttpStatus;
+import org.springframework.web.bind.annotation.*;
+
+
+import java.util.List;
+import java.util.Map;
+
+
+@RestController
+@RequestMapping("/manage-store")
+@RequiredArgsConstructor
+public class ManageStoreController {
+
+    private final StoreService storeService;
+
+    // Tạo cửa hàng mới
+    @PostMapping("/create-store/{transaction}")
+    public ApiResponse<StoreResponse> createNewStore(@RequestBody @Valid StoreRequest request, @PathVariable String transaction) {
+        String username = SecurityContextHolder.getContext().getAuthentication().getName();
+        StoreResponse createdStore = storeService.createNewStore(request, transaction, username);
+        return ApiResponse.<StoreResponse>builder()
+                .code(HttpStatus.OK.value())
+                .message("Create store Success")
+                .data(createdStore)
+                .build();
+    }
+
+    // Danh sách những yêu cầu tạo cửa hàng mới được xử lí
+    @GetMapping("/request-store")
+    public ApiResponse<List<Map<String, Object>>> requestStore() {
+        String username = SecurityContextHolder.getContext().getAuthentication().getName();
+        List<Map<String, Object>> stores = storeService.getRequestCreateStores(username);
+        return ApiResponse.<List<Map<String, Object>>>builder()
+                .code(HttpStatus.OK.value())
+                .message("Request store success")
+                .data(stores)
+                .build();
+    }
+
+    // Xử lí thanh toán tạo cửa hàng và cập nhật thời hạn
+    @GetMapping("/handle-payment")
+    public ApiResponse<String> handlePayment(@RequestParam("order_id") String vnp_TxnRef, @RequestParam("trans_date") String vnp_TransDate,
+                                             HttpServletRequest req) {
+        String username = SecurityContextHolder.getContext().getAuthentication().getName();
+        String transaction = storeService.handlePayment(username, vnp_TxnRef, vnp_TransDate, req);
+        return ApiResponse.<String>builder()
+                .code(HttpStatus.OK.value())
+                .message("Payment success")
+                .data(transaction)
+                .build();
+    }
+
+    // Cập nhật thông tin cửa hàng
+    @PatchMapping("/update-store/{storeID}")
+    public ApiResponse<StoreResponse> updateStoreInfor(@PathVariable String storeID, @RequestBody @Valid StoreRequest request) {
+        String username = SecurityContextHolder.getContext().getAuthentication().getName();
+        StoreResponse updateRespone = storeService.updateStoreInfor(storeID, request, username);
+        return ApiResponse.<StoreResponse>builder()
+                .code(HttpStatus.OK.value())
+                .message("Update store success")
+                .data(updateRespone)
+                .build();
+    }
+
+    // Lấy thông tin của 1 Store theo ID
+    @GetMapping("/get-store/{storeID}")
+    public ApiResponse<StoreResponse> getStoreInfo(@PathVariable String storeID) {
+        String username = SecurityContextHolder.getContext().getAuthentication().getName();
+        StoreResponse store = storeService.getStoreById(storeID, username);
+        return ApiResponse.<StoreResponse>builder()
+                .code(HttpStatus.OK.value())
+                .message("Get information store success")
+                .data(store)
+                .build();
+    }
+}
Index: Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/styleInvoices.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>.custom-table .ant-table-thead>tr>th {\r\n    background-color: #6B7012;\r\n    /* Màu nền tiêu đề */\r\n    color: #fff;\r\n    /* Màu chữ (trắng để dễ đọc) */\r\n    text-align: center;\r\n    /* Căn giữa nội dung trong tiêu đề */\r\n}\r\n\r\n.site-form-in-drawer-wrapper {\r\n    /* danh cho invoiceCustomerCreate*/\r\n    position: absolute;\r\n    inset-inline-end: 0;\r\n    bottom: 0;\r\n    width: 100%;\r\n    padding: 10px 16px;\r\n    text-align: right;\r\n    background: #fff;\r\n    border-top: 1px solid #e9e9e9;\r\n}\r\n\r\n\r\n.content_upper {\r\n    height: 61.5vh;\r\n    padding: 0 !important;\r\n\r\n}\r\n\r\n.content_lower {\r\n    height: 40vh;\r\n}\r\n\r\n.main-container {\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.invoice-content {\r\n    padding: 10px;\r\n    border-right: 3px solid black;\r\n    border-bottom: 1px solid black;\r\n    width: 70%;\r\n    height: 61.5vh;\r\n\r\n}\r\n\r\n.invoice-title {\r\n    font-size: 22px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-bottom: 15px;\r\n}\r\n\r\n.control-section {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 16px;\r\n}\r\n\r\n.product-selection {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.select-wrapper {\r\n    display: flex;\r\n    gap: 8px;\r\n}\r\n\r\n.error-message {\r\n    color: red;\r\n    font-size: 14px;\r\n}\r\n\r\n.invoice-tabs.large {\r\n    font-size: 23px;\r\n}\r\n\r\n.invoice-tabs.small {\r\n    font-size: 14px;\r\n}\r\n\r\n.customer-content {\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    border-bottom: 1px solid black;\r\n}\r\n\r\n.customer-title {\r\n    margin-top: 15px;\r\n    font-size: 22px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-bottom: 15px;\r\n}\r\n\r\n.customer-info {\r\n    padding: 7px;\r\n    max-width: 500px;\r\n    margin: 0 auto;\r\n    height: 55vh;\r\n}\r\n\r\n.customer-form {\r\n    margin-top: 35px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 16px;\r\n}\r\n\r\n.form-row {\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.form-label {\r\n    width: 200px;\r\n    text-align: left;\r\n    padding-right: 12px;\r\n}\r\n\r\n.payment-details {\r\n    margin-top: 24px;\r\n    height: 40vh;\r\n    /* padding: 12px 0; */\r\n}\r\n\r\n.payment-row {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: 16px;\r\n}\r\n\r\n.payment-label {\r\n    width: 200px;\r\n    text-align: left;\r\n    padding-right: 12px;\r\n    font-weight: bold;\r\n}\r\n\r\n.total-product-label h5,\r\n.final-amount-label h5 {\r\n    margin: 0;\r\n}\r\n\r\n.discount-label h6,\r\n.customer-payment-label h6,\r\n.change-label h6 {\r\n    margin: 0;\r\n}\r\n\r\n.payment-value {\r\n    flex: 1;\r\n    padding: 4px 0;\r\n    font-weight: bold;\r\n}\r\n\r\n.total-product-value {\r\n    border-bottom: 2px solid #000;\r\n}\r\n\r\n.final-amount-value {\r\n    border-bottom: 2px solid black;\r\n    color: black;\r\n}\r\n\r\n.change-value {\r\n    border-bottom: 2px solid black;\r\n    color: black;\r\n}\r\n\r\n.discount-input {\r\n    flex: 1;\r\n    border: none;\r\n    border-bottom: 3px solid black;\r\n    padding: 4px 0;\r\n}\r\n\r\n.customer-payment-input {\r\n    flex: 1;\r\n    border: none;\r\n    border: 2px solid black;\r\n    padding: 4px 0;\r\n    text-align: right;\r\n}\r\n\r\n.invoice-footer {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 10px;\r\n    background: #f8f9fa;\r\n    height: 25vh;\r\n    position: relative;\r\n    border-right: 1px solid;\r\n    border-left: 1px solid;\r\n    border-bottom: 1px solid;\r\n}\r\n\r\n.total-section {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    gap: 10px;\r\n    margin-left: 20px;\r\n    width: 71%;\r\n    /* border-right: 3px solid; */\r\n    height: 25vh;\r\n}\r\n\r\n.detail-line {\r\n    display: flex;\r\n    gap: 10px;\r\n    color: #666;\r\n    font-size: 14px;\r\n    opacity: 0.7;\r\n}\r\n\r\n.detail-label {\r\n    min-width: 100px;\r\n}\r\n\r\n.total-line {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 15px;\r\n}\r\n\r\n.total-label {\r\n    margin: 0;\r\n    font-size: 20px;\r\n    color: #333;\r\n}\r\n\r\n.total-amount {\r\n    font-size: 24px;\r\n    font-weight: bold;\r\n    color: #1890ff;\r\n}\r\n\r\n.payment-button {\r\n    background: #52c41a !important;\r\n    border-color: #52c41a !important;\r\n    border-radius: 4px;\r\n    padding: 0 30px !important;\r\n    height: 45px !important;\r\n    font-size: 16px !important;\r\n    font-weight: 500;\r\n    margin-right: 20px;\r\n}\r\n\r\n.debt-button {\r\n    background: #ff0000 !important;\r\n    border-color: #ff0000 !important;\r\n    border-radius: 4px;\r\n    padding: 0 30px !important;\r\n    height: 45px !important;\r\n    font-size: 16px !important;\r\n    font-weight: 500;\r\n    margin-right: 20px;\r\n}\r\n\r\n.description_content .ant-input {\r\n    height: 85px !important;\r\n}\r\n\r\n.customer-row {\r\n    display: flex;\r\n    align-items: end;\r\n    justify-content: end;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/styleInvoices.css b/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/styleInvoices.css
--- a/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/styleInvoices.css	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/styleInvoices.css	(date 1742498244288)
@@ -102,7 +102,7 @@
 .customer-info {
     padding: 7px;
     max-width: 500px;
-    margin: 0 auto;
+    /* margin: 0 auto; */
     height: 55vh;
 }
 
@@ -119,9 +119,14 @@
 }
 
 .form-label {
-    width: 200px;
+    width: 120px;
     text-align: left;
-    padding-right: 12px;
+    padding-right: 10px;
+}
+
+.form-label2 {
+    width: 120px;
+    text-align: left;
 }
 
 .payment-details {
@@ -266,11 +271,22 @@
 }
 
 .description_content .ant-input {
-    height: 85px !important;
+    height: 55px !important;
 }
 
 .customer-row {
     display: flex;
     align-items: end;
     justify-content: end;
+}
+
+.filter-container button {
+    background-color: #e3c584;
+    /* Màu vàng nhấn */
+    color: #6B7012;
+    font-weight: bold;
+    border: none;
+    padding: 8px 16px;
+    border-radius: 5px;
+    transition: background-color 0.3s ease;
 }
\ No newline at end of file
Index: Front-End/swp_interface/src/Pages/SubscriptionPlan/SubscriptionPlans.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useEffect, useState } from \"react\";\r\nimport { Container, Card, Button, Row, Col } from \"react-bootstrap\";\r\nimport { getToken } from \"../../Utils/UserInfoUtils\";\r\nimport API from \"../../Utils/API/API.js\";\r\nimport HomeHeader from \"../../Components/HomeHeader\";\r\nimport \"./style.css\";\r\n\r\nconst SubscriptionPlans = () => {\r\n  const [plans, setPlans] = useState([]);\r\n  const token = getToken();\r\n\r\n  useEffect(() => {\r\n    fetch(API.PUBLIC.SUBSCRIPTION_PLAN)\r\n      .then((res) => res.json())\r\n      .then((data) => setPlans(data.data))\r\n      .catch((err) => console.error(\"Error fetching plans:\", err));\r\n  }, []);\r\n\r\n  const handlePayment = async (plan) => {\r\n    if (!token) {\r\n      alert(\"Bạn cần đăng nhập để thanh toán!\");\r\n      window.location.href = \"/login\"; // Chuyển hướng đến trang đăng nhập\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\r\n        API.VNPAY.CREATE_PAYMENT(plan.price, plan.subscriptionPlanID),\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.status === 403) {\r\n        alert(\"Vui lòng sử dụng tài khoản chủ cửa hàng để sử dụng dịch vụ.\");\r\n        return;\r\n      }\r\n\r\n      const data = await response.json();\r\n      if (data.data) {\r\n        window.location.href = data.data;\r\n      } else {\r\n        alert(\"Fail create payment VNPay request!\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Payment error:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"subscription-plans-header\">\r\n        <HomeHeader />\r\n      </div>\r\n\r\n      <Container className=\"subscription-plans-container\">\r\n        <h2 className=\"text-center mb-4\">Chọn Gói Đăng Ký</h2>\r\n        <Row className=\"justify-content-center align-items-center w-100\">\r\n          {plans.map((plan) => (\r\n            <Col\r\n              md={4}\r\n              key={plan.subscriptionPlanID}\r\n              className=\"d-flex justify-content-center\"\r\n            >\r\n              <Card className=\"subscription-card shadow-sm w-100\">\r\n                <Card.Body>\r\n                  <Card.Title>{plan.name}</Card.Title>\r\n                  <Card.Text>{plan.description}</Card.Text>\r\n                  <h5>{plan.price.toLocaleString()} VND</h5>\r\n                  <p>Thời hạn: {plan.timeOfExpiration} tháng</p>\r\n                  <Button variant=\"primary\" onClick={() => handlePayment(plan)}>\r\n                    Thanh toán\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SubscriptionPlans;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Pages/SubscriptionPlan/SubscriptionPlans.js b/Front-End/swp_interface/src/Pages/SubscriptionPlan/SubscriptionPlans.js
--- a/Front-End/swp_interface/src/Pages/SubscriptionPlan/SubscriptionPlans.js	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/Front-End/swp_interface/src/Pages/SubscriptionPlan/SubscriptionPlans.js	(date 1742498244291)
@@ -1,46 +1,51 @@
 import React, { useEffect, useState } from "react";
-import { Container, Card, Button, Row, Col } from "react-bootstrap";
+import { Container } from "react-bootstrap";
 import { getToken } from "../../Utils/UserInfoUtils";
 import API from "../../Utils/API/API.js";
 import HomeHeader from "../../Components/HomeHeader";
 import "./style.css";
+import { Card, Col, Row, Button } from "antd";
+import axios from "axios";
+import { useParams } from "react-router-dom";
 
 const SubscriptionPlans = () => {
+  const { storeID } = useParams(); // Lấy storeID nếu có
   const [plans, setPlans] = useState([]);
   const token = getToken();
 
   useEffect(() => {
-    fetch(API.PUBLIC.SUBSCRIPTION_PLAN)
-      .then((res) => res.json())
-      .then((data) => setPlans(data.data))
+    axios
+      .get(API.PUBLIC.SUBSCRIPTION_PLAN)
+      .then((res) => setPlans(res.data.data))
       .catch((err) => console.error("Error fetching plans:", err));
   }, []);
 
   const handlePayment = async (plan) => {
     if (!token) {
       alert("Bạn cần đăng nhập để thanh toán!");
-      window.location.href = "/login"; // Chuyển hướng đến trang đăng nhập
+      window.location.href = "/login";
       return;
     }
-
+  
     try {
-      const response = await fetch(
-        API.VNPAY.CREATE_PAYMENT(plan.price, plan.subscriptionPlanID),
-        {
-          headers: {
-            Authorization: `Bearer ${token}`,
-          },
-        }
-      );
-
+      // Kiểm tra nếu storeID tồn tại thì thêm vào API
+      const paymentUrl = storeID
+        ? API.VNPAY.CREATE_PAYMENT(plan.price, plan.subscriptionPlanID) + `&storeID=${storeID}`
+        : API.VNPAY.CREATE_PAYMENT(plan.price, plan.subscriptionPlanID);
+  
+      const response = await axios.get(paymentUrl, {
+        headers: {
+          Authorization: `Bearer ${token}`,
+        },
+      });
+  
       if (response.status === 403) {
         alert("Vui lòng sử dụng tài khoản chủ cửa hàng để sử dụng dịch vụ.");
         return;
       }
-
-      const data = await response.json();
-      if (data.data) {
-        window.location.href = data.data;
+  
+      if (response.data.data) {
+        window.location.href = response.data.data;
       } else {
         alert("Fail create payment VNPay request!");
       }
@@ -48,6 +53,7 @@
       console.error("Payment error:", error);
     }
   };
+  
 
   return (
     <>
@@ -57,23 +63,20 @@
 
       <Container className="subscription-plans-container">
         <h2 className="text-center mb-4">Chọn Gói Đăng Ký</h2>
-        <Row className="justify-content-center align-items-center w-100">
+        <Row gutter={[16, 16]} justify="center">
           {plans.map((plan) => (
-            <Col
-              md={4}
-              key={plan.subscriptionPlanID}
-              className="d-flex justify-content-center"
-            >
-              <Card className="subscription-card shadow-sm w-100">
-                <Card.Body>
-                  <Card.Title>{plan.name}</Card.Title>
-                  <Card.Text>{plan.description}</Card.Text>
-                  <h5>{plan.price.toLocaleString()} VND</h5>
-                  <p>Thời hạn: {plan.timeOfExpiration} tháng</p>
-                  <Button variant="primary" onClick={() => handlePayment(plan)}>
-                    Thanh toán
-                  </Button>
-                </Card.Body>
+            <Col span={8} key={plan.subscriptionPlanID}>
+              <Card
+                title={plan.name}
+                bordered={false}
+                className="subscription-card"
+              >
+                <p>{plan.description}</p>
+                <h5>{plan.price.toLocaleString()} VND</h5>
+                <p>Thời hạn: {plan.timeOfExpiration} tháng</p>
+                <Button type="primary" onClick={() => handlePayment(plan)}>
+                  Thanh toán
+                </Button>
               </Card>
             </Col>
           ))}
Index: swp391/src/main/java/org/group5/swp391/dto/request/store_request/StoreRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/dto/request/store_request/StoreRequest.java b/swp391/src/main/java/org/group5/swp391/dto/request/store_request/StoreRequest.java
new file mode 100644
--- /dev/null	(date 1742498244297)
+++ b/swp391/src/main/java/org/group5/swp391/dto/request/store_request/StoreRequest.java	(date 1742498244297)
@@ -0,0 +1,24 @@
+package org.group5.swp391.dto.request.store_request;
+
+import jakarta.validation.constraints.NotBlank;
+import lombok.*;
+import lombok.experimental.FieldDefaults;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE)
+public class StoreRequest {
+    @NotBlank(message = "Name of store must not leave empty")
+    String storeName;
+    @NotBlank(message = "Address of store must not leave empty")
+    String address;
+    @NotBlank(message = "Hotline of store must not leave empty")
+    String hotline;
+    @NotBlank(message = "Description of store must not leave empty")
+    String description;
+    @NotBlank(message = "Operating hour of store must not leave empty")
+    String operatingHour;
+    @NotBlank(message = "Image of store must not leave empty")
+    String image;
+}
Index: Front-End/swp_interface/src/Pages/Employee_CustomerLayout/components/customerCreate.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { useLocation, useNavigate } from 'react-router-dom';\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport { Button, Form, Input, InputNumber, message, DatePicker, Select } from 'antd';\r\nimport { getToken } from '../../../Utils/UserInfoUtils';\r\nimport API from '../../../Utils/API/API';\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst CustomerIN4Create = () => {\r\n    const [form] = Form.useForm();\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const customerData = location.state;\r\n    console.log(customerData);\r\n    const token = getToken();\r\n\r\n    useEffect(() => {\r\n        // if (customerData) {\r\n        //     form.setFieldsValue({\r\n        //         customerID: customerData.customerID,\r\n        //         name: customerData.name,\r\n        //         phoneNumber: customerData.phoneNumber,\r\n        //         email: customerData.email,\r\n        //         address: customerData.address,\r\n        //         createdAt: moment(customerData.created_at),\r\n        //         storeName: customerData.employeeStoreDTO ? customerData.employeeStoreDTO.storeName : \"unknown\",\r\n        //     });\r\n        // }\r\n\r\n    }, [customerData, form]);\r\n\r\n    const handleSubmit = async (values) => {\r\n        try {\r\n            const createdAt = moment().valueOf(); // Epoch timestamp (millisecond)\r\n            const requestData = {\r\n                employeeStoreDTO: {\r\n                    storeID: values.store\r\n                },\r\n                name: values.name.trim(),\r\n                phoneNumber: values.phoneNumber.trim(),\r\n                email: values.email ? values.email.trim() : null,\r\n                address: values.address ? values.address.trim() : null,\r\n                createdBy: null\r\n            };\r\n\r\n\r\n            const response = await axios.post(\r\n                API.EMPLOYEE.CREATE_CUSTOMER,\r\n                requestData,\r\n                {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`, // Thêm token vào header\r\n                    },\r\n                }\r\n            );\r\n\r\n            console.log(\"Dữ liệu gửi lên Backend:\", requestData);\r\n            if (response.status === 201) {\r\n                message.success('Tạo khách hàng mới thành công!');\r\n                navigate('/employee/customers');\r\n            } else {\r\n                message.error('Có lỗi xảy ra, vui lòng thử lại!');\r\n            }\r\n        } catch (error) {\r\n            console.error('Lỗi khi gửi dữ liệu:', error);\r\n            message.error('Không thể gửi dữ liệu đến backend!');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                margin: '50px auto',\r\n                padding: '30px',\r\n                maxWidth: 800,\r\n                backgroundColor: '#f9f9f9',\r\n                borderRadius: '8px',\r\n                boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n            }}\r\n        >\r\n            <h2\r\n                style={{\r\n                    textAlign: 'center',\r\n                    marginBottom: '30px',\r\n                    fontSize: '28px',\r\n                    fontWeight: 'bold',\r\n                    color: '#1890ff',\r\n                    textTransform: 'uppercase',\r\n                    letterSpacing: '1px',\r\n                }}\r\n            >\r\n                Thông tin khách hàng: <span style={{ color: '#000', textTransform: 'capitalize' }}></span>\r\n            </h2>\r\n            <Form\r\n                form={form}\r\n                labelCol={{\r\n                    span: 6,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 16,\r\n                }}\r\n                layout=\"horizontal\"\r\n                onFinish={handleSubmit}\r\n            >\r\n\r\n                <Form.Item\r\n                    label=\"Customer Name\"\r\n                    name=\"name\"\r\n                    rules={[\r\n                        { required: true, message: 'Vui lòng nhập tên!' },\r\n                    ]}\r\n                >\r\n                    <Input placeholder=\"Nhập tên khách hàng\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"Phone Number\"\r\n                    name=\"phoneNumber\"\r\n                    rules={[\r\n                        { required: true, message: 'Vui lòng nhập số điện thoại!' },\r\n                        {\r\n                            pattern: /^0\\d{9}$/,\r\n                            message: 'Vui lòng nhập 10 số và bắt đầu từ 0',\r\n                        }\r\n                    ]}\r\n                >\r\n                    <Input placeholder=\"Nhập số điện thoại\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label=\"Customer Email\"\r\n                    name=\"email\"\r\n                    rules={[\r\n                        { required: false, type: 'email', message: 'Vui lòng nhập Email hợp lệ!' },\r\n                    ]}\r\n                >\r\n                    <Input placeholder=\"Nhập Email của khách hàng\" />\r\n                </Form.Item>\r\n                <Form.Item label=\"Customer Address\" name=\"address\">\r\n                    <TextArea rows={3} placeholder=\"Nhập địa chỉ\" />\r\n                </Form.Item>\r\n\r\n                <Form.Item wrapperCol={{ offset: 6, span: 16 }}>\r\n                    <Button\r\n                        type=\"default\"\r\n                        htmlType=\"button\"\r\n                        onClick={() => navigate('/employee/customers')}\r\n                    >\r\n                        Back\r\n                    </Button>\r\n                    <Button\r\n                        htmlType=\"button\"\r\n                        onClick={() => {\r\n                            form.resetFields();\r\n                        }}\r\n                    >\r\n                        Reset\r\n                    </Button>\r\n                    <Button type=\"primary\" htmlType=\"submit\" style={{ marginLeft: '8px' }}>\r\n                        Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CustomerIN4Create;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Pages/Employee_CustomerLayout/components/customerCreate.js b/Front-End/swp_interface/src/Pages/Employee_CustomerLayout/components/customerCreate.js
--- a/Front-End/swp_interface/src/Pages/Employee_CustomerLayout/components/customerCreate.js	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/Front-End/swp_interface/src/Pages/Employee_CustomerLayout/components/customerCreate.js	(date 1742498244282)
@@ -2,19 +2,20 @@
 import React, { useState, useEffect } from 'react';
 import axios from 'axios';
 import moment from 'moment';
-import { Button, Form, Input, InputNumber, message, DatePicker, Select } from 'antd';
+import { Button, Form, Input, InputNumber, message, DatePicker, Select, Modal } from 'antd';
 import { getToken } from '../../../Utils/UserInfoUtils';
 import API from '../../../Utils/API/API';
+import { success, error } from '../../../Utils/AntdNotification';
 
 const { TextArea } = Input;
 
-const CustomerIN4Create = () => {
+const CustomerIN4Create = ({ isVisible, closeModal, refreshData }) => {
     const [form] = Form.useForm();
     const location = useLocation();
     const navigate = useNavigate();
     const customerData = location.state;
-    console.log(customerData);
     const token = getToken();
+    const [messageApi, contextHolder] = message.useMessage();
 
     useEffect(() => {
         // if (customerData) {
@@ -56,112 +57,73 @@
                 }
             );
 
-            console.log("Dữ liệu gửi lên Backend:", requestData);
-            if (response.status === 201) {
-                message.success('Tạo khách hàng mới thành công!');
-                navigate('/employee/customers');
+            if (response.status === 200) {
+                success('Tạo khách hàng mới thành công!', messageApi);
+                form.resetFields();
+                closeModal();
+                console.log("Gọi hàm refreshData!");
+                if (refreshData) refreshData();
+            }
+        } catch (err) {
+            if (err.errorFields) {
+                messageApi.open({
+                    type: 'warning',
+                    content: 'Vui lòng điền đầy đủ và đúng thông tin trước khi gửi!',
+                });
             } else {
-                message.error('Có lỗi xảy ra, vui lòng thử lại!');
+                error(err.response?.data?.message || "Tạo mới tài khoản thất bại.", messageApi);
             }
-        } catch (error) {
-            console.error('Lỗi khi gửi dữ liệu:', error);
-            message.error('Không thể gửi dữ liệu đến backend!');
         }
     };
 
     return (
-        <div
-            style={{
-                margin: '50px auto',
-                padding: '30px',
-                maxWidth: 800,
-                backgroundColor: '#f9f9f9',
-                borderRadius: '8px',
-                boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
-            }}
-        >
-            <h2
-                style={{
-                    textAlign: 'center',
-                    marginBottom: '30px',
-                    fontSize: '28px',
-                    fontWeight: 'bold',
-                    color: '#1890ff',
-                    textTransform: 'uppercase',
-                    letterSpacing: '1px',
-                }}
+        <>
+            {contextHolder}
+            <Modal
+                title="Tạo khách hàng mới"
+                visible={isVisible} // Điều khiển hiển thị
+                onCancel={closeModal} // Đóng Modal khi nhấn cancel
+                footer={null} // Bỏ phần mặc định của Modal
             >
-                Thông tin khách hàng: <span style={{ color: '#000', textTransform: 'capitalize' }}></span>
-            </h2>
-            <Form
-                form={form}
-                labelCol={{
-                    span: 6,
-                }}
-                wrapperCol={{
-                    span: 16,
-                }}
-                layout="horizontal"
-                onFinish={handleSubmit}
-            >
-
-                <Form.Item
-                    label="Customer Name"
-                    name="name"
-                    rules={[
-                        { required: true, message: 'Vui lòng nhập tên!' },
-                    ]}
-                >
-                    <Input placeholder="Nhập tên khách hàng" />
-                </Form.Item>
-                <Form.Item
-                    label="Phone Number"
-                    name="phoneNumber"
-                    rules={[
-                        { required: true, message: 'Vui lòng nhập số điện thoại!' },
-                        {
-                            pattern: /^0\d{9}$/,
-                            message: 'Vui lòng nhập 10 số và bắt đầu từ 0',
-                        }
-                    ]}
-                >
-                    <Input placeholder="Nhập số điện thoại" />
-                </Form.Item>
-                <Form.Item
-                    label="Customer Email"
-                    name="email"
-                    rules={[
-                        { required: false, type: 'email', message: 'Vui lòng nhập Email hợp lệ!' },
-                    ]}
-                >
-                    <Input placeholder="Nhập Email của khách hàng" />
-                </Form.Item>
-                <Form.Item label="Customer Address" name="address">
-                    <TextArea rows={3} placeholder="Nhập địa chỉ" />
-                </Form.Item>
-
-                <Form.Item wrapperCol={{ offset: 6, span: 16 }}>
-                    <Button
-                        type="default"
-                        htmlType="button"
-                        onClick={() => navigate('/employee/customers')}
-                    >
-                        Back
-                    </Button>
-                    <Button
-                        htmlType="button"
-                        onClick={() => {
-                            form.resetFields();
-                        }}
-                    >
-                        Reset
-                    </Button>
-                    <Button type="primary" htmlType="submit" style={{ marginLeft: '8px' }}>
-                        Submit
-                    </Button>
-                </Form.Item>
-            </Form>
-        </div>
+                <Form layout="vertical" form={form} onFinish={handleSubmit}>
+                    <Form.Item
+                        label="Tên khách hàng"
+                        name="name"
+                        rules={[{ required: true, message: 'Vui lòng nhập tên khách hàng!' }]}
+                    >
+                        <Input placeholder="Nhập tên khách hàng" />
+                    </Form.Item>
+                    <Form.Item
+                        label="Số điện thoại"
+                        name="phoneNumber"
+                        rules={[
+                            { required: true, message: 'Vui lòng nhập số điện thoại!' },
+                            { pattern: /^0\d{9}$/, message: 'Số điện thoại phải gồm 10 số và bắt đầu bằng 0!' },
+                        ]}
+                    >
+                        <Input placeholder="Nhập số điện thoại" />
+                    </Form.Item>
+                    <Form.Item
+                        label="Email"
+                        name="email"
+                        rules={[{ type: 'email', message: 'Vui lòng nhập email hợp lệ!' }]}
+                    >
+                        <Input placeholder="Nhập email (nếu có)" />
+                    </Form.Item>
+                    <Form.Item label="Địa chỉ" name="address">
+                        <TextArea rows={3} placeholder="Nhập địa chỉ của khách hàng" />
+                    </Form.Item>
+                    <Form.Item>
+                        <Button type="default" onClick={() => form.resetFields()}>
+                            Reset
+                        </Button>
+                        <Button type="primary" htmlType="submit" style={{ marginLeft: '8px' }}>
+                            Submit
+                        </Button>
+                    </Form.Item>
+                </Form>
+            </Modal>
+        </>
     );
 };
 
Index: Front-End/swp_interface/src/Pages/Employee_CustomerLayout/components/customerDrop.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\r\nimport { Dropdown, Space, Button } from 'antd';\r\nimport { DownOutlined, PlusCircleOutlined } from '@ant-design/icons';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Color } from 'antd/es/color-picker';\r\n\r\nconst DropDown = () => {\r\n    const navigate = useNavigate();\r\n\r\n    const items = [\r\n        {\r\n            key: '1',\r\n            label: (\r\n                <Button style={{ color: \"#6B7012\" }} icon={<PlusCircleOutlined />}\r\n                    type=\"link\"\r\n                    onClick={() => navigate('/employee/customers/create')}\r\n                >\r\n                    Tạo Mới Customer\r\n                </Button>\r\n            ),\r\n        },\r\n\r\n    ];\r\n\r\n    return (\r\n        <Dropdown\r\n            menu={{\r\n                items,\r\n            }}\r\n            trigger={['click']}\r\n        >\r\n            <a onClick={(e) => e.preventDefault()}>\r\n                <Space>\r\n                    <span style={{ color: \"#6B7012\" }}>Chức Năng Nâng Cao\r\n                        <DownOutlined /></span>\r\n                </Space>\r\n            </a>\r\n        </Dropdown>\r\n    );\r\n};\r\n\r\nexport default DropDown;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Pages/Employee_CustomerLayout/components/customerDrop.js b/Front-End/swp_interface/src/Pages/Employee_CustomerLayout/components/customerDrop.js
--- a/Front-End/swp_interface/src/Pages/Employee_CustomerLayout/components/customerDrop.js	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/Front-End/swp_interface/src/Pages/Employee_CustomerLayout/components/customerDrop.js	(date 1742498244283)
@@ -1,41 +1,51 @@
-import React from 'react';
+import React, { useState, useEffect } from 'react';
 import { Dropdown, Space, Button } from 'antd';
-import { DownOutlined, PlusCircleOutlined } from '@ant-design/icons';
+import { DownOutlined, PlusCircleOutlined, Modal } from '@ant-design/icons';
 import { useNavigate } from 'react-router-dom';
 import { Color } from 'antd/es/color-picker';
+import CustomerIN4Create from './customerCreate';
 
-const DropDown = () => {
-    const navigate = useNavigate();
-
+const DropDown = ({ refreshData }) => {
+    const [isModalVisible, setModalVisible] = useState(false);
+    const openModal = () => setModalVisible(true);
+    const closeModal = () => setModalVisible(false);
     const items = [
         {
             key: '1',
             label: (
-                <Button style={{ color: "#6B7012" }} icon={<PlusCircleOutlined />}
+                <Button
+                    style={{ color: "#6B7012" }}
+                    icon={<PlusCircleOutlined />}
                     type="link"
-                    onClick={() => navigate('/employee/customers/create')}
+                    onClick={openModal} // Gọi hàm mở Modal
                 >
                     Tạo Mới Customer
                 </Button>
             ),
         },
-
     ];
 
     return (
-        <Dropdown
-            menu={{
-                items,
-            }}
-            trigger={['click']}
-        >
-            <a onClick={(e) => e.preventDefault()}>
-                <Space>
-                    <span style={{ color: "#6B7012" }}>Chức Năng Nâng Cao
-                        <DownOutlined /></span>
-                </Space>
-            </a>
-        </Dropdown>
+        <>
+            <Dropdown
+                menu={{
+                    items,
+                }}
+                trigger={['click']}
+            >
+                <a onClick={(e) => e.preventDefault()}>
+                    <Space>
+                        <span style={{ color: "#6B7012" }}>Chức Năng Nâng Cao</span>
+                        <DownOutlined />
+                    </Space>
+                </a>
+            </Dropdown>
+            <CustomerIN4Create
+                isVisible={isModalVisible}
+                closeModal={closeModal}
+                refreshData={refreshData}
+            />
+        </>
     );
 };
 
Index: Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useEffect, useState } from 'react';\r\nimport InvoiceList from './components/invoiceList';\r\nimport InvoiceCreate from './components/invoiceCreate';\r\nimport {\r\n    MenuFoldOutlined,\r\n    MenuUnfoldOutlined,\r\n    UploadOutlined,\r\n    UserOutlined,\r\n    ShopOutlined,\r\n    VideoCameraOutlined,\r\n    InsertRowBelowOutlined,\r\n    TeamOutlined,\r\n} from '@ant-design/icons';\r\nimport logo from '../../assets/img/logoviet.png';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Button, Layout, Menu, theme, Dropdown, notification, message  } from 'antd';\r\nimport './styleInvoices.css';\r\nimport CustomFooter from \"../../Components/Footer\";\r\nimport { useWebSocket } from '../../Utils/Websocket/WebsocketContextProvider';\r\nimport { openNotification } from '../../Utils/AntdNotification';\r\nconst { Header, Sider, Content } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nconst Employee_Invoices = () => {\r\n    const [collapsed, setCollapsed] = useState(false);\r\n    const [selectedMenu, setSelectedMenu] = useState('invoicesList');\r\n    const { messages } = useWebSocket();\r\n    const navigate = useNavigate();\r\n    const [api, contextHolder] = notification.useNotification();\r\n    const {\r\n        token: { colorBgContainer, borderRadiusLG },\r\n    } = theme.useToken();\r\n\r\n    const handleNavigation = (path) => {\r\n        navigate(path);\r\n    };\r\n\r\n    useEffect(()=>{\r\n        if(messages){\r\n            openNotification(api,messages.message)\r\n        }\r\n    },[messages])\r\n\r\n    return (\r\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n            {contextHolder}\r\n            <Layout style={{ minHeight: '100vh' }}>\r\n                <Sider\r\n                    style={{\r\n                        backgroundColor: 'white',\r\n                        color: '#fff',\r\n                    }}\r\n                    trigger={null} collapsible collapsed={collapsed}>\r\n                    <div className=\"demo-logo-vertical\" />\r\n                    <div style={{ height: '80px' }}>\r\n                        <img style={{ width: '90px', marginRight: '100px' }} src={logo} alt=\"logo\" class=\"header__navbar__img\" />\r\n                    </div>\r\n                    <Menu\r\n                        theme=\"light\"\r\n                        mode=\"inline\"\r\n                        defaultSelectedKeys={['4']}\r\n                    >\r\n                        <Menu.Item\r\n                            key=\"1\"\r\n                            icon={<InsertRowBelowOutlined />}\r\n                            onClick={() => handleNavigation('/employee/products')}\r\n                        >\r\n                            Sản Phẩm Gạo\r\n                        </Menu.Item>\r\n                        <Menu.Item\r\n                            key=\"2\"\r\n                            icon={<ShopOutlined />}\r\n                            onClick={() => handleNavigation('/employee/ricezone')}\r\n                        >\r\n                            Khu Vực Gạo\r\n                        </Menu.Item>\r\n                        <Menu.Item\r\n                            key=\"3\"\r\n                            icon={<TeamOutlined />}\r\n                            onClick={() => handleNavigation('/employee/customers')}\r\n                        >\r\n                            Khách Hàng\r\n                        </Menu.Item>\r\n                        <SubMenu key=\"4\" icon={<TeamOutlined />} title=\"Hóa Đơn\" onClick={() => handleNavigation('/employee/invoices')}>\r\n                            <Menu.Item key=\"4-1\" onClick={() => setSelectedMenu('invoicesList')}>\r\n                                Danh Sách Hóa Đơn\r\n                            </Menu.Item>\r\n                            <Menu.Item key=\"4-2\" onClick={() => setSelectedMenu('createInvoice')}>\r\n                                Tạo Hóa Đơn Xuất\r\n                            </Menu.Item>\r\n                            <Menu.Item key=\"4-3\" onClick={() => setSelectedMenu('canceledInvoices')}>\r\n                                Tạo Hóa Đơn Nhập\r\n                            </Menu.Item>\r\n                        </SubMenu>\r\n\r\n                    </Menu>\r\n                </Sider>\r\n                <Layout>\r\n                    <Header\r\n                        style={{\r\n                            padding: 0,\r\n                            background: colorBgContainer,\r\n                        }}\r\n                    >\r\n                        <Button\r\n                            type=\"text\"\r\n                            icon={collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}\r\n                            onClick={() => setCollapsed(!collapsed)}\r\n                            style={{\r\n                                fontSize: '16px',\r\n                                width: 64,\r\n                                height: 64,\r\n                            }}\r\n                        />\r\n                    </Header>\r\n                    <Content\r\n                        style={{\r\n                            margin: '8px 8px',\r\n                            padding: 15,\r\n                            minHeight: 280,\r\n                            background: colorBgContainer,\r\n                            borderRadius: borderRadiusLG,\r\n                        }}\r\n                    >\r\n\r\n                        {selectedMenu === 'invoicesList' && <InvoiceList />}\r\n                        {selectedMenu === 'createInvoice' && <InvoiceCreate />}\r\n                        {selectedMenu === 'canceledInvoices' && <h2>Tạo Hóa Đơn Xuất</h2>}\r\n\r\n                    </Content>\r\n\r\n                </Layout>\r\n            </Layout>\r\n            <CustomFooter />\r\n        </div>\r\n    );\r\n};\r\nexport default Employee_Invoices;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/index.js b/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/index.js
--- a/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/index.js	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/index.js	(date 1742498244288)
@@ -1,6 +1,7 @@
 import React, { useEffect, useState } from 'react';
 import InvoiceList from './components/invoiceList';
 import InvoiceCreate from './components/invoiceCreate';
+import InvoiceCreateToImportRice from './components/invoiceCreateToImportRice';
 import {
     MenuFoldOutlined,
     MenuUnfoldOutlined,
@@ -10,10 +11,11 @@
     VideoCameraOutlined,
     InsertRowBelowOutlined,
     TeamOutlined,
+    SolutionOutlined,
 } from '@ant-design/icons';
 import logo from '../../assets/img/logoviet.png';
 import { useNavigate } from 'react-router-dom';
-import { Button, Layout, Menu, theme, Dropdown, notification, message  } from 'antd';
+import { Button, Layout, Menu, theme, Dropdown, notification, message } from 'antd';
 import './styleInvoices.css';
 import CustomFooter from "../../Components/Footer";
 import { useWebSocket } from '../../Utils/Websocket/WebsocketContextProvider';
@@ -35,11 +37,11 @@
         navigate(path);
     };
 
-    useEffect(()=>{
-        if(messages){
-            openNotification(api,messages.message)
+    useEffect(() => {
+        if (messages) {
+            openNotification(api, messages.message)
         }
-    },[messages])
+    }, [messages])
 
     return (
         <div style={{ display: 'flex', flexDirection: 'column' }}>
@@ -81,7 +83,7 @@
                         >
                             Khách Hàng
                         </Menu.Item>
-                        <SubMenu key="4" icon={<TeamOutlined />} title="Hóa Đơn" onClick={() => handleNavigation('/employee/invoices')}>
+                        <SubMenu key="4" icon={<SolutionOutlined />} title="Hóa Đơn" onClick={() => handleNavigation('/employee/invoices')}>
                             <Menu.Item key="4-1" onClick={() => setSelectedMenu('invoicesList')}>
                                 Danh Sách Hóa Đơn
                             </Menu.Item>
@@ -125,7 +127,7 @@
 
                         {selectedMenu === 'invoicesList' && <InvoiceList />}
                         {selectedMenu === 'createInvoice' && <InvoiceCreate />}
-                        {selectedMenu === 'canceledInvoices' && <h2>Tạo Hóa Đơn Xuất</h2>}
+                        {selectedMenu === 'canceledInvoices' && <InvoiceCreateToImportRice />}
 
                     </Content>
 
Index: Front-End/swp_interface/src/Pages/StoreManagement/StoreInfor/style.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Pages/StoreManagement/StoreInfor/style.css b/Front-End/swp_interface/src/Pages/StoreManagement/StoreInfor/style.css
new file mode 100644
--- /dev/null	(date 1742498244290)
+++ b/Front-End/swp_interface/src/Pages/StoreManagement/StoreInfor/style.css	(date 1742498244290)
@@ -0,0 +1,11 @@
+.upload-wrapper {
+  width: 100%;
+  height: 100px; /* Điều chỉnh chiều cao theo ý muốn */
+}
+
+.upload-wrapper .uploaded-image {
+  width: 100%;
+  height: 100%;
+  object-fit: cover; /* Giúp ảnh lấp đầy mà không méo */
+  border-radius: 8px; /* Tùy chỉnh bo góc */
+}
Index: Front-End/swp_interface/src/Pages/StoreManagement/StoreInfor/UpdateStore.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Pages/StoreManagement/StoreInfor/UpdateStore.js b/Front-End/swp_interface/src/Pages/StoreManagement/StoreInfor/UpdateStore.js
new file mode 100644
--- /dev/null	(date 1742498244290)
+++ b/Front-End/swp_interface/src/Pages/StoreManagement/StoreInfor/UpdateStore.js	(date 1742498244290)
@@ -0,0 +1,270 @@
+import React, { useState, useEffect } from "react";
+import { useParams } from "react-router-dom";
+import { PlusOutlined } from "@ant-design/icons";
+import { Form, Input, Upload, TimePicker, Button, message } from "antd";
+import dayjs from "dayjs";
+import axios from "axios";
+import { getToken } from "../../../Utils/UserInfoUtils";
+import API from "../../../Utils/API/API.js";
+import "./style.css";
+
+const { TextArea } = Input;
+const format = "HH:mm";
+const layout = {
+  labelCol: { span: 8 },
+  wrapperCol: { span: 16 },
+};
+const token = getToken();
+
+const UpdateStore = () => {
+  const { id } = useParams();
+  const [form] = Form.useForm();
+  const [originalStoreData, setOriginalStoreData] = useState(null);
+  const [imageUrl, setImageUrl] = useState(null);
+  const [loading, setLoading] = useState(false);
+  const [uploadingImage, setUploadingImage] = useState(false);
+  const [isModified, setIsModified] = useState(false);
+  const [messageApi, contextHolder] = message.useMessage();
+  const key = "updatingStore";
+
+  // Lấy dữ liệu cửa hàng ban đầu
+  useEffect(() => {
+    axios
+      .get(`http://localhost:9999/manage-store/get-store/${id}`, {
+        headers: {
+          Authorization: `Bearer ${token}`,
+        },
+      })
+      .then((res) => {
+        if (res.status === 200 && res.data.data) {
+          const storeData = res.data.data; // API trả về object store trong key 'data'
+          setOriginalStoreData(storeData);
+          setImageUrl(storeData.image);
+
+          // Chuyển operatingHour từ chuỗi "HH:mm - HH:mm" sang mảng [dayjs, dayjs]
+          let range;
+          if (storeData.operatingHour) {
+            const [start, end] = storeData.operatingHour.split(" - ");
+            range = [dayjs(start, format), dayjs(end, format)];
+          } else {
+            range = [dayjs("00:00", format), dayjs("00:00", format)];
+          }
+
+          // Set dữ liệu vào form
+          form.setFieldsValue({
+            storeName: storeData.storeName,
+            address: storeData.address,
+            hotline: storeData.hotline,
+            description: storeData.description,
+            operatingHour: range,
+          });
+        } else {
+          messageApi.error("Không thể lấy thông tin cửa hàng!");
+        }
+      })
+      .catch(() => {
+        messageApi.error("Lỗi khi lấy thông tin cửa hàng!");
+      });
+  }, [id, form, messageApi]);
+
+  // Hàm upload ảnh, khi upload xong thì cập nhật imageUrl và set uploadingImage về false
+  const handleUpload = async ({ file, onSuccess, onError }) => {
+    setUploadingImage(true);
+    const formData = new FormData();
+    formData.append("file", file);
+
+    try {
+      const res = await axios.post(API.PUBLIC.UPLOAD_IMG, formData, {
+        headers: { "Content-Type": "multipart/form-data" },
+      });
+
+      if (res.data.code === 200) {
+        setImageUrl(res.data.data);
+        setIsModified(true);
+        messageApi.success("Ảnh tải lên thành công!");
+        onSuccess("ok");
+      } else {
+        messageApi.error("Tải ảnh thất bại!");
+        onError(new Error("Upload failed"));
+      }
+    } catch (error) {
+      messageApi.error("Lỗi khi tải ảnh!");
+      onError(error);
+    } finally {
+      setUploadingImage(false);
+    }
+  };
+
+  // Theo dõi các thay đổi của form để bật/tắt nút cập nhật
+  const onValuesChange = (changedValues, allValues) => {
+    if (!originalStoreData) return;
+    const newOperatingHour = allValues.operatingHour
+      ? `${allValues.operatingHour[0].format(
+          format
+        )} - ${allValues.operatingHour[1].format(format)}`
+      : "";
+    // So sánh các trường với dữ liệu gốc (bao gồm ảnh)
+    if (
+      allValues.storeName !== originalStoreData.storeName ||
+      allValues.address !== originalStoreData.address ||
+      allValues.hotline !== originalStoreData.hotline ||
+      allValues.description !== originalStoreData.description ||
+      newOperatingHour !== originalStoreData.operatingHour ||
+      (imageUrl && imageUrl !== originalStoreData.image)
+    ) {
+      setIsModified(true);
+    } else {
+      setIsModified(false);
+    }
+  };
+
+  // Khi submit, chỉ gửi các trường có thay đổi (nếu không thay đổi thì giữ nguyên)
+  const onFinish = async (values) => {
+    setLoading(true);
+    messageApi.open({
+      key,
+      type: "loading",
+      content: "Đang cập nhật cửa hàng...",
+    });
+
+    // Chuyển đổi operatingHour từ mảng dayjs về chuỗi "HH:mm - HH:mm"
+    const newOperatingHour = values.operatingHour
+      ? `${values.operatingHour[0].format(
+          format
+        )} - ${values.operatingHour[1].format(format)}`
+      : "";
+
+    // Tạo payload chỉ chứa các trường có thay đổi
+    const payload = {};
+    payload.storeName = values.storeName;
+    payload.address = values.address;
+    payload.hotline = values.hotline;
+    payload.description = values.description;
+    payload.operatingHour = newOperatingHour;
+    payload.image = imageUrl;
+
+    // Gửi request cập nhật nếu có dữ liệu thay đổi
+    if (Object.keys(payload).length === 0) {
+      messageApi.warning("Không có thay đổi nào để cập nhật.");
+      setLoading(false);
+      return;
+    }
+
+    try {
+      const res = await axios.patch(
+        `http://localhost:9999/manage-store/update-store/${id}`,
+        payload,
+        {
+          headers: {
+            Authorization: `Bearer ${token}`,
+          },
+        }
+      );
+
+      if (res.status === 200) {
+        messageApi.open({
+          key,
+          type: "success",
+          content: "Cập nhật cửa hàng thành công!",
+          duration: 3,
+        });
+
+        // Chuyển hướng sau khi cập nhật thành công
+        setTimeout(() => {}, 3000);
+      } else {
+        messageApi.open({
+          key,
+          type: "error",
+          content: "Cập nhật cửa hàng thất bại!",
+        });
+      }
+    } catch (error) {
+      messageApi.open({
+        key,
+        type: "error",
+        content: "Lỗi khi cập nhật cửa hàng!",
+      });
+    } finally {
+      setLoading(false);
+    }
+  };
+
+  return (
+    <>
+      {contextHolder}
+      <Form
+        {...layout}
+        form={form}
+        name="update-store"
+        onFinish={onFinish}
+        onValuesChange={onValuesChange}
+        style={{ maxWidth: 600 }}
+      >
+        <Form.Item label="Ảnh" required>
+          <Upload
+            customRequest={handleUpload}
+            listType="picture-card"
+            showUploadList={false}
+            className="upload-wrapper"
+          >
+            {imageUrl ? (
+              <img src={imageUrl} alt="store" className="uploaded-image" />
+            ) : (
+              <div>
+                <PlusOutlined />
+                <div style={{ marginTop: 8 }}>Ảnh</div>
+              </div>
+            )}
+          </Upload>
+        </Form.Item>
+        <Form.Item
+          name="storeName"
+          label="Tên cửa hàng"
+          rules={[{ required: true, message: "Vui lòng nhập tên!" }]}
+        >
+          <Input />
+        </Form.Item>
+        <Form.Item
+          name="address"
+          label="Địa chỉ"
+          rules={[{ required: true, message: "Vui lòng nhập địa chỉ!" }]}
+        >
+          <Input />
+        </Form.Item>
+        <Form.Item
+          name="hotline"
+          label="Điện thoại liên hệ"
+          rules={[{ required: true, message: "Vui lòng nhập số điện thoại!" }]}
+        >
+          <Input />
+        </Form.Item>
+        <Form.Item
+          name="operatingHour"
+          label="Giờ hoạt động"
+          rules={[{ required: true, message: "Vui lòng chọn giờ hoạt động!" }]}
+        >
+          <TimePicker.RangePicker format={format} />
+        </Form.Item>
+        <Form.Item
+          name="description"
+          label="Mô tả"
+          rules={[{ required: true, message: "Vui lòng nhập mô tả!" }]}
+        >
+          <TextArea rows={4} />
+        </Form.Item>
+        <Form.Item wrapperCol={{ offset: 8, span: 16 }}>
+          <Button
+            type="primary"
+            htmlType="submit"
+            loading={loading}
+            disabled={!isModified || uploadingImage}
+          >
+            Cập nhật
+          </Button>
+        </Form.Item>
+      </Form>
+    </>
+  );
+};
+
+export default UpdateStore;
Index: swp391/src/main/java/org/group5/swp391/service/VNPayService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.service;\r\n\r\nimport jakarta.servlet.http.HttpServletRequest;\r\n\r\nimport java.io.UnsupportedEncodingException;\r\n\r\npublic interface VNPayService {\r\n    String createPayment(HttpServletRequest request, double amount, String subscriptionPlanId) throws UnsupportedEncodingException;\r\n\r\n    String queryPayment(String vnp_TxnRef, String vnp_TransDate, HttpServletRequest req);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/service/VNPayService.java b/swp391/src/main/java/org/group5/swp391/service/VNPayService.java
--- a/swp391/src/main/java/org/group5/swp391/service/VNPayService.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/service/VNPayService.java	(date 1742498244312)
@@ -3,9 +3,10 @@
 import jakarta.servlet.http.HttpServletRequest;
 
 import java.io.UnsupportedEncodingException;
+import java.util.Map;
 
 public interface VNPayService {
-    String createPayment(HttpServletRequest request, double amount, String subscriptionPlanId) throws UnsupportedEncodingException;
+    String createPayment(HttpServletRequest request, double amount, String subscriptionPlanId, String storeID) throws UnsupportedEncodingException;
 
-    String queryPayment(String vnp_TxnRef, String vnp_TransDate, HttpServletRequest req);
+    Map<String, Object> queryPayment(String vnp_TxnRef, String vnp_TransDate, HttpServletRequest req);
 }
Index: Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/components/invoiceCreateToImportRice.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/components/invoiceCreateToImportRice.js b/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/components/invoiceCreateToImportRice.js
new file mode 100644
--- /dev/null	(date 1742498244284)
+++ b/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/components/invoiceCreateToImportRice.js	(date 1742498244284)
@@ -0,0 +1,26 @@
+import React from 'react';
+import { Layout, Button } from 'antd';
+import InvoiceDetail2 from './invoiceDetail2';
+import '../styleInvoices.css'
+
+
+const { Content } = Layout;
+
+const InvoiceCreateToImportRice = () => {
+    return (
+        <Layout style={{ minHeight: '50vh', display: 'flex', flexDirection: 'column' }}>
+            {/* Phần trên: Thông tin hóa đơn */}
+            <Content className='content_upper' style={{
+                backgroundColor: '#f8f9fa',
+                padding: '10px',
+                borderRight: '1px solid black',
+                borderTop: '1px solid black',
+                borderLeft: '1px solid black',
+            }}>
+                <InvoiceDetail2 />
+            </Content>
+        </Layout>
+    );
+};
+
+export default InvoiceCreateToImportRice;
\ No newline at end of file
Index: Front-End/swp_interface/src/Pages/Employee_CustomerLayout/components/customerList.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Button, Layout, Menu, theme, SearchOutlined, Select, Space, Modal, Dropdown } from 'antd';\r\nimport { ShopOutlined, EditOutlined, DeleteOutlined, SettingOutlined, DisconnectOutlined } from \"@ant-design/icons\";\r\nimport {\r\n    Table,\r\n    Input,\r\n    Spin\r\n} from 'antd';\r\nimport debounce from \"lodash.debounce\";\r\nimport moment from 'moment';\r\nimport DropDown from './customerDrop';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { getToken } from '../../../Utils/UserInfoUtils';\r\nimport API from '../../../Utils/API/API';\r\nimport '../style.css'\r\nconst CustomerList = () => {\r\n    const [loading, setLoading] = useState(true);\r\n    const [customers, setCustomers] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [pageSize, setPageSize] = useState(10);\r\n    const [totalItems, setTotalItems] = useState(0);\r\n    const [sorterState, setSorterState] = useState(null);\r\n    const [modalData, setModalData] = useState([]);\r\n    const [selectedZoneName, setSelectedZoneName] = useState(null);\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [filters, setFilters] = useState({\r\n        phonesearch: null,\r\n    });\r\n    const navigate = useNavigate();\r\n\r\n    const token = getToken();\r\n\r\n    const CustomerColumns = [\r\n        {\r\n            title: 'STT',\r\n            key: 'stt',\r\n            render: (text, record, index) => index + 1,\r\n            width: '2%',\r\n        },\r\n        {\r\n            title: 'Tên',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n\r\n        },\r\n        {\r\n            title: 'SDT',\r\n            dataIndex: 'phoneNumber',\r\n            key: 'phoneNumber',\r\n            width: 70\r\n        },\r\n        {\r\n            title: 'Địa Chỉ',\r\n            dataIndex: 'address',\r\n            key: 'address',\r\n            width: 200\r\n        },\r\n        {\r\n            title: 'Email',\r\n            dataIndex: 'email',\r\n            key: 'email',\r\n            width: 200\r\n        },\r\n        {\r\n            title: 'Tạo Ra Lúc',\r\n            dataIndex: 'created_at',\r\n            key: 'created_at',\r\n            render: (text) => text ? moment(Number(text)).format('DD/MM/YYYY HH:mm:ss') : 'N/A'\r\n        },\r\n        {\r\n            title: 'Chỉnh Sửa Lúc',\r\n            dataIndex: 'updated_at',\r\n            key: 'updated_at',\r\n            render: (text) => text ? moment(Number(text)).format('DD/MM/YYYY HH:mm:ss') : 'N/A'\r\n        },\r\n        {\r\n            title: 'Tạo Bởi ',\r\n            dataIndex: 'created_by',\r\n            key: 'created_by',\r\n            width: 150\r\n        },\r\n        {\r\n            title: \"Cửa Hàng\",\r\n            key: \"actions\",\r\n            render: (text, record) => (\r\n                <div style={{ display: \"flex\", gap: \"10px\" }}>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        icon={<ShopOutlined />}\r\n                        style={{ backgroundColor: \"#1890ff\", borderColor: \"#1890ff\" }}\r\n                        title=\"View Store created\"\r\n\r\n                        onClick={() => {\r\n                            console.log(record)\r\n                            showModal(record)\r\n                        }}\r\n                    />\r\n                    <Button\r\n                        type=\"default\"\r\n                        icon={<SettingOutlined />}\r\n                        style={{ backgroundColor: \"#52c41a\", borderColor: \"#52c41a\", color: \"white\" }}\r\n                        title=\"Customer Settings\"\r\n                        onClick={() => navigate('/employee/customers/edit', { state: record })}\r\n                    />\r\n                    <Button\r\n                        type=\"danger\"\r\n                        icon={<DisconnectOutlined />}\r\n                        style={{ backgroundColor: \"#ff4d4f\", borderColor: \"#ff4d4f\" }}\r\n                        title=\"Customer Disconnect\"\r\n                    />\r\n                </div>\r\n            ),\r\n        }\r\n\r\n    ];\r\n    const StoreIN4columns = [\r\n        {\r\n            title: 'STT',\r\n            key: 'stt',\r\n            render: (text, record, index) => index + 1,\r\n            width: 30,\r\n        },\r\n        {\r\n            title: 'ID Cửa Hàng',\r\n            dataIndex: 'storeID',\r\n            key: 'storeID',\r\n            width: 130,\r\n        },\r\n\r\n        {\r\n            title: 'Hình Ảnh',\r\n            dataIndex: 'image',\r\n            key: 'image',\r\n            width: 100,\r\n        },\r\n        {\r\n            title: 'Tên ',\r\n            dataIndex: 'storeName',\r\n            key: 'name',\r\n            width: 150,\r\n        },\r\n\r\n        {\r\n            title: 'Địa Chỉ',\r\n            dataIndex: 'address',\r\n            key: 'address',\r\n            width: 200,\r\n        },\r\n        {\r\n            title: 'Hotline',\r\n            dataIndex: 'hotline',\r\n            key: 'hotline',\r\n            width: 120,\r\n        },\r\n        {\r\n            title: 'Giờ Mở Cửa',\r\n            dataIndex: 'operatingHour',\r\n            key: 'operatingHour',\r\n            width: 170,\r\n        },\r\n        {\r\n            title: 'Trạng Thái',\r\n            dataIndex: 'operatingHour',\r\n            key: 'operatingHour',\r\n            render: (text, record) => {\r\n                const currentTime = moment();\r\n                const [start, end] = text.split('-');\r\n                const startTime = moment(start, 'h A');\r\n                const endTime = moment(end, 'h A');\r\n                const isOpen = currentTime.isBetween(startTime, endTime);\r\n\r\n\r\n                return (\r\n                    <span style={{ color: isOpen ? 'green' : 'red', fontWeight: 'bold' }}>\r\n                        {isOpen ? 'Cửa Hàng Đang Mở' : 'Cửa Hàng Đã Đóng'}\r\n                    </span>\r\n                );\r\n            },\r\n        },\r\n\r\n\r\n\r\n\r\n    ];\r\n    const handleTableChange = (pagination) => {\r\n        const { current, pageSize } = pagination;\r\n\r\n        setCurrentPage(current);\r\n        setPageSize(pageSize);\r\n        //handleSearch(current, pageSize);\r\n    };\r\n    const handleFilterSubmit = () => {\r\n        fetchZone(currentPage, pageSize, filters\r\n            //null, searchTerm\r\n        );\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        fetchZone(currentPage, pageSize, filters\r\n            // null, searchTerm\r\n        );\r\n    }, [currentPage, pageSize, filters]);\r\n    const fetchZone = async (page, size,\r\n        filters,\r\n        // sorter, search\r\n    ) => {\r\n        // const { field, order } = sorter || sorterState || {};\r\n\r\n        try {\r\n            const response = await axios.get(API.EMPLOYEE.GET_ALL_CUSTOMER, {\r\n\r\n                params: {\r\n                    page: page - 1,\r\n                    size: size,\r\n                    phonesearch: filters ? filters.phonesearch : null,\r\n                    // quantityMax: filters ? filters.quantityMax : null,\r\n                    // sizeMin: filters ? filters.sizeMin : null,\r\n                    // sizeMax: filters ? filters.sizeMax : null,\r\n                    // sortBy: field,\r\n                    // sortOrder: order || false,\r\n                    // search: search || \"\",\r\n\r\n                },\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`, // Chèn token vào header\r\n                },\r\n            });\r\n            console.log(\"Dữ liệu liên quan22:\", response.data);\r\n            console.log(response.data.content)\r\n            setCustomers(response.data.content);\r\n            setTotalItems(response.data.totalElements);\r\n            setLoading(false); //false la trang thai  loading data xong\r\n\r\n        } catch (error) {\r\n            console.error('nổ rồi các cháu ơi, lỗi lỗi lỗi', error)\r\n            setLoading(false);\r\n        }\r\n\r\n    }\r\n    const showModal = (zone) => {\r\n        console.log(\"zone : \" + zone)\r\n        console.log(\"check zone :\" + zone.employeeStoreDTO)\r\n        setModalData(zone.employeeStoreDTO ? [zone.employeeStoreDTO] : []);\r\n        setSelectedZoneName(zone.name);\r\n        setIsModalVisible(true);\r\n    };\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n    const handleFilterChange = debounce((type, value) => {\r\n        setFilters({ ...filters, [type]: value });\r\n    }, 1000)\r\n\r\n    return (\r\n        <>\r\n            <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", padding: \"0 15px\" }}>\r\n                <h3><i style={{ marginLeft: 15, color: \"#E3C584\" }}>Danh Sách Khách Hàng  </i></h3>\r\n                <Space size=\"middle\">\r\n                    <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"flex-start\", gap: \"20px\" }}>\r\n                        <Input\r\n                            placeholder=\"Tìm SDT\"\r\n                            maxLength={10}\r\n                            style={{ width: 220 }}\r\n                            allowClear onChange={(e) => handleFilterChange('phonesearch', e.target.value)}\r\n\r\n                        />\r\n                    </div>\r\n                    <Button type=\"primary\" onClick={handleFilterSubmit} >\r\n                        Tìm Kiếm\r\n                    </Button>\r\n\r\n                </Space>\r\n\r\n            </div>\r\n            <div style={{ marginLeft: 1250, marginTop: 15 }}> <DropDown /></div>\r\n            {loading ? (<Spin size=\"large\" />) : (\r\n                <Table style={{ marginTop: 25 }}\r\n                    dataSource={customers}\r\n                    columns={CustomerColumns}\r\n                    // rowClassName={(record) =>\r\n                    //     record.quantity === 0 ? \"row-red\" : \"\"\r\n                    // }\r\n\r\n                    pagination={{\r\n                        current: currentPage,\r\n                        pageSize: pageSize,\r\n                        total: totalItems,\r\n                        showSizeChanger: true,\r\n                        pageSizeOptions: ['1', '5', '10'],\r\n                        // onChange: (page, size) => {\r\n                        //     setCurrentPage(page);\r\n                        //     setPageSize(size);\r\n                        //     fetchZone(page, size, filters, null, searchTerm);\r\n                        // },\r\n                    }}\r\n                    onChange={handleTableChange}\r\n                    className=\"custom-table\"\r\n                />\r\n            )}\r\n            <Modal\r\n                title={<span style={{ fontWeight: 500, fontSize: '18px', color: \"#E3C584\" }}> Cửa Hàng Đã Tạo Cho : {selectedZoneName}</span>}\r\n                open={isModalVisible}\r\n                onOk={handleOk}\r\n                onCancel={handleCancel}\r\n                footer={[\r\n                    <Button key=\"back\" onClick={handleCancel}>\r\n                        Đóng\r\n                    </Button>,\r\n                ]}\r\n                style={{ top: 300, left: 40 }}\r\n                width=\"75%\"\r\n                bodyStyle={{ height: '10vh' }}\r\n            >\r\n                <Table\r\n                    dataSource={modalData}\r\n                    columns={StoreIN4columns}\r\n                    rowKey={(record) => record.storeID}\r\n                    pagination={false}\r\n                />\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CustomerList;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Pages/Employee_CustomerLayout/components/customerList.js b/Front-End/swp_interface/src/Pages/Employee_CustomerLayout/components/customerList.js
--- a/Front-End/swp_interface/src/Pages/Employee_CustomerLayout/components/customerList.js	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/Front-End/swp_interface/src/Pages/Employee_CustomerLayout/components/customerList.js	(date 1742498244283)
@@ -1,6 +1,6 @@
 import React, { useState, useEffect } from 'react';
 import axios from 'axios';
-import { Button, Layout, Menu, theme, SearchOutlined, Select, Space, Modal, Dropdown } from 'antd';
+import { Button, Layout, Menu, theme, SearchOutlined, Select, Space, Modal, Dropdown, Form, message } from 'antd';
 import { ShopOutlined, EditOutlined, DeleteOutlined, SettingOutlined, DisconnectOutlined } from "@ant-design/icons";
 import {
     Table,
@@ -14,6 +14,8 @@
 import { getToken } from '../../../Utils/UserInfoUtils';
 import API from '../../../Utils/API/API';
 import '../style.css'
+
+const { TextArea } = Input;
 const CustomerList = () => {
     const [loading, setLoading] = useState(true);
     const [customers, setCustomers] = useState([]);
@@ -24,12 +26,18 @@
     const [modalData, setModalData] = useState([]);
     const [selectedZoneName, setSelectedZoneName] = useState(null);
     const [isModalVisible, setIsModalVisible] = useState(false);
+    const [isEditModalVisible, setIsEditModalVisible] = useState(false);
+    const [selectedCustomer, setSelectedCustomer] = useState(null);
     const [filters, setFilters] = useState({
         phonesearch: null,
     });
     const navigate = useNavigate();
-
+    const refreshData = () => {
+        fetchZone(currentPage || 1, pageSize || 10, filters || {});
+    };
     const token = getToken();
+    const [form] = Form.useForm();
+
 
     const CustomerColumns = [
         {
@@ -101,7 +109,7 @@
                         icon={<SettingOutlined />}
                         style={{ backgroundColor: "#52c41a", borderColor: "#52c41a", color: "white" }}
                         title="Customer Settings"
-                        onClick={() => navigate('/employee/customers/edit', { state: record })}
+                        onClick={() => showEditModal(record)}
                     />
                     <Button
                         type="danger"
@@ -186,8 +194,8 @@
     const handleTableChange = (pagination) => {
         const { current, pageSize } = pagination;
 
-        setCurrentPage(current);
-        setPageSize(pageSize);
+        setCurrentPage(current || 1);
+        setPageSize(pageSize || 10);
         //handleSearch(current, pageSize);
     };
     const handleFilterSubmit = () => {
@@ -198,16 +206,11 @@
 
 
     useEffect(() => {
-        fetchZone(currentPage, pageSize, filters
-            // null, searchTerm
-        );
+        fetchZone(currentPage, pageSize, filters);
     }, [currentPage, pageSize, filters]);
-    const fetchZone = async (page, size,
-        filters,
-        // sorter, search
-    ) => {
+    const fetchZone = async (page, size, filters,) => {
         // const { field, order } = sorter || sorterState || {};
-
+        console.log("fetchZone được gọi với các tham số:", { page, size, filters });
         try {
             const response = await axios.get(API.EMPLOYEE.GET_ALL_CUSTOMER, {
 
@@ -252,6 +255,53 @@
     const handleCancel = () => {
         setIsModalVisible(false);
     };
+    const showEditModal = (record) => {
+        setSelectedCustomer(record);
+        form.setFieldsValue({
+            name: record.name,
+            phoneNumber: record.phoneNumber,
+            email: record.email,
+            address: record.address,
+        });
+        setIsEditModalVisible(true);
+    };
+    const handleEditOk = () => {
+        form.submit();
+    };
+
+    const handleEditCancel = () => {
+        setIsEditModalVisible(false);
+        form.resetFields();
+    };
+    const handleEditSubmit = async (values) => {
+        try {
+            const requestData = {
+                customerID: selectedCustomer.customerID,
+                name: values.name,
+                phoneNumber: values.phoneNumber,
+                email: values.email,
+                address: values.address,
+                updatedAt: moment().format('YYYY-MM-DDTHH:mm:ss'),
+            };
+
+            const response = await axios.put(
+                API.EMPLOYEE.UPDATE_USER(selectedCustomer.customerID),
+                requestData,
+                { headers: { Authorization: `Bearer ${token}` } }
+            );
+
+            if (response.status === 200 || response.status === 204) {
+                message.success('Cập nhật thông tin khách hàng thành công!');
+                setIsEditModalVisible(false);
+                refreshData();
+            } else {
+                message.error('Có lỗi xảy ra, vui lòng thử lại!');
+            }
+        } catch (error) {
+            console.error('Lỗi khi cập nhật:', error);
+            message.error('Không thể cập nhật thông tin khách hàng!');
+        }
+    };
     const handleFilterChange = debounce((type, value) => {
         setFilters({ ...filters, [type]: value });
     }, 1000)
@@ -277,7 +327,7 @@
                 </Space>
 
             </div>
-            <div style={{ marginLeft: 1250, marginTop: 15 }}> <DropDown /></div>
+            <div style={{ marginLeft: 1250, marginTop: 15 }}> <DropDown refreshData={fetchZone} /></div>
             {loading ? (<Spin size="large" />) : (
                 <Table style={{ marginTop: 25 }}
                     dataSource={customers}
@@ -322,6 +372,50 @@
                     rowKey={(record) => record.storeID}
                     pagination={false}
                 />
+            </Modal>
+            <Modal
+                title={<span style={{ fontWeight: 500, fontSize: '18px', color: "#E3C584" }}>Chỉnh sửa thông tin khách hàng</span>}
+                open={isEditModalVisible}
+                onOk={handleEditOk}
+                onCancel={handleEditCancel}
+                okText="Lưu"
+                cancelText="Hủy"
+            >
+                <Form
+                    form={form}
+                    labelCol={{ span: 6 }}
+                    wrapperCol={{ span: 16 }}
+                    layout="horizontal"
+                    onFinish={handleEditSubmit}
+                >
+                    <Form.Item
+                        label="Tên"
+                        name="name"
+                        rules={[{ required: true, message: 'Vui lòng nhập tên!' }]}
+                    >
+                        <Input placeholder="Nhập tên khách hàng" />
+                    </Form.Item>
+                    <Form.Item
+                        label="SĐT"
+                        name="phoneNumber"
+                        rules={[
+                            { required: true, message: 'Vui lòng nhập số điện thoại!' },
+                            { pattern: /^0\d{9}$/, message: 'Vui lòng nhập 10 số và bắt đầu từ 0' },
+                        ]}
+                    >
+                        <Input placeholder="Nhập số điện thoại" />
+                    </Form.Item>
+                    <Form.Item
+                        label="Email"
+                        name="email"
+                        rules={[{ type: 'email', message: 'Vui lòng nhập Email hợp lệ!' }]}
+                    >
+                        <Input placeholder="Nhập Email của khách hàng" />
+                    </Form.Item>
+                    <Form.Item label="Địa chỉ" name="address">
+                        <TextArea rows={3} placeholder="Nhập địa chỉ" />
+                    </Form.Item>
+                </Form>
             </Modal>
         </>
     )
Index: Front-End/swp_interface/src/Pages/Employee_ProductLayout/ProductIndex.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>.custom-table .ant-table-thead>tr>th {\r\n    background-color: #6B7012;\r\n    /* Màu nền tiêu đề */\r\n    color: #fff;\r\n    /* Màu chữ (trắng để dễ đọc) */\r\n    text-align: center;\r\n    /* Căn giữa nội dung trong tiêu đề */\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Pages/Employee_ProductLayout/ProductIndex.css b/Front-End/swp_interface/src/Pages/Employee_ProductLayout/ProductIndex.css
--- a/Front-End/swp_interface/src/Pages/Employee_ProductLayout/ProductIndex.css	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/Front-End/swp_interface/src/Pages/Employee_ProductLayout/ProductIndex.css	(date 1742498244289)
@@ -5,4 +5,55 @@
     /* Màu chữ (trắng để dễ đọc) */
     text-align: center;
     /* Căn giữa nội dung trong tiêu đề */
+}
+
+/* Tùy chỉnh container của bộ lọc */
+.filter-container {
+    display: flex;
+    align-items: center;
+    justify-content: center;
+    margin: 20px 0;
+    gap: 20px;
+    padding: 10px;
+    background-color: #fffbe6;
+    /* Màu nền nhẹ nhàng */
+    border: 1px solid #e3c584;
+    /* Viền nhấn */
+    border-radius: 10px;
+    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
+    /* Đổ bóng */
+}
+
+/* Nút lọc */
+.filter-container button {
+    background-color: #e3c584;
+    /* Màu vàng nhấn */
+    color: #6B7012;
+    font-weight: bold;
+    border: none;
+    padding: 8px 16px;
+    border-radius: 5px;
+    transition: background-color 0.3s ease;
+}
+
+.filter-container button:hover {
+    background-color: #d4b76d;
+    /* Màu tối hơn khi hover */
+    color: white;
+    /* Chữ màu trắng */
+}
+
+/* Input tìm kiếm */
+.filter-container input {
+    padding: 8px;
+    border-radius: 5px;
+    border: 1px solid #ccc;
+    width: 150px;
+    transition: border-color 0.3s ease;
+}
+
+.filter-container input:focus {
+    outline: none;
+    border-color: #e3c584;
+    box-shadow: 0 0 5px rgba(227, 197, 132, 0.6);
 }
\ No newline at end of file
Index: Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/components/invoiceDetail2.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/components/invoiceDetail2.js b/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/components/invoiceDetail2.js
new file mode 100644
--- /dev/null	(date 1742498244286)
+++ b/Front-End/swp_interface/src/Pages/Employee_InvoiceLayout/components/invoiceDetail2.js	(date 1742498244286)
@@ -0,0 +1,954 @@
+import React, { useState, useEffect } from 'react';
+import InvoiceCustomerCreate from './invoiceCustomerCreate';
+import { Radio, Tabs, Select, Button, Spin, Table, InputNumber, Input, Layout, Form, Modal, message, notification } from 'antd';
+import { SettingOutlined } from '@ant-design/icons';
+import axios from 'axios';
+import API from '../../../Utils/API/API';
+import { getToken } from '../../../Utils/UserInfoUtils';
+import { Content } from 'antd/es/layout/layout';
+import { success, error } from '../../../Utils/AntdNotification';
+import TextArea from 'antd/es/input/TextArea';
+
+const InvoiceDetail2 = () => {
+    // của tạo mới Invoice
+    const [size, setSize] = useState('small');
+    const [activeKey, setActiveKey] = useState('1');
+    const [options, setOptions] = useState([]);
+    const [loading, setLoading] = useState(false);
+    const [items, setItems] = useState([]);
+    const [selectedProduct, setSelectedProduct] = useState([]);
+    const [errorMessage, setErrorMessage] = useState("");
+    const [totalAmount, setTotalAmount] = useState(0);
+    const [discount, setDiscount] = useState(0);
+    const [customerPayment, setCustomerPayment] = useState(0);
+    const [totalwithoutdiscount, setTotalWithoutDiscount] = useState(0);
+    const [packageOptions, setPackageOptions] = useState([]);
+
+    // của thông tin khách hàng 
+    const [options2, setOptions2] = useState([]);
+    const [customerName, setCustomerName] = useState('');
+    const [open, setOpen] = useState(false);
+    const [externalPhoneNumber, setExternalPhoneNumber] = useState('');
+    const [externaName, setExternalName] = useState('');
+
+    //của chỉnh sửa khách hàng 
+    const [isModalVisible, setIsModalVisible] = useState(false);
+    const [form] = Form.useForm();
+    const [messageApi, contextHolder] = message.useMessage();
+    const token = getToken();
+
+    const showDrawer = () => {
+        setOpen(true);
+    };
+    const onClose = () => {
+        setOpen(false);
+    };
+    const openNotificationWithIcon = (type, title, description) => {
+        messageApi[type]({
+            message: title,
+            description: description,
+            placement: 'bottomRight',
+        });
+    };
+    const showModal = () => {
+        setIsModalVisible(true);
+    };
+    const handleOk = () => {
+        form.validateFields().then((values) => {
+
+            axios.put(
+                API.EMPLOYEE.INVOICE_UPDATE_USER(values.phoneNumber),
+                {
+                    phoneNumber: values.phoneNumber,
+                    phoneNumberNew: values.phoneNumberNew,
+                    name: values.name,
+                },
+                {
+                    headers: {
+                        Authorization: `Bearer ${token}`,
+                    },
+                }
+            ).then((response) => {
+                setItems((prevItems) =>
+                    prevItems.map((item) =>
+                        item.key === activeKey
+                            ? {
+                                ...item,
+                                customerPhone: values.phoneNumberNew,
+                                customerName: values.name,
+                            }
+                            : item
+                    )
+                );
+                fetchData2();
+                setIsModalVisible(false);
+                form.resetFields();
+                success("Cập nhật khách hàng thành công", messageApi);
+            }).catch((err) => {
+                error(err.response.data.message || "Tạo mới tài khoản thất bại.", messageApi);
+            });
+        })
+    };
+    const handleCancel = () => {
+        setIsModalVisible(false);
+        form.resetFields();
+    };
+    const handleCustomerCreated = (phoneNumber, name) => {
+        setExternalPhoneNumber(phoneNumber);
+        setExternalName(name);
+        setItems(prevItems =>
+            prevItems.map(item =>
+                item.key === activeKey
+                    ? { ...item, customerPhone: phoneNumber, customerName: name }
+                    : item
+            )
+        );
+        console.log('Số điện thoại từ component con là là là:', phoneNumber);
+    };
+    const calculateTotalWithoutDiscount = (dataSource) => {
+        return dataSource.reduce((sum, item) => {
+            return sum + (item.quantity * item.price);
+        }, 0);
+    };
+    const calculateTotalSellPrice = (dataSource) => {
+        if (!dataSource || !Array.isArray(dataSource)) return 0;
+        return dataSource.reduce((sum, item) => {
+            return sum + (item.quantity * (item.pricePay || item.price));
+        }, 0);
+    };
+    const calculateTotalDiscount = (dataSource) => {
+        return dataSource.reduce((sum, item) => sum + (item.discount * item.quantity || 0), 0);
+    };
+
+    const calculateProductTotal = (dataSource) => {
+        if (!dataSource || !Array.isArray(dataSource)) return 0;
+        return dataSource.reduce((sum, item) => {
+            const itemTotal = (item.quantity || 0) * (item.pricePay || 0) - ((item.discount || 0) * (item.quantity || 0));
+            return sum + itemTotal;
+        }, 0);
+    };
+
+    const calculateTotalAmount = (dataSource, moneyShip) => {
+        const productTotal = calculateProductTotal(dataSource);
+        return productTotal + (dataSource && dataSource.length > 0 ? (moneyShip || 0) : 0);
+    };
+    const calculateFinalAmount = () => {
+        const activeTab = items.find(item => item.key === activeKey);
+        if (!activeTab) return 0;
+        const baseAmount = calculateTotalAmount(activeTab.children.props.dataSource, activeTab.moneyShip || 0);
+        return baseAmount - (discount || 0);
+    };
+
+    const calculateChange = () => {
+        const finalAmount = calculateFinalAmount();
+        return customerPayment - finalAmount >= 0 ? customerPayment - finalAmount : 0;
+    };
+    const columns = [
+        {
+            title: 'Lựa chọn',
+            key: 'option',
+            render: (text, record) => (
+                <Button type="link" danger onClick={() => handleDeleteRow(record.key)}>
+                    <i class="bi bi-trash"></i>
+                </Button>
+            ),
+        },
+        {
+            title: 'Mã Sản Phẩm',
+            dataIndex: 'productID',
+            key: 'productID',
+        },
+        {
+            title: 'Tên sản phẩm',
+            dataIndex: 'name',
+            key: 'name',
+        },
+        {
+            title: 'Discount/Kg ',
+            key: 'discount',
+            render: (text, record) => (
+                <InputNumber
+                    defaultValue={0}
+                    min={0}
+                    value={record.discount}
+                    onChange={(value) => handleInputChange2(value, record.key, 'discount')}
+                    formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
+                    parser={value => value.replace(/\$\s?|(,*)/g, '')}
+                />
+            ),
+        },
+        {
+            title: 'Số lượng',
+            dataIndex: 'quantity',
+            key: 'quantity',
+            render: (text, record) => (
+                <InputNumber
+                    defaultValue={1}
+                    min={1}
+                    value={record.quantity}
+                    onChange={(value) => handleInputChange(value, record.key, 'quantity')}
+                />
+            ),
+        },
+        {
+            title: 'Đóng Gói',
+            dataIndex: 'packageId',
+            key: 'packageId',
+            render: (text, record) => (
+                <Select
+                    style={{ width: 120 }}
+                    value={record.packageId}
+                    onChange={(value) => handlePackageChange(value, record.key)}
+                    options={packageOptions}
+                    placeholder="Chọn đơn vị"
+                    loading={loading}
+                />
+            ),
+        },
+        {
+            title: 'Giá nhập/kg',
+            dataIndex: 'pricePay',
+            key: 'pricePay',
+            render: (text, record) => (
+                <InputNumber
+                    defaultValue={record.price}
+                    min={0}
+                    value={record.pricePay}
+                    onChange={(value) => handleInputChange(value, record.key, 'pricePay')}
+                    formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
+                    parser={value => value.replace(/\$\s?|(,*)/g, '')}
+                />
+            ),
+        },
+        {
+            title: 'Thành tiền(VND)',
+            dataIndex: 'total',
+            key: 'total',
+            render: (text) => (text || 0).toLocaleString(),
+        },
+    ];
+    const handleInputChange = (value, key, field) => {
+        let finalValue;
+        if (field === 'quantity') {
+            finalValue = value === null || value < 1 ? 1 : value; // Số lượng tối thiểu là 1
+        } else {
+            finalValue = value === null || value < 0 ? 0 : value; // Giá nhập tối thiểu là 0
+        }
+        setItems(prevItems =>
+            prevItems.map(item => {
+                if (item.key === activeKey) {
+                    const updatedDataSource = item.children.props.dataSource.map(row =>
+                        row.key === key
+                            ? {
+                                ...row,
+                                [field]: finalValue,
+                                total:
+                                    // finalValue * row.pricePay -
+                                    // (row.discount * finalValue || 0) +
+                                    // (row.moneyShip * finalValue || 0),
+                                    field === 'quantity'
+                                        ? finalValue * (row.pricePay || 0) - (row.discount * finalValue || 0)
+                                        : row.quantity * (field === 'pricePay' ? finalValue : row.pricePay || 0) - (row.discount * row.quantity || 0),
+                            }
+                            : row
+                    );
+                    setTotalAmount(calculateProductTotal(updatedDataSource));
+                    setTotalWithoutDiscount(calculateTotalWithoutDiscount(updatedDataSource));
+
+                    return {
+                        ...item,
+                        children: (
+                            <Table
+                                columns={columns}
+                                pagination={false}
+                                dataSource={updatedDataSource}
+                                size={size}
+                            />
+                        ),
+                    };
+                }
+                return item;
+            })
+        );
+    };
+
+    const handleInputChange2 = (value, key, field) => {
+        const finalValue = value === null || value < 0 ? 0 : value;
+        setItems(prevItems =>
+            prevItems.map(item => {
+                if (item.key === activeKey) {
+                    const updatedDataSource = item.children.props.dataSource.map(row =>
+                        row.key === key
+                            ? {
+                                ...row,
+                                [field]: finalValue,
+                                total: row.quantity * (row.pricePay || 0) - (finalValue * row.quantity || 0),
+                            }
+                            : row
+                    );
+                    setTotalAmount(calculateProductTotal(updatedDataSource));
+                    setTotalWithoutDiscount(calculateTotalWithoutDiscount(updatedDataSource));
+
+                    return {
+                        ...item,
+                        children: (
+                            <Table
+                                columns={columns}
+                                dataSource={updatedDataSource}
+                                pagination={false}
+                                size={size}
+                            />
+                        ),
+                    };
+                }
+                return item;
+            })
+        );
+    };
+    const handlePackageChange = (value, key) => {
+        setItems(prevItems =>
+            prevItems.map(item => {
+                if (item.key === activeKey) {
+                    const updatedDataSource = item.children.props.dataSource.map(row =>
+                        row.key === key
+                            ? { ...row, packageId: value }
+                            : row
+                    );
+                    return {
+                        ...item,
+                        children: (
+                            <Table
+                                columns={columns}
+                                pagination={false}
+                                dataSource={updatedDataSource}
+                                size={size}
+                            />
+                        ),
+                    };
+                }
+                return item;
+            })
+        );
+    };
+
+    const addProductToTab = () => {
+        if (!selectedProduct || selectedProduct.length === 0) {
+            setErrorMessage("Chưa chọn sản phẩm nào");
+            return;
+        }
+        if (!activeKey || items.length === 0) {
+            setErrorMessage("Chưa có tab nào để thêm sản phẩm");
+            return;
+        }
+        if (!selectedProduct.productID || !selectedProduct.label || !selectedProduct.price) {
+            setErrorMessage("Thông tin sản phẩm không đầy đủ");
+            return;
+        }
+        setErrorMessage("");
+
+        const newItems = items.map(item => {
+            if (item.key === activeKey) {
+                const existingProducts = item.children.props.dataSource || [];
+                const productIndex = existingProducts.findIndex(p => p.name === selectedProduct.label);
+
+                let updatedDataSource;
+                if (productIndex !== -1) {
+                    updatedDataSource = existingProducts.map((product, index) =>
+                        index === productIndex
+                            ? {
+                                ...product,
+                                quantity: product.quantity + 1,
+                                total: (product.quantity + 1) * (product.pricePay || product.price) - (product.discount * (product.quantity + 1) || 0),
+                            }
+                            : product
+                    );
+                } else {
+                    updatedDataSource = [
+                        ...existingProducts,
+                        {
+                            key: Date.now().toString(),
+                            name: selectedProduct.label,
+                            quantity: 1,
+                            price: selectedProduct.price,
+                            pricePay: selectedProduct.price,
+                            image: selectedProduct.image,
+                            productID: selectedProduct.productID,
+                            discount: 0,
+                            total: 1 * selectedProduct.price,
+                            packageId: packageOptions.length > 0 ? packageOptions[0].value : undefined,
+                        },
+                    ];
+                }
+                setTotalAmount(calculateProductTotal(updatedDataSource));
+                setTotalWithoutDiscount(calculateTotalWithoutDiscount(updatedDataSource));
+
+                return {
+                    ...item,
+                    children: (
+                        <Table
+                            columns={columns}
+                            dataSource={updatedDataSource}
+                            pagination={false}
+                            size={size}
+                            rowClassName={() => (size === 'large' ? 'large-row' : 'small-row')}
+                        />
+                    ),
+                };
+            }
+            return item;
+        });
+
+        setItems(newItems);
+    };
+    const handleDeleteRow = (key) => {
+        setItems(prevItems =>
+            prevItems.map(item => {
+                if (item.key === activeKey) {
+                    const updatedDataSource = item.children.props.dataSource.filter(row => row.key !== key);
+                    setTotalAmount(calculateProductTotal(updatedDataSource));
+                    setTotalWithoutDiscount(calculateTotalWithoutDiscount(updatedDataSource));
+
+                    return {
+                        ...item,
+                        children: (
+                            <Table
+                                columns={columns}
+                                dataSource={updatedDataSource}
+                                pagination={false}
+                                size={size}
+                            />
+                        ),
+                    };
+                }
+                return item;
+            })
+        );
+    };
+
+
+
+
+    const add = () => {
+        const newKey = Date.now().toString();
+        setItems([
+            ...(items || []),
+            {
+                label: `New Tab`,
+                key: newKey,
+                customerPhone: '',
+                customerName: '',
+                description: '',
+                customerPayment: 0,
+                moneyShip: 0,
+                children: (
+                    <Table
+                        columns={columns}
+                        dataSource={[]}
+                        pagination={false}
+                        size={size}
+                        rowClassName={() => size === 'large' ? 'large-row' : 'small-row'}
+                    />
+                ),
+            },
+        ]);
+        setActiveKey(newKey);
+        setTotalAmount(0);
+        setTotalWithoutDiscount(0);
+        setDiscount(0);
+        setCustomerPayment(0);
+        setExternalPhoneNumber('');
+        setExternalName('');
+    };
+    const remove = (targetKey) => {
+        if (!items) return;
+        const targetIndex = items.findIndex((item) => item.key === targetKey);
+        const newItems = items.filter((item) => item.key !== targetKey);
+        if (newItems.length && targetKey === activeKey) {
+            const newActiveKey =
+                newItems[targetIndex === newItems.length ? targetIndex - 1 : targetIndex].key;
+            setActiveKey(newActiveKey);
+            const activeTabDataSource = newItems.find(item => item.key === newActiveKey)?.children.props.dataSource || [];
+            setTotalAmount(calculateProductTotal(activeTabDataSource));
+            setTotalWithoutDiscount(calculateTotalWithoutDiscount(activeTabDataSource));
+
+        } else if (newItems.length === 0) {
+            setTotalAmount(0);
+            setTotalWithoutDiscount(0);
+            setDiscount(0);
+            setCustomerPayment(0);
+        }
+        setItems(newItems);
+    };
+    const onTabChange = (key) => {
+        setActiveKey(key);
+        const activeTab = items.find(item => item.key === key);
+        if (activeTab) {
+            setTotalAmount(calculateProductTotal(activeTab.children.props.dataSource));
+            setTotalWithoutDiscount(calculateTotalWithoutDiscount(activeTab.children.props.dataSource));
+            setCustomerPayment(activeTab.customerPayment || 0);
+        } else {
+            setTotalAmount(0);
+            setTotalWithoutDiscount(0);
+            setCustomerPayment(0);
+        }
+    };
+    const handleDescriptionChange = (e) => {
+        const newDescription = e.target.value;
+        setItems(prevItems =>
+            prevItems.map(item =>
+                item.key === activeKey
+                    ? { ...item, description: newDescription }
+                    : item
+            )
+        );
+    };
+
+    const handleCustomerChange = (phone, option) => {
+        const customerName = option ? option.name : '';
+        setExternalPhoneNumber('');
+        setExternalName('');
+        setItems(prevItems =>
+            prevItems.map(item =>
+                item.key === activeKey
+                    ? { ...item, customerPhone: phone, customerName }
+                    : item
+            )
+        );
+    };
+
+    const handleCustomerNameChange = (e) => {
+        const newName = e.target.value;
+        setItems(prevItems =>
+            prevItems.map(item =>
+                item.key === activeKey
+                    ? { ...item, customerName: newName }
+                    : item
+            )
+        );
+    };
+    const currentTab = items.find(item => item.key === activeKey) || { customerPhone: '', customerName: '' };
+    const onEdit = (targetKey, action) => {
+        if (action === 'add') {
+            add();
+        } else {
+            remove(targetKey);
+        }
+    };
+    const onChange = (e) => {
+        setSize(e.target.value);
+    };
+
+    const fetchData = (searchValue = "") => {
+        setLoading(true);
+        axios.get(API.EMPLOYEE.GET_PRODUCTS_BY_NAMElist, {
+            params: {
+                name: searchValue,
+            },
+            headers: {
+                Authorization: `Bearer ${token}`,
+            },
+        })
+            .then(response => {
+                const formattedOptions = response.data.map(item => ({
+                    value: item.name,
+                    label: item.name,
+                    price: item.price,
+                    productID: item.productID,
+                    image: item.productImage,
+                }));
+                setOptions(formattedOptions);
+            })
+            .catch(error => {
+                console.error("Lỗi khi lấy dữ liệu:", error);
+            })
+            .finally(() => {
+                setLoading(false);
+            });
+    };
+    const fetchData2 = (searchValue = "") => {
+        setLoading(true);
+        axios.get(API.EMPLOYEE.GET_ALL_CUSTOMERlist, {
+            params: {
+                phonesearch: searchValue,
+            },
+            headers: {
+                Authorization: `Bearer ${token}`,
+            },
+        })
+            .then(response => {
+                const formattedOptions = response.data.map(item => ({
+                    value: item.phoneNumber,
+                    label: `${item.phoneNumber} - ${item.name}`,
+                    name: item.name
+                }));
+                setOptions2(formattedOptions);
+            })
+            .catch(error => {
+                console.error("Lỗi khi lấy dữ liệu:", error);
+            })
+            .finally(() => {
+                setLoading(false);
+            });
+    };
+    const fetchPackageData = () => {
+        setLoading(true);
+        axios.get(API.EMPLOYEE.INVOICE_PACKAGElist, {
+            headers: {
+                Authorization: `Bearer ${token}`,
+            },
+        })
+            .then(response => {
+                const formattedOptions = response.data.map(item => ({
+                    value: item.id,
+                    label: item.description
+                }));
+                setPackageOptions(formattedOptions);
+            })
+            .catch(error => {
+                console.error("Lỗi khi lấy dữ liệu package:", error);
+            })
+            .finally(() => {
+                setLoading(false);
+            });
+    };
+
+    //render Effect 
+    useEffect(() => {
+        fetchData();
+        fetchData2();
+        fetchPackageData();
+    }, []);
+    useEffect(() => {
+        if (currentTab.customerPhone) {
+            form.setFieldsValue({
+                name: currentTab.customerName || '',
+                phoneNumber: currentTab.customerPhone || '',
+                phoneNumberNew: currentTab.customerPhone || '',
+            });
+        }
+    }, [currentTab, form]);
+    useEffect(() => {
+        const activeTab = items.find(item => item.key === activeKey);
+        if (activeTab) {
+            setTotalAmount(calculateProductTotal(activeTab.children.props.dataSource));
+            setTotalWithoutDiscount(calculateTotalWithoutDiscount(activeTab.children.props.dataSource));
+        }
+    }, [items, activeKey]);
+
+    const onSearch2 = (value) => {
+        fetchData(value);
+    };
+    const onSearchCustomer = (value) => {
+        fetchData2(value);
+    };
+
+    const inputStyle = {
+        flex: 1,
+        border: 'none',
+        borderBottom: '1px solid #ddd',
+        padding: '4px 0'
+    };
+    const handlePayment = () => {
+        const activeTab = items.find(item => item.key === activeKey);
+        const invoiceData = {
+            invoice: {
+                customerPhone: activeTab.customerPhone,
+                customerName: activeTab.customerName,
+                totalAmount: calculateFinalAmount(),
+                totalShipping: activeTab.moneyShip,
+                description: activeTab.description || '',
+                type: true,
+            },
+            invoiceDetails: activeTab.children.props.dataSource.map(product => ({
+                productID: product.productID,
+                packageId: product.packageId,
+                quantity: product.quantity,
+                price: product.pricePay || product.price,
+                discount: product.discount,
+            })),
+        };
+
+        if (!invoiceData.invoice.customerPhone || invoiceData.invoiceDetails.length === 0) {
+            messageApi.open({
+                type: 'warning',
+                content: 'Vui lòng điền đầy đủ và đúng thông tin cần thiết trước khi gửi!',
+            });
+            return;
+        }
+        if (!/^[0-9]{10}$/.test(activeTab.customerPhone)) {
+            messageApi.open({
+                type: 'warning',
+                content: 'Vui lòng xem lại số điện thoại trước khi gửi!',
+            });
+            return;
+        }
+
+        axios.post(API.EMPLOYEE.INVOICE_CREATE, invoiceData, {
+            headers: { Authorization: `Bearer ${token}` },
+        })
+            .then(response => {
+                remove(activeKey);
+                if (items.length > 1) {
+                    const remainingItems = items.filter(item => item.key !== activeKey);
+                    const newActiveKey = remainingItems[0].key;
+                    setActiveKey(newActiveKey);
+                    const activeTabDataSource = remainingItems.find(item => item.key === newActiveKey)?.children.props.dataSource || [];
+                    setTotalAmount(calculateProductTotal(activeTabDataSource));
+                    setTotalWithoutDiscount(calculateTotalWithoutDiscount(activeTabDataSource));
+                    setCustomerPayment(remainingItems.find(item => item.key === newActiveKey)?.customerPayment || 0);
+                } else {
+                    setActiveKey(null);
+                    setTotalAmount(0);
+                    setCustomerPayment(0);
+                    setDiscount(0);
+                }
+            })
+            .catch(err => {
+                error(err.response.data.message || "Lỗi khi tạo hóa đơn", messageApi);
+            });
+    };
+    const handleCustomerPaymentChange = (value) => {
+        const finalValue = value || 0;
+        setItems(prevItems =>
+            prevItems.map(item =>
+                item.key === activeKey
+                    ? { ...item, customerPayment: finalValue }
+                    : item
+            )
+        );
+        setCustomerPayment(finalValue);
+    };
+
+    return (
+        <>
+            {contextHolder}
+            <div className="main-container">
+                <Content className="invoice-content">
+                    <h1 className="invoice-title">Hoá Đơn Nhập Gạo</h1>
+                    <div className="control-section">
+                        <Radio.Group value={size} onChange={(e) => setSize(e.target.value)}>
+                            <Radio.Button value="small">Small</Radio.Button>
+                            <Radio.Button value="large">Large</Radio.Button>
+                        </Radio.Group>
+                        <div className="product-selection">
+                            <div className="select-wrapper">
+                                <Select
+                                    showSearch
+                                    placeholder="Chọn sản phẩm"
+                                    optionFilterProp="label"
+                                    style={{ width: '300px' }}
+                                    options={options}
+                                    onSearch={onSearch2}
+                                    onChange={(value, option) => setSelectedProduct(option)}
+                                    notFoundContent={loading ? <Spin size="small" /> : "Không tìm thấy"}
+                                />
+                                <Button type="primary" onClick={addProductToTab}>
+                                    Thêm
+                                </Button>
+                            </div>
+                            {errorMessage && <div className="error-message">{errorMessage}</div>}
+                        </div>
+                    </div>
+
+                    <Tabs
+                        type="editable-card"
+                        size={size}
+                        activeKey={activeKey}
+                        onChange={onTabChange}
+                        onEdit={onEdit}
+                        items={items}
+                        className="invoice-tabs"
+                    />
+                    <style jsx>{`
+                    .large-row td {
+                        font-size: 18px !important;
+                    }
+                    .small-row td {
+                        font-size: 14px !important;
+                    }
+                    .ant-table-thead th {
+                        font-size: ${size === 'large' ? '16px' : '13px'} !important;
+                    }
+                 `}</style>
+                </Content>
+
+                <Content className="customer-content">
+                    <h1 className="customer-title">Nhà Cung Cấp</h1>
+                    <div className="customer-info">
+                        <div className="customer-form">
+                            <div className="form-row">
+                                <label className="form-label">Số điện thoại : </label>
+                                <Select
+                                    showSearch
+                                    placeholder="Chọn số điện thoại"
+                                    optionFilterProp="label"
+                                    style={inputStyle}
+                                    options={options2}
+                                    value={currentTab.customerPhone || undefined}
+                                    onSearch={onSearchCustomer}
+                                    onChange={handleCustomerChange}
+                                    optionLabelProp="value"
+                                    notFoundContent={loading ? <Spin size="small" /> : "Không tìm thấy"}
+                                />
+                                {currentTab.customerPhone && (
+                                    <Button type="link" onClick={showModal} >
+                                        <SettingOutlined />
+                                    </Button>
+                                )}
+                            </div>
+                            <div className="form-row">
+                                <label className="form-label2">Nhà cung cấp :</label>
+                                <Input
+                                    style={inputStyle}
+                                    value={currentTab.customerName}
+                                    onChange={handleCustomerNameChange}
+                                    readOnly
+                                />
+                                <span className="new-customer"><InvoiceCustomerCreate onCustomerCreated={handleCustomerCreated} /></span>
+                            </div>
+                        </div>
+
+                        <Modal
+                            title="Chỉnh sửa thông tin khách hàng"
+                            visible={isModalVisible}
+                            onOk={handleOk}
+                            onCancel={handleCancel}
+                            okText="Lưu"
+                            cancelText="Hủy"
+                        >
+                            <Form
+                                form={form}
+                                layout="vertical"
+                                initialValues={{
+                                    name: currentTab.customerName || '',
+                                    phoneNumber: currentTab.customerPhone || '',
+                                    email: '',
+                                    address: '',
+                                }}
+                            >
+                                <Form.Item
+                                    name="name"
+                                    label="Tên khách hàng"
+                                    rules={[{ required: true, message: 'Vui lòng nhập tên!' }]}
+                                >
+                                    <Input placeholder="Nhập tên khách hàng" />
+                                </Form.Item>
+                                <Form.Item
+                                    name="phoneNumber"
+                                    label="Số điện thoại cũ"
+                                    rules={[
+
+                                        { required: true, message: 'Vui lòng nhập số điện thoại!' },
+                                        { pattern: /^0\d{9}$/, message: 'Số điện thoại phải là 10 chữ số và bắt đầu từ 0!' },
+                                    ]}
+                                >
+                                    <Input type='number' placeholder="Nhập số điện thoại" readOnly />
+                                </Form.Item>
+                                <Form.Item
+                                    name="phoneNumberNew"
+                                    label="Số điện thoại mới"
+                                    rules={[
+                                        { required: true, message: 'Vui lòng nhập số điện thoại!' },
+                                        { pattern: /^0\d{9}$/, message: 'Số điện thoại phải là 10 chữ số và bắt đầu từ 0!' },
+                                    ]}
+                                >
+                                    <Input placeholder="Nhập số điện thoại" />
+                                </Form.Item>
+
+                            </Form>
+                        </Modal>
+
+                        <div className="payment-details">
+                            <div className="payment-row">
+                                <label className="payment-label total-product-label"><h5>Tổng tiền Gạo :</h5></label>
+                                <div className="payment-value total-product-value">{totalAmount.toLocaleString()}</div>
+                            </div>
+                            <div className="payment-row">
+                                <label className="payment-label customer-payment-label"><h6>Phí vận chuyển :</h6></label>
+                                <InputNumber
+                                    className="customer-payment-input"
+                                    min={0}
+                                    value={items.find(item => item.key === activeKey)?.moneyShip || 0}
+                                    onChange={(value) => {
+                                        const finalValue = value || 0;
+                                        setItems(prevItems =>
+                                            prevItems.map(item =>
+                                                item.key === activeKey
+                                                    ? {
+                                                        ...item,
+                                                        moneyShip: finalValue,
+                                                    }
+                                                    : item
+                                            )
+                                        );
+                                    }}
+                                    formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
+                                    parser={value => value.replace(/\$\s?|(,*)/g, '')}
+                                />
+                            </div>
+                            <div className="payment-row">
+                                <label className="payment-label final-amount-label"><h6>Tiền cửa hàng phải trả :</h6></label>
+                                <div className="payment-value final-amount-value">{calculateFinalAmount().toLocaleString()}</div>
+                            </div>
+                            <div className="description_content">
+                                <label><h6><i>Ghi chú :</i></h6></label>
+                                <TextArea
+                                    rows={10}
+                                    value={currentTab.description || ''}
+                                    onChange={handleDescriptionChange}
+                                />
+                            </div>
+                        </div>
+                    </div>
+                </Content>
+            </div>
+
+            <div className="invoice-footer">
+                <div className="total-section">
+                    <div className="detail-line">
+                        <span className="detail-label">Tiền hàng sản phẩm bán :</span>
+                        <span>{calculateTotalSellPrice(items.find(item => item.key === activeKey)?.children.props.dataSource || []).toLocaleString()} VND</span>
+                    </div>
+                    <div className="detail-line">
+                        <span className="detail-label">Tổng tiền giảm giá : </span>
+                        <span> - {calculateTotalDiscount(items.find(item => item.key === activeKey)?.children.props.dataSource || []).toLocaleString()} VND</span>
+                    </div>
+                    <div className="detail-line">
+                        <span className="detail-label">Tiền hàng sản phẩm :</span>
+                        <span>{totalAmount.toLocaleString()} VND</span>
+                    </div>
+                    <div className="detail-line">
+                        <span className="detail-label">Tiền ship sản phẩm :</span>
+                        <span>{(items.find(item => item.key === activeKey)?.moneyShip || 0).toLocaleString()} VND</span>
+                    </div>
+                    <div className="total-line">
+                        <h2 className="total-label">Tổng tiền:</h2>
+                        <span className="total-amount">{calculateFinalAmount().toLocaleString()} VND</span>
+                    </div>
+                </div>
+                <div>
+                    <Button
+                        type="primary"
+                        size="large"
+                        className="debt-button"
+
+                    >
+                        Ghi Nợ
+                    </Button>
+                    <Button
+                        type="primary"
+                        size="large"
+                        className="payment-button"
+                        onClick={handlePayment}
+                    >
+                        Tạo Hóa Đơn
+                    </Button>
+                </div>
+
+            </div>
+
+        </>
+    );
+};
+
+export default InvoiceDetail2;
\ No newline at end of file
Index: Front-End/swp_interface/src/Pages/Employee_CustomerLayout/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from 'react';\r\nimport CustomerList from './components/customerList';\r\nimport {\r\n  MenuFoldOutlined,\r\n  MenuUnfoldOutlined,\r\n  UploadOutlined,\r\n  UserOutlined,\r\n  ShopOutlined,\r\n  VideoCameraOutlined,\r\n  InsertRowBelowOutlined,\r\n  TeamOutlined,\r\n} from '@ant-design/icons';\r\nimport logo from '../../assets/img/logoviet.png';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Button, Layout, Menu, theme, Dropdown } from 'antd';\r\nimport './style.css';\r\nimport CustomFooter from \"../../Components/Footer\";\r\nconst { Header, Sider, Content } = Layout;\r\n\r\n\r\nconst Employee_Customer = () => {\r\n  const [collapsed, setCollapsed] = useState(false);\r\n  const navigate = useNavigate();\r\n  const {\r\n    token: { colorBgContainer, borderRadiusLG },\r\n  } = theme.useToken();\r\n\r\n  const handleNavigation = (path) => {\r\n    navigate(path);\r\n  };\r\n  return (\r\n    <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n      <Layout style={{ minHeight: '100vh' }}>\r\n        <Sider\r\n          style={{\r\n            backgroundColor: 'white',\r\n            color: '#fff',\r\n          }}\r\n          trigger={null} collapsible collapsed={collapsed}>\r\n          <div className=\"demo-logo-vertical\" />\r\n          <div style={{ height: '80px' }}>\r\n            <img style={{ width: '90px', marginRight: '100px' }} src={logo} alt=\"logo\" class=\"header__navbar__img\" />\r\n          </div>\r\n          <Menu\r\n            theme=\"light\"\r\n            mode=\"inline\"\r\n            defaultSelectedKeys={['3']}\r\n          >\r\n            <Menu.Item\r\n              key=\"1\"\r\n              icon={<InsertRowBelowOutlined />}\r\n              onClick={() => handleNavigation('/employee/products')}\r\n            >\r\n              Sản Phẩm Gạo\r\n            </Menu.Item>\r\n            <Menu.Item\r\n              key=\"2\"\r\n              icon={<ShopOutlined />}\r\n              onClick={() => handleNavigation('/employee/ricezone')}\r\n            >\r\n              Khu Vực Gạo\r\n            </Menu.Item>\r\n            <Menu.Item\r\n              key=\"3\"\r\n              icon={<TeamOutlined />}\r\n              onClick={() => handleNavigation('/employee/customers')}\r\n            >\r\n              Khách Hàng\r\n            </Menu.Item>\r\n            <Menu.Item\r\n              key=\"4\"\r\n              icon={<TeamOutlined />}\r\n              onClick={() => handleNavigation('/employee/invoices')}\r\n            >\r\n              Hóa Đơn\r\n            </Menu.Item>\r\n          </Menu>\r\n        </Sider>\r\n        <Layout>\r\n          <Header\r\n            style={{\r\n              padding: 0,\r\n              background: colorBgContainer,\r\n            }}\r\n          >\r\n            <Button\r\n              type=\"text\"\r\n              icon={collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}\r\n              onClick={() => setCollapsed(!collapsed)}\r\n              style={{\r\n                fontSize: '16px',\r\n                width: 64,\r\n                height: 64,\r\n              }}\r\n            />\r\n          </Header>\r\n          <Content\r\n            style={{\r\n              margin: '24px 16px',\r\n              padding: 24,\r\n              minHeight: 280,\r\n              background: colorBgContainer,\r\n              borderRadius: borderRadiusLG,\r\n            }}\r\n          >\r\n\r\n            <CustomerList />\r\n          </Content>\r\n\r\n        </Layout>\r\n      </Layout>\r\n      <CustomFooter />\r\n    </div>\r\n  );\r\n};\r\nexport default Employee_Customer;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Pages/Employee_CustomerLayout/index.js b/Front-End/swp_interface/src/Pages/Employee_CustomerLayout/index.js
--- a/Front-End/swp_interface/src/Pages/Employee_CustomerLayout/index.js	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/Front-End/swp_interface/src/Pages/Employee_CustomerLayout/index.js	(date 1742498244284)
@@ -9,6 +9,7 @@
   VideoCameraOutlined,
   InsertRowBelowOutlined,
   TeamOutlined,
+  SolutionOutlined,
 } from '@ant-design/icons';
 import logo from '../../assets/img/logoviet.png';
 import { useNavigate } from 'react-router-dom';
@@ -69,7 +70,7 @@
             </Menu.Item>
             <Menu.Item
               key="4"
-              icon={<TeamOutlined />}
+              icon={<SolutionOutlined />}
               onClick={() => handleNavigation('/employee/invoices')}
             >
               Hóa Đơn
Index: swp391/src/main/java/org/group5/swp391/service/StoreService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.service;\r\n\r\nimport org.group5.swp391.dto.response.AdminResponse.ViewStoreResponse;\r\nimport org.group5.swp391.dto.store_owner.all_store.StoreInfoDTO;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\n\r\n@Service\r\npublic interface StoreService {\r\n    public Page<StoreInfoDTO> getStores(String storeName, int page, int size, String sortBy, boolean descending);\r\n    public List<ViewStoreResponse> getAllStores();\r\n    public List<StoreInfoDTO> getStoresForDebt();\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/service/StoreService.java b/swp391/src/main/java/org/group5/swp391/service/StoreService.java
--- a/swp391/src/main/java/org/group5/swp391/service/StoreService.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/service/StoreService.java	(date 1742498244311)
@@ -1,16 +1,31 @@
 package org.group5.swp391.service;
 
+import jakarta.servlet.http.HttpServletRequest;
+import org.group5.swp391.dto.request.store_request.StoreRequest;
 import org.group5.swp391.dto.response.AdminResponse.ViewStoreResponse;
+import org.group5.swp391.dto.response.store_response.StoreResponse;
 import org.group5.swp391.dto.store_owner.all_store.StoreInfoDTO;
 import org.springframework.data.domain.Page;
 import org.springframework.stereotype.Service;
 
 import java.util.List;
+import java.util.Map;
 
 @Service
 public interface StoreService {
     public Page<StoreInfoDTO> getStores(String storeName, int page, int size, String sortBy, boolean descending);
+
     public List<ViewStoreResponse> getAllStores();
+
     public List<StoreInfoDTO> getStoresForDebt();
 
+    StoreResponse createNewStore(StoreRequest request, String transactionNo, String username);
+
+    String handlePayment(String username, String vnp_TxnRef, String vnp_TransDate, HttpServletRequest req);
+
+    StoreResponse updateStoreInfor(String storeID, StoreRequest request, String username);
+
+    List<Map<String, Object>> getRequestCreateStores(String username);
+
+    StoreResponse getStoreById(String storeID, String username);
 }
\ No newline at end of file
Index: swp391/src/main/java/org/group5/swp391/service/SubscriptionPlanService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.service;\r\n\r\nimport org.group5.swp391.dto.request.admin_request.SubscriptionPlanRequest;\r\nimport org.group5.swp391.dto.response.AdminResponse.SubscriptionPlanResponse;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\n\r\n@Service\r\npublic interface SubscriptionPlanService {\r\n    public List<SubscriptionPlanResponse> getAllSubscriptionPlans();\r\n    public SubscriptionPlanResponse getSubscriptionPlanById(String id);\r\n    public SubscriptionPlanResponse createSubscriptionPlan(SubscriptionPlanRequest request);\r\n    public SubscriptionPlanResponse updateSubscriptionPlan(String id, SubscriptionPlanRequest request);\r\n    public List<SubscriptionPlanResponse> getSubscriptionPlansIsActive();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/service/SubscriptionPlanService.java b/swp391/src/main/java/org/group5/swp391/service/SubscriptionPlanService.java
--- a/swp391/src/main/java/org/group5/swp391/service/SubscriptionPlanService.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/service/SubscriptionPlanService.java	(date 1742498244311)
@@ -2,6 +2,7 @@
 
 import org.group5.swp391.dto.request.admin_request.SubscriptionPlanRequest;
 import org.group5.swp391.dto.response.AdminResponse.SubscriptionPlanResponse;
+import org.group5.swp391.entity.SubscriptionPlan;
 import org.springframework.stereotype.Service;
 
 import java.util.List;
@@ -13,4 +14,5 @@
     public SubscriptionPlanResponse createSubscriptionPlan(SubscriptionPlanRequest request);
     public SubscriptionPlanResponse updateSubscriptionPlan(String id, SubscriptionPlanRequest request);
     public List<SubscriptionPlanResponse> getSubscriptionPlansIsActive();
+    SubscriptionPlan getSubscriptionPlanByPrice(double price);
 }
Index: swp391/src/main/java/org/group5/swp391/service/AppStatisticsService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.service;\r\n\r\nimport org.group5.swp391.dto.response.AdminResponse.AppStatisticsResponse;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\n\r\n@Service\r\npublic interface AppStatisticsService {\r\n    public List<AppStatisticsResponse> getStatistics();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/service/AppStatisticsService.java b/swp391/src/main/java/org/group5/swp391/service/AppStatisticsService.java
--- a/swp391/src/main/java/org/group5/swp391/service/AppStatisticsService.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/service/AppStatisticsService.java	(date 1742498244310)
@@ -8,4 +8,6 @@
 @Service
 public interface AppStatisticsService {
     public List<AppStatisticsResponse> getStatistics();
+
+    List<String> getTransactionNosWithNullStore();
 }
Index: swp391/src/main/java/org/group5/swp391/service/InvoiceService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.service;\r\n\r\nimport org.group5.swp391.dto.employee.InvoiceRequest.InvoiceDTO;\r\nimport org.group5.swp391.dto.employee.InvoiceRequest.InvoiceRequest;\r\nimport org.group5.swp391.dto.store_owner.all_invoice.StoreInvoiceDTO;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\npublic interface InvoiceService {\r\n    public Page<StoreInvoiceDTO> getInvoices(String phoneNumber, int page, int size, String sortBy, boolean descending, String typeStr, String statusStr);\r\n    public void CreateInvoice(InvoiceRequest invoiceRequest);\r\n    public Page<InvoiceDTO>getInvoicesForEmployee(String phoneNumber, int page, int size, String sortBy, boolean descending);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/service/InvoiceService.java b/swp391/src/main/java/org/group5/swp391/service/InvoiceService.java
--- a/swp391/src/main/java/org/group5/swp391/service/InvoiceService.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/service/InvoiceService.java	(date 1742498244310)
@@ -6,9 +6,17 @@
 import org.springframework.data.domain.Page;
 import org.springframework.stereotype.Service;
 
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+
 @Service
 public interface InvoiceService {
     public Page<StoreInvoiceDTO> getInvoices(String phoneNumber, int page, int size, String sortBy, boolean descending, String typeStr, String statusStr);
     public void CreateInvoice(InvoiceRequest invoiceRequest);
-    public Page<InvoiceDTO>getInvoicesForEmployee(String phoneNumber, int page, int size, String sortBy, boolean descending);
+    public Page<InvoiceDTO>getInvoicesForEmployee(String phoneNumber, String name, int page, int size,
+                                                  String sortBy, boolean descending,
+                                                  Long minAmount,
+                                                  Long maxAmount, Long minShipping, Long maxShipping,
+                                                  LocalDateTime startDate, LocalDateTime endDate);
+
 }
\ No newline at end of file
Index: swp391/src/main/java/org/group5/swp391/service/impl/InvoiceServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.service.impl;\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.group5.swp391.converter.InvoiceConverter;\r\nimport org.group5.swp391.dto.employee.InvoiceRequest.InvoiceDTO;\r\nimport org.group5.swp391.dto.employee.InvoiceRequest.InvoiceDetailDTO;\r\nimport org.group5.swp391.dto.employee.InvoiceRequest.InvoiceRequest;\r\nimport org.group5.swp391.dto.notification.SendNotificationRequest;\r\nimport org.group5.swp391.dto.store_owner.all_invoice.StoreInvoiceDTO;\r\nimport org.group5.swp391.entity.*;\r\nimport org.group5.swp391.entity.Package;\r\nimport org.group5.swp391.repository.*;\r\nimport org.group5.swp391.service.InvoiceService;\r\nimport org.group5.swp391.service.NotificationService;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.PageRequest;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.domain.Sort;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\nimport org.springframework.security.access.AccessDeniedException;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport org.springframework.web.server.ResponseStatusException;\r\nimport static org.springframework.http.HttpStatus.NOT_FOUND;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class InvoiceServiceImpl implements InvoiceService {\r\n    private final InvoiceRepository invoiceRepository;\r\n    private final InvoiceConverter invoiceConverter;\r\n    private final CustomerRepository customerRepository;\r\n    private final AccountRepository accountRepository;\r\n    private final StoreRepository storeRepository;\r\n    private final EmployeeRepository employeeRepository;\r\n    private final PackageRepository packageRepository;\r\n    private final ProductRepository productRepository;\r\n    private final CategoryRepository categoryRepository;\r\n    private final NotificationService notificationService;\r\n\r\n    @Override\r\n    public Page<StoreInvoiceDTO> getInvoices(\r\n            String phoneNumber,\r\n            int page,\r\n            int size,\r\n            String sortBy,\r\n            boolean descending,\r\n            String typeStr,\r\n            String statusStr) {\r\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\n        if (authentication == null || !authentication.isAuthenticated()) {\r\n            throw new AccessDeniedException(\"Bạn chưa đăng nhập!\");\r\n        }\r\n        String username = authentication.getName();\r\n        Account account = accountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResponseStatusException(NOT_FOUND, \"Tài khoản không tồn tại\"));\r\n        List<Store> stores = storeRepository.findByStoreAccount(account);\r\n        Sort sort = descending ? Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();\r\n        Pageable pageable = PageRequest.of(page, size, sort);\r\n        if ((phoneNumber == null || phoneNumber.isEmpty()) && typeStr.equals(\"all\") && statusStr.equals(\"all\")) {\r\n            return invoiceRepository.findByStoreIn(stores, pageable).map(invoiceConverter::toStoreInvoiceDTO);\r\n        }\r\n        List<Customer> customers = customerRepository.findByPhoneNumberContainingIgnoreCase(phoneNumber);\r\n        Boolean type = typeStr.equals(\"all\") ? null : typeStr.equals(\"export\");\r\n        Boolean status = statusStr.equals(\"all\") ? null : statusStr.equals(\"paid\");\r\n        return invoiceRepository.findInvoices(stores, customers, type, status, pageable).map(invoiceConverter::toStoreInvoiceDTO);    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public void CreateInvoice(InvoiceRequest invoiceRequest) {\r\n        validateInvoiceRequest(invoiceRequest);\r\n        String username = invoiceRequest.getEmployeeUsername();\r\n        System.out.println(invoiceRequest.getEmployeeUsername());\r\n        if (username == null) {\r\n            throw new IllegalArgumentException(\"Không có thông tin nhân viên trong yêu cầu!\");\r\n        }\r\n        Account account = accountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResponseStatusException(NOT_FOUND, \"Tài khoản không tồn tại\"));\r\n        Employee a = employeeRepository.findStoreIdByAccountEmpId(account.getId());\r\n\r\n        Customer customer=customerRepository.findByPhoneNumber(invoiceRequest.getInvoice().getCustomerPhone());\r\n        Invoice invoice=new Invoice();\r\n        invoice.setProductMoney(invoiceRequest.getInvoice().getTotalAmount());\r\n        invoice.setShipMoney(invoiceRequest.getInvoice().getTotalShipping());\r\n        invoice.setStatus(true);\r\n        invoice.setType(false);\r\n        invoice.setCreatedBy(a.getEmployeeAccount().getUsername());\r\n        invoice.setCustomerName(capitalizeFirstLetters(invoiceRequest.getInvoice().getCustomerName()));\r\n        invoice.setCustomerPhoneNumber(invoiceRequest.getInvoice().getCustomerPhone());\r\n        invoice.setCustomer(customer);\r\n        invoice.setDescription(capitalizeFirstLetters(invoiceRequest.getInvoice().getDescription()));\r\n        invoice.setStore(a.getStore());\r\n        invoice.setDeletedAt(null);\r\n        invoice.setDeletedBy(null);\r\n\r\n        List<InvoiceDetail>details=invoiceRequest.getInvoiceDetails().stream().map(\r\n             detail->{\r\n                 InvoiceDetail invoiceDetail=new InvoiceDetail();\r\n                 Package packageEntity=packageRepository.findPackageByStringId(detail.getPackageId());\r\n                 Product product=productRepository.findByStringId(detail.getProductID());\r\n                 Category categoryProduct=categoryRepository.findByStringId(product.getCategory().getId());\r\n                 long lastQuantity = product.getQuantity() - detail.getQuantity();\r\n                 if (lastQuantity < 0) {\r\n                     notificationService.sendNotification(SendNotificationRequest.builder()\r\n                                     .message(\"Xử lý hóa đơn thất bại. Số lượng sản phẩm \" + product.getName() + \" không đủ trong kho!\")\r\n                                     .targetUsername(username)\r\n                                     .type(\"Error\")\r\n                             .build());\r\n                     throw new IllegalArgumentException(\"Số lượng sản phẩm \" + product.getName() + \" không đủ trong kho!\");\r\n                 }\r\n                 product.setQuantity(lastQuantity);\r\n                 productRepository.save(product);\r\n                 invoiceDetail.setDiscount(detail.getDiscount());\r\n                 invoiceDetail.setPackageType(packageEntity);\r\n                 invoiceDetail.setProductPrice(product.getPrice());\r\n                 invoiceDetail.setQuantity(detail.getQuantity());\r\n                 invoiceDetail.setProductCategoryDescription(categoryProduct.getDescription());\r\n                 invoiceDetail.setProductCategoryName(categoryProduct.getName());\r\n                 invoiceDetail.setProductImage(product.getProductImage());\r\n                 invoiceDetail.setProductInformation(product.getInformation());\r\n                 invoiceDetail.setProductName(product.getName());\r\n                 invoiceDetail.setInvoice(invoice);\r\n                 return invoiceDetail;\r\n             }).collect(Collectors.toList());\r\n            invoice.setInvoiceDetails(details);\r\n            invoiceRepository.save(invoice);\r\n            notificationService.sendNotification(SendNotificationRequest.builder()\r\n                .message(\"Xử lý hóa đơn của khách hàng \"+ invoiceRequest.getInvoice().getCustomerName()+\" thành công! Vui lòng check lại thông tin\")\r\n                .targetUsername(username)\r\n                .type(\"Success\")\r\n                .build());\r\n    }\r\n\r\n    @Override\r\n    public Page<InvoiceDTO> getInvoicesForEmployee(String phoneNumber, int page, int size, String sortBy, boolean descending) {\r\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\n        if (authentication == null || !authentication.isAuthenticated()) {\r\n            throw new AccessDeniedException(\"Bạn chưa đăng nhập!\");\r\n        }\r\n        String username = authentication.getName();\r\n        Account account = accountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResponseStatusException(NOT_FOUND, \"Tài khoản không tồn tại\"));\r\n        Employee a = employeeRepository.findStoreIdByAccountEmpId(account.getId());\r\n        Sort sort = descending ? Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();\r\n        Pageable pageable = PageRequest.of(page, size, sort);\r\n        if (phoneNumber.equals(\"\")) {\r\n            phoneNumber = null;\r\n        }else{\r\n            phoneNumber = capitalizeFirstLetters(phoneNumber);\r\n        }\r\n        Page<Invoice> invoicePage=invoiceRepository.findInvoiceByCustomerPhone(phoneNumber,a.getStore().getId(),pageable);\r\n       return invoicePage.map(invoiceConverter::toEmployeeInvoiceDTO);\r\n    }\r\n\r\n    public String capitalizeFirstLetters(String input) {\r\n        if (input == null || input.isEmpty()) {\r\n            return input;\r\n        }\r\n        String[] words = input.split(\"\\\\s+\");\r\n        StringBuilder capitalizedString = new StringBuilder();\r\n        for (String word : words) {\r\n            if (word.length() > 0) {\r\n                capitalizedString.append(word.substring(0, 1).toUpperCase())\r\n                        .append(word.substring(1).toLowerCase())\r\n                        .append(\" \");\r\n            }\r\n        }\r\n        return capitalizedString.toString().trim();\r\n    }\r\n\r\n    private void validateInvoiceRequest(InvoiceRequest invoiceRequest) {\r\n        if (invoiceRequest == null) {\r\n            throw new IllegalArgumentException(\"hóa đơn không được null!\");\r\n        }\r\n        if (invoiceRequest.getEmployeeUsername() == null || invoiceRequest.getEmployeeUsername().isEmpty()) {\r\n            throw new IllegalArgumentException(\"Tên nhân viên không được để trống!\");\r\n        }\r\n        if (invoiceRequest.getInvoice() == null) {\r\n            throw new IllegalArgumentException(\"Thông tin hóa đơn không được null!\");\r\n        }\r\n        if (!invoiceRequest.getInvoice().getCustomerPhone().matches(\"^0\\\\d{9}$\")) {\r\n            throw new IllegalArgumentException(\"Số điện thoại phải gồm 10 chữ số và bắt đầu bằng 0!\");\r\n        }\r\n        if (invoiceRequest.getInvoice().getCustomerName() == null || invoiceRequest.getInvoice().getCustomerName().isEmpty()) {\r\n            throw new IllegalArgumentException(\"Tên khách hàng không được để trống!\");\r\n        }\r\n        Customer customer = customerRepository.findByPhoneNumber(invoiceRequest.getInvoice().getCustomerPhone());\r\n        if (!customer.getName().equals(invoiceRequest.getInvoice().getCustomerName())) {\r\n            throw new IllegalArgumentException(\"Số điện thoại này là của khách hàng khác\");\r\n        }\r\n        if (invoiceRequest.getInvoice().getTotalAmount() < 0 || invoiceRequest.getInvoice().getTotalShipping() < 0) {\r\n            throw new IllegalArgumentException(\"Tổng tiền hoặc phí vận chuyển không được < 0!\");\r\n        }\r\n        if (invoiceRequest.getInvoiceDetails() == null || invoiceRequest.getInvoiceDetails().isEmpty()) {\r\n            throw new IllegalArgumentException(\"detail hóa đơn không được để trống!\");\r\n        }\r\n        for (InvoiceDetailDTO detail : invoiceRequest.getInvoiceDetails()) {\r\n            if (detail.getProductID() == null || detail.getProductID().isEmpty()) {\r\n                throw new IllegalArgumentException(\"ID sản phẩm không được để trống!\");\r\n            }\r\n            if (detail.getQuantity() <= 0) {\r\n                throw new IllegalArgumentException(\"Số lượng sản phẩm phải lớn hơn 0!\");\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/service/impl/InvoiceServiceImpl.java b/swp391/src/main/java/org/group5/swp391/service/impl/InvoiceServiceImpl.java
--- a/swp391/src/main/java/org/group5/swp391/service/impl/InvoiceServiceImpl.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/service/impl/InvoiceServiceImpl.java	(date 1742498244316)
@@ -9,6 +9,8 @@
 import org.group5.swp391.dto.store_owner.all_invoice.StoreInvoiceDTO;
 import org.group5.swp391.entity.*;
 import org.group5.swp391.entity.Package;
+import org.group5.swp391.exception.AppException;
+import org.group5.swp391.exception.ErrorCode;
 import org.group5.swp391.repository.*;
 import org.group5.swp391.service.InvoiceService;
 import org.group5.swp391.service.NotificationService;
@@ -20,12 +22,15 @@
 import org.springframework.security.core.context.SecurityContextHolder;
 import org.springframework.stereotype.Service;
 
+import java.time.LocalDate;
+import java.time.LocalDateTime;
 import java.util.List;
 import java.util.stream.Collectors;
 
 import org.springframework.security.access.AccessDeniedException;
 import org.springframework.transaction.annotation.Transactional;
 import org.springframework.web.server.ResponseStatusException;
+
 import static org.springframework.http.HttpStatus.NOT_FOUND;
 
 @Service
@@ -67,13 +72,14 @@
         List<Customer> customers = customerRepository.findByPhoneNumberContainingIgnoreCase(phoneNumber);
         Boolean type = typeStr.equals("all") ? null : typeStr.equals("export");
         Boolean status = statusStr.equals("all") ? null : statusStr.equals("paid");
-        return invoiceRepository.findInvoices(stores, customers, type, status, pageable).map(invoiceConverter::toStoreInvoiceDTO);    }
+        return invoiceRepository.findInvoices(stores, customers, type, status, pageable).map(invoiceConverter::toStoreInvoiceDTO);
+    }
 
     @Override
     @Transactional
     public void CreateInvoice(InvoiceRequest invoiceRequest) {
-        validateInvoiceRequest(invoiceRequest);
         String username = invoiceRequest.getEmployeeUsername();
+        validateInvoiceRequest(invoiceRequest, username);
         System.out.println(invoiceRequest.getEmployeeUsername());
         if (username == null) {
             throw new IllegalArgumentException("Không có thông tin nhân viên trong yêu cầu!");
@@ -82,12 +88,12 @@
                 .orElseThrow(() -> new ResponseStatusException(NOT_FOUND, "Tài khoản không tồn tại"));
         Employee a = employeeRepository.findStoreIdByAccountEmpId(account.getId());
 
-        Customer customer=customerRepository.findByPhoneNumber(invoiceRequest.getInvoice().getCustomerPhone());
-        Invoice invoice=new Invoice();
+        Customer customer = customerRepository.findByPhoneNumber(invoiceRequest.getInvoice().getCustomerPhone());
+        Invoice invoice = new Invoice();
         invoice.setProductMoney(invoiceRequest.getInvoice().getTotalAmount());
         invoice.setShipMoney(invoiceRequest.getInvoice().getTotalShipping());
         invoice.setStatus(true);
-        invoice.setType(false);
+        invoice.setType(invoiceRequest.getInvoice().isType());
         invoice.setCreatedBy(a.getEmployeeAccount().getUsername());
         invoice.setCustomerName(capitalizeFirstLetters(invoiceRequest.getInvoice().getCustomerName()));
         invoice.setCustomerPhoneNumber(invoiceRequest.getInvoice().getCustomerPhone());
@@ -97,46 +103,54 @@
         invoice.setDeletedAt(null);
         invoice.setDeletedBy(null);
 
-        List<InvoiceDetail>details=invoiceRequest.getInvoiceDetails().stream().map(
-             detail->{
-                 InvoiceDetail invoiceDetail=new InvoiceDetail();
-                 Package packageEntity=packageRepository.findPackageByStringId(detail.getPackageId());
-                 Product product=productRepository.findByStringId(detail.getProductID());
-                 Category categoryProduct=categoryRepository.findByStringId(product.getCategory().getId());
-                 long lastQuantity = product.getQuantity() - detail.getQuantity();
-                 if (lastQuantity < 0) {
-                     notificationService.sendNotification(SendNotificationRequest.builder()
-                                     .message("Xử lý hóa đơn thất bại. Số lượng sản phẩm " + product.getName() + " không đủ trong kho!")
-                                     .targetUsername(username)
-                                     .type("Error")
-                             .build());
-                     throw new IllegalArgumentException("Số lượng sản phẩm " + product.getName() + " không đủ trong kho!");
-                 }
-                 product.setQuantity(lastQuantity);
-                 productRepository.save(product);
-                 invoiceDetail.setDiscount(detail.getDiscount());
-                 invoiceDetail.setPackageType(packageEntity);
-                 invoiceDetail.setProductPrice(product.getPrice());
-                 invoiceDetail.setQuantity(detail.getQuantity());
-                 invoiceDetail.setProductCategoryDescription(categoryProduct.getDescription());
-                 invoiceDetail.setProductCategoryName(categoryProduct.getName());
-                 invoiceDetail.setProductImage(product.getProductImage());
-                 invoiceDetail.setProductInformation(product.getInformation());
-                 invoiceDetail.setProductName(product.getName());
-                 invoiceDetail.setInvoice(invoice);
-                 return invoiceDetail;
-             }).collect(Collectors.toList());
-            invoice.setInvoiceDetails(details);
-            invoiceRepository.save(invoice);
-            notificationService.sendNotification(SendNotificationRequest.builder()
-                .message("Xử lý hóa đơn của khách hàng "+ invoiceRequest.getInvoice().getCustomerName()+" thành công! Vui lòng check lại thông tin")
+        List<InvoiceDetail> details = invoiceRequest.getInvoiceDetails().stream().map(
+                detail -> {
+                    InvoiceDetail invoiceDetail = new InvoiceDetail();
+                    Package packageEntity = packageRepository.findPackageByStringId(detail.getPackageId());
+                    Product product = productRepository.findByStringId(detail.getProductID());
+                    Category categoryProduct = categoryRepository.findByStringId(product.getCategory().getId());
+                    long lastQuantity = 0;
+                    if (invoiceRequest.getInvoice().isType()) {
+                        lastQuantity = product.getQuantity() + detail.getQuantity();
+                    } else {
+                        lastQuantity = product.getQuantity() - detail.getQuantity();
+                        if (lastQuantity < 0) {
+                            notificationService.sendNotification(SendNotificationRequest.builder()
+                                    .message("Xử lý hóa đơn thất bại. Số lượng sản phẩm " + product.getName() + " không đủ trong kho!")
+                                    .targetUsername(username)
+                                    .type("Error")
+                                    .build());
+                            throw new IllegalArgumentException("Số lượng sản phẩm " + product.getName() + " không đủ trong kho!");
+                        }
+                    }
+                    product.setQuantity(lastQuantity);
+                    productRepository.save(product);
+                    invoiceDetail.setDiscount(detail.getDiscount());
+                    invoiceDetail.setPackageType(packageEntity);
+                    invoiceDetail.setProductPrice(product.getPrice());
+                    invoiceDetail.setQuantity(detail.getQuantity());
+                    invoiceDetail.setProductCategoryDescription(categoryProduct.getDescription());
+                    invoiceDetail.setProductCategoryName(categoryProduct.getName());
+                    invoiceDetail.setProductImage(product.getProductImage());
+                    invoiceDetail.setProductInformation(product.getInformation());
+                    invoiceDetail.setProductName(product.getName());
+                    invoiceDetail.setInvoice(invoice);
+                    return invoiceDetail;
+                }).collect(Collectors.toList());
+        invoice.setInvoiceDetails(details);
+        invoiceRepository.save(invoice);
+        notificationService.sendNotification(SendNotificationRequest.builder()
+                .message("Xử lý hóa đơn của khách hàng " + invoiceRequest.getInvoice().getCustomerName() + " thành công! Vui lòng check lại thông tin")
                 .targetUsername(username)
                 .type("Success")
                 .build());
     }
 
     @Override
-    public Page<InvoiceDTO> getInvoicesForEmployee(String phoneNumber, int page, int size, String sortBy, boolean descending) {
+    public Page<InvoiceDTO> getInvoicesForEmployee(String phoneNumber, String name, int page, int size,
+                                                   String sortBy, boolean descending,
+                                                   Long minAmount, Long maxAmount, Long minShipping, Long maxShipping,
+                                                   LocalDateTime startDate, LocalDateTime endDate) {
         Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
         if (authentication == null || !authentication.isAuthenticated()) {
             throw new AccessDeniedException("Bạn chưa đăng nhập!");
@@ -145,15 +159,25 @@
         Account account = accountRepository.findByUsername(username)
                 .orElseThrow(() -> new ResponseStatusException(NOT_FOUND, "Tài khoản không tồn tại"));
         Employee a = employeeRepository.findStoreIdByAccountEmpId(account.getId());
+
         Sort sort = descending ? Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();
         Pageable pageable = PageRequest.of(page, size, sort);
+
         if (phoneNumber.equals("")) {
             phoneNumber = null;
-        }else{
+        } else {
             phoneNumber = capitalizeFirstLetters(phoneNumber);
         }
-        Page<Invoice> invoicePage=invoiceRepository.findInvoiceByCustomerPhone(phoneNumber,a.getStore().getId(),pageable);
-       return invoicePage.map(invoiceConverter::toEmployeeInvoiceDTO);
+        if (name.equals("")) {
+            name = null;
+        } else {
+            name = capitalizeFirstLetters(name);
+        }
+
+        Page<Invoice> invoicePage = invoiceRepository.findInvoiceByCustomerPhone(phoneNumber, name,
+                a.getStore().getId(), minAmount, maxAmount, minShipping, maxShipping,
+                startDate, endDate, pageable);
+        return invoicePage.map(invoiceConverter::toEmployeeInvoiceDTO);
     }
 
     public String capitalizeFirstLetters(String input) {
@@ -172,7 +196,7 @@
         return capitalizedString.toString().trim();
     }
 
-    private void validateInvoiceRequest(InvoiceRequest invoiceRequest) {
+    private void validateInvoiceRequest(InvoiceRequest invoiceRequest, String username) {
         if (invoiceRequest == null) {
             throw new IllegalArgumentException("hóa đơn không được null!");
         }
@@ -190,10 +214,15 @@
         }
         Customer customer = customerRepository.findByPhoneNumber(invoiceRequest.getInvoice().getCustomerPhone());
         if (!customer.getName().equals(invoiceRequest.getInvoice().getCustomerName())) {
-            throw new IllegalArgumentException("Số điện thoại này là của khách hàng khác");
+            throw new AppException(ErrorCode.PHONENUMBER_EXISTED);
         }
         if (invoiceRequest.getInvoice().getTotalAmount() < 0 || invoiceRequest.getInvoice().getTotalShipping() < 0) {
-            throw new IllegalArgumentException("Tổng tiền hoặc phí vận chuyển không được < 0!");
+            notificationService.sendNotification(SendNotificationRequest.builder()
+                    .message("Xử lý hóa đơn thất bại, không thể tạo hóa đơn âm ")
+                    .targetUsername(username)
+                    .type("Error")
+                    .build());
+            throw new IllegalArgumentException("không thể tạo hóa đơn âm");
         }
         if (invoiceRequest.getInvoiceDetails() == null || invoiceRequest.getInvoiceDetails().isEmpty()) {
             throw new IllegalArgumentException("detail hóa đơn không được để trống!");
Index: swp391/src/main/java/org/group5/swp391/service/impl/CustomerServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.service.impl;\r\n\r\nimport org.group5.swp391.dto.debt.CustomerCreationRequest;\r\nimport org.group5.swp391.dto.debt.CustomerDebtUpdateRequest;\r\nimport org.group5.swp391.dto.debt.DebtCustomerDTO;\r\nimport org.group5.swp391.dto.employee.CustomerUpdateRequest;\r\nimport org.group5.swp391.dto.response.PageResponse;\r\nimport org.group5.swp391.entity.Account;\r\nimport org.group5.swp391.entity.Employee;\r\nimport org.group5.swp391.exception.AppException;\r\nimport org.group5.swp391.exception.ErrorCode;\r\nimport org.group5.swp391.repository.AccountRepository;\r\nimport org.group5.swp391.repository.EmployeeRepository;\r\nimport org.group5.swp391.service.CustomerService;\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.group5.swp391.converter.CustomerConverter;\r\nimport org.group5.swp391.dto.employee.EmployeeCustomerDTO;\r\nimport org.group5.swp391.entity.Customer;\r\nimport org.group5.swp391.entity.Store;\r\nimport org.group5.swp391.repository.CustomerRepository;\r\nimport org.group5.swp391.repository.StoreRepository;\r\nimport org.group5.swp391.utils.CurrentUserDetails;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.PageRequest;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.domain.Sort;\r\nimport org.springframework.security.access.AccessDeniedException;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.util.StringUtils;\r\nimport org.springframework.web.server.ResponseStatusException;\r\n\r\nimport java.lang.reflect.Field;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalDateTime;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\nimport java.util.stream.Collectors;\r\n\r\nimport static org.springframework.http.HttpStatus.NOT_FOUND;\r\n\r\nimport java.util.List;\r\n\r\n@Slf4j\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class CustomerServiceImpl implements CustomerService {\r\n    private final CustomerRepository customerRepository;\r\n    private final CustomerConverter CustomerConverter;\r\n    private final StoreRepository storeRepository;\r\n    private final EmployeeRepository employeeRepository;\r\n    private final AccountRepository accountRepository;\r\n    private final CustomerConverter customerConverter;\r\n\r\n\r\n    @Override\r\n    public Page<EmployeeCustomerDTO> EmployeeGetAllCustomer(int page, int size, String sortBy,\r\n                                                            boolean descending, String phonesearch) {\r\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\n        if (authentication == null || !authentication.isAuthenticated()) {\r\n            throw new AccessDeniedException(\"Bạn chưa đăng nhập!\");\r\n        }\r\n        String username = authentication.getName();\r\n        System.out.println(username);\r\n        Account account = accountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResponseStatusException(NOT_FOUND, \"Tài khoản không tồn tại\"));\r\n        Employee a = employeeRepository.findStoreIdByAccountEmpId(account.getId());\r\n\r\n        Sort sort = descending ? Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();\r\n        Pageable pageable = PageRequest.of(page, size, sort);\r\n        if (phonesearch.equals(\"\")) {\r\n            phonesearch = null;\r\n        } else {\r\n            phonesearch = phonesearch.toLowerCase();\r\n            phonesearch = capitalizeFirstLetters(phonesearch);\r\n        }\r\n\r\n        Page<Customer> customerPage = customerRepository.findAllWithPhoneNumber(pageable, phonesearch, a.getStore().getId());\r\n        log.info(\"heeh\" + customerPage.getContent().get(0).getStore().getId());\r\n        return customerPage.map(CustomerConverter::toEmployeeCustomerDTO);\r\n    }\r\n\r\n    @Override\r\n    public List<EmployeeCustomerDTO> EmployeeGetAllCustomerInList(String phonesearch) {\r\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\n        if (authentication == null || !authentication.isAuthenticated()) {\r\n            throw new AccessDeniedException(\"Bạn chưa đăng nhập!\");\r\n        }\r\n        String username = authentication.getName();\r\n        Account account = accountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResponseStatusException(NOT_FOUND, \"Tài khoản không tồn tại\"));\r\n        Employee a = employeeRepository.findStoreIdByAccountEmpId(account.getId());\r\n        if (phonesearch.equals(\"\")) {\r\n            phonesearch = null;\r\n        } else {\r\n            phonesearch = phonesearch.toLowerCase();\r\n            phonesearch = capitalizeFirstLetters(phonesearch);\r\n        }\r\n        List<Customer> customerList = customerRepository.findAllWithPhoneNumberInList(phonesearch, a.getStore().getId());\r\n        return customerList.stream().map(CustomerConverter::toEmployeeCustomerDTO).collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public Customer updateCustomer(String customerId, Customer updatedCustomer) {\r\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\n        if (authentication == null || !authentication.isAuthenticated()) {\r\n            throw new AccessDeniedException(\"Bạn chưa đăng nhập!\");\r\n        }\r\n        String username = authentication.getName();\r\n        System.out.println(username);\r\n        Account account = accountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResponseStatusException(NOT_FOUND, \"Tài khoản không tồn tại\"));\r\n        validatePhoneNumber(updatedCustomer.getPhoneNumber());\r\n        if (updatedCustomer.getEmail() != null) {\r\n            validateEmail(updatedCustomer.getEmail());\r\n        }\r\n        Employee a = employeeRepository.findStoreIdByAccountEmpId(account.getId());\r\n        System.out.println(\"tai sao nhi\" + a.getEmployeeAccount().getName());\r\n        Customer existingCustomer = customerRepository.findById(customerId).orElseThrow();\r\n        if(existingCustomer!=null) {\r\n            if(!existingCustomer.getName().equals(updatedCustomer.getName())) {\r\n                throw new IllegalArgumentException(\"Số điện thoại này là của khách hàng khác\");\r\n            }\r\n        }\r\n        existingCustomer.setCreatedBy(username);\r\n        existingCustomer.setName(capitalizeFirstLetters(updatedCustomer.getName()));\r\n        existingCustomer.setPhoneNumber(updatedCustomer.getPhoneNumber());\r\n        existingCustomer.setEmail(updatedCustomer.getEmail());\r\n        existingCustomer.setAddress(updatedCustomer.getAddress());\r\n        existingCustomer.setUpdatedAt(LocalDateTime.now());\r\n        return customerRepository.save(existingCustomer);\r\n    }\r\n\r\n    @Override\r\n    public Customer InvoiceUpdateCustomer(String phoneNumber, CustomerUpdateRequest updatedCustomer) {\r\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\n        if (authentication == null || !authentication.isAuthenticated()) {\r\n            throw new AccessDeniedException(\"Bạn chưa đăng nhập!\");\r\n        }\r\n        String username = authentication.getName();\r\n        Account account = accountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResponseStatusException(NOT_FOUND, \"Tài khoản không tồn tại\"));\r\n        Employee a = employeeRepository.findStoreIdByAccountEmpId(account.getId());\r\n        Customer existingCustomer = customerRepository.findByPhoneNumber(phoneNumber);\r\n        System.out.println(existingCustomer.getName());\r\n        System.out.println(updatedCustomer.getName());\r\n        if(existingCustomer!=null) {\r\n            if(!existingCustomer.getName().equals(updatedCustomer.getName())) {\r\n                throw new IllegalArgumentException(\"Số điện thoại này là của khách hàng khác\");\r\n            }\r\n        }\r\n        validatePhoneNumber(updatedCustomer.getPhoneNumberNew());\r\n        existingCustomer.setCreatedBy(username);\r\n        existingCustomer.setName(capitalizeFirstLetters(updatedCustomer.getName()));\r\n        existingCustomer.setPhoneNumber(updatedCustomer.getPhoneNumberNew());\r\n        existingCustomer.setEmail(existingCustomer.getEmail());\r\n        existingCustomer.setAddress(existingCustomer.getAddress());\r\n        existingCustomer.setUpdatedAt(LocalDateTime.now());\r\n        return customerRepository.save(existingCustomer);\r\n    }\r\n\r\n\r\n    @Override\r\n    public Customer createCustomer(EmployeeCustomerDTO customerDTO) {\r\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\n        if (authentication == null || !authentication.isAuthenticated()) {\r\n            throw new AccessDeniedException(\"Bạn chưa đăng nhập!\");\r\n        }\r\n        String username = authentication.getName();\r\n        Account account = accountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResponseStatusException(NOT_FOUND, \"Tài khoản không tồn tại\"));\r\n        log.info(account.getId());\r\n        Employee a = employeeRepository.findStoreIdByAccountEmpId(account.getId());\r\n        try {\r\n            validatePhoneNumber(customerDTO.getPhoneNumber());\r\n            if (customerDTO.getEmail() != null) {\r\n                validateEmail(customerDTO.getEmail());\r\n            }\r\n            Customer customer = new Customer();\r\n            customer.setName(capitalizeFirstLetters(customerDTO.getName()));\r\n            customer.setPhoneNumber(customerDTO.getPhoneNumber());\r\n            customer.setEmail(customerDTO.getEmail());\r\n            customer.setAddress(customerDTO.getAddress());\r\n            customer.setCreatedBy(username);\r\n            log.info(\"haha \" + a.getStore().getId());\r\n            Store store = storeRepository.findById(a.getStore().getId()).orElseThrow();\r\n            System.out.println(store.getStoreName());\r\n            customer.setStore(store);\r\n            log.info(\"Saving customer thanh cong : {}\", customer);\r\n            return customerRepository.save(customer);\r\n        } catch (Exception ex) {\r\n            log.error(\"Error creating customer: {}\", ex.getMessage(), ex);\r\n            throw new RuntimeException(\"Không thể tạo khách hàng: \" + ex.getMessage());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<EmployeeCustomerDTO> getCustomerForDebt() {\r\n        List<String> storeList = CurrentUserDetails.getCurrentStores();\r\n        return customerRepository.getCustomersForDebts(storeList);\r\n    }\r\n\r\n    @Override\r\n    public PageResponse<DebtCustomerDTO> getDebtCustomers(Integer pageNo, Integer pageSize, String sortBy, String storeId,\r\n                                                          LocalDate startCreatedAt, LocalDate endCreatedAt, LocalDate startUpdatedAt,\r\n                                                          LocalDate endUpdatedAt, String customerName, String phoneNumber, String email,\r\n                                                          String address, Double fromAmount, Double toAmount, String createdBy) {\r\n\r\n        Sort sort = Sort.by(\"createdAt\").descending();\r\n\r\n        int p = 0;\r\n        if(pageNo >= 0){\r\n            p = pageNo - 1;\r\n        }\r\n\r\n        if (StringUtils.hasLength(sortBy)) {\r\n            Pattern pattern = Pattern.compile(\"(\\\\w+?)(:)(asc|desc)\");\r\n            Matcher matcher = pattern.matcher(sortBy);\r\n            if (matcher.find()) {\r\n                String columnName = matcher.group(1);\r\n                if (matcher.group(3).equalsIgnoreCase(\"asc\")) {\r\n                    sort = Sort.by(columnName).ascending();\r\n                } else {\r\n                    sort = Sort.by(columnName).descending();\r\n                }\r\n            }\r\n        }\r\n\r\n        List<String> storeList;\r\n        if(!StringUtils.hasLength(storeId)){\r\n            storeList = CurrentUserDetails.getCurrentStores();\r\n        }else{\r\n            String[] list = storeId.split(\" \");\r\n            storeList = Arrays.stream(list).toList();\r\n        }\r\n\r\n        Pageable pageable = PageRequest.of(p, pageSize, sort);\r\n\r\n        Page<Customer> listCustomer = customerRepository.searchForDebtCustomer(storeList, startCreatedAt!=null ? startCreatedAt.atStartOfDay() : null,\r\n                endCreatedAt!=null ? endCreatedAt.atTime(23, 59, 59) : null, startUpdatedAt!=null ? startUpdatedAt.atStartOfDay() : null,\r\n                endUpdatedAt!=null ? endUpdatedAt.atTime(23, 59, 59) : null, customerName, phoneNumber,\r\n                email, address, fromAmount, toAmount, createdBy, pageable);\r\n\r\n        List<DebtCustomerDTO> dtos = listCustomer.stream().map(customerConverter::debtCustomerDTO).toList();\r\n\r\n        return PageResponse.<DebtCustomerDTO>builder()\r\n                .pageNo(pageNo)\r\n                .pageSize(pageSize)\r\n                .data(dtos)\r\n                .totalPages((long) listCustomer.getTotalPages())\r\n                .build();\r\n    }\r\n\r\n    @Override\r\n    public void updateCustomerDebt(String id, CustomerDebtUpdateRequest request) {\r\n        Customer update = customerConverter.toCustomerEntity(request);\r\n        Customer now = customerRepository.findById(id).orElseThrow(() -> new AppException(ErrorCode.USER_NOT_EXISTED));\r\n        if(request.getPhoneNumber()!=null){\r\n            if(!request.getPhoneNumber().equals(now.getPhoneNumber()) && customerRepository.existsByPhoneNumber(request.getPhoneNumber())){\r\n                throw new AppException(ErrorCode.PHONENUMBER_EXISTED);\r\n            }\r\n        }\r\n        if(request.getEmail()!=null){\r\n            if(!request.getEmail().equals(now.getEmail()) && customerRepository.existsByEmail(request.getEmail())){\r\n                throw new AppException(ErrorCode.EMAIL_EXISTED);\r\n            }\r\n        }\r\n        try{\r\n            Field[] fields = Customer.class.getDeclaredFields();\r\n            for(Field field : fields){\r\n                field.setAccessible(true);\r\n                if(field.get(update)!=null){\r\n                    field.set(now,field.get(update));\r\n                }\r\n            }\r\n            customerRepository.save(now);\r\n        }catch (Exception e){\r\n            throw new AppException(ErrorCode.UNCATEGORIZED);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void createCustomerDebt(CustomerCreationRequest request) {\r\n        if(customerRepository.existsByPhoneNumber(request.getPhoneNumber())){\r\n            throw new AppException(ErrorCode.PHONENUMBER_EXISTED);\r\n        }\r\n        if(request.getEmail()!=null && customerRepository.existsByEmail(request.getEmail())){\r\n            throw new AppException(ErrorCode.EMAIL_EXISTED);\r\n        }\r\n        Customer customer = customerConverter.toCustomerEntity(request);\r\n        Store store = storeRepository.findById(request.getStoreId()).orElseThrow(() -> new AppException(ErrorCode.NOT_FOUND));\r\n        customer.setStore(store);\r\n        customer.setId(null);\r\n        customerRepository.save(customer);\r\n    }\r\n\r\n    @Override\r\n    public DebtCustomerDTO getDebtCustomerById(String id) {\r\n        Customer customer = customerRepository.findById(id).orElseThrow(() -> new AppException(ErrorCode.USER_NOT_EXISTED));\r\n        return customerConverter.debtCustomerDTO(customer);\r\n    }\r\n\r\n    public String capitalizeFirstLetters(String input) {\r\n        if (input == null || input.isEmpty()) {\r\n            return input;\r\n        }\r\n        String[] words = input.split(\"\\\\s+\");\r\n        StringBuilder capitalizedString = new StringBuilder();\r\n        for (String word : words) {\r\n            if (word.length() > 0) {\r\n                capitalizedString.append(word.substring(0, 1).toUpperCase())\r\n                        .append(word.substring(1).toLowerCase())\r\n                        .append(\" \");\r\n            }\r\n        }\r\n        return capitalizedString.toString().trim();\r\n    }\r\n\r\n    private void validatePhoneNumber(String phoneNumber) {\r\n        if (phoneNumber == null || !phoneNumber.matches(\"^0\\\\d{9}$\")) {\r\n            throw new IllegalArgumentException(\"SDT phải gồm 10 chữ số và bắt đầu bằng 0.\");\r\n        }\r\n    }\r\n\r\n    private void validateEmail(String email) {\r\n        if (!email.matches(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,6}$\")) {\r\n            throw new IllegalArgumentException(\"Email không đúng định dạng.\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/service/impl/CustomerServiceImpl.java b/swp391/src/main/java/org/group5/swp391/service/impl/CustomerServiceImpl.java
--- a/swp391/src/main/java/org/group5/swp391/service/impl/CustomerServiceImpl.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/service/impl/CustomerServiceImpl.java	(date 1742498244315)
@@ -3,6 +3,7 @@
 import org.group5.swp391.dto.debt.CustomerCreationRequest;
 import org.group5.swp391.dto.debt.CustomerDebtUpdateRequest;
 import org.group5.swp391.dto.debt.DebtCustomerDTO;
+import jakarta.transaction.Transactional;
 import org.group5.swp391.dto.employee.CustomerUpdateRequest;
 import org.group5.swp391.dto.response.PageResponse;
 import org.group5.swp391.entity.Account;
@@ -22,6 +23,7 @@
 import org.group5.swp391.repository.CustomerRepository;
 import org.group5.swp391.repository.StoreRepository;
 import org.group5.swp391.utils.CurrentUserDetails;
+import org.hibernate.id.enhanced.CustomOptimizerDescriptor;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.PageRequest;
 import org.springframework.data.domain.Pageable;
@@ -132,11 +134,13 @@
         existingCustomer.setPhoneNumber(updatedCustomer.getPhoneNumber());
         existingCustomer.setEmail(updatedCustomer.getEmail());
         existingCustomer.setAddress(updatedCustomer.getAddress());
+        existingCustomer.setBalance(updatedCustomer.getBalance());
         existingCustomer.setUpdatedAt(LocalDateTime.now());
         return customerRepository.save(existingCustomer);
     }
 
     @Override
+    @Transactional
     public Customer InvoiceUpdateCustomer(String phoneNumber, CustomerUpdateRequest updatedCustomer) {
         Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
         if (authentication == null || !authentication.isAuthenticated()) {
@@ -147,12 +151,9 @@
                 .orElseThrow(() -> new ResponseStatusException(NOT_FOUND, "Tài khoản không tồn tại"));
         Employee a = employeeRepository.findStoreIdByAccountEmpId(account.getId());
         Customer existingCustomer = customerRepository.findByPhoneNumber(phoneNumber);
-        System.out.println(existingCustomer.getName());
-        System.out.println(updatedCustomer.getName());
-        if(existingCustomer!=null) {
-            if(!existingCustomer.getName().equals(updatedCustomer.getName())) {
-                throw new IllegalArgumentException("Số điện thoại này là của khách hàng khác");
-            }
+        Customer existingCustomerByNewPhone = customerRepository.findByPhoneNumber(updatedCustomer.getPhoneNumberNew());
+        if(existingCustomerByNewPhone!=null) {
+                throw new AppException(ErrorCode.PHONENUMBER_EXISTED);
         }
         validatePhoneNumber(updatedCustomer.getPhoneNumberNew());
         existingCustomer.setCreatedBy(username);
@@ -166,6 +167,7 @@
 
 
     @Override
+    @Transactional
     public Customer createCustomer(EmployeeCustomerDTO customerDTO) {
         Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
         if (authentication == null || !authentication.isAuthenticated()) {
@@ -174,15 +176,25 @@
         String username = authentication.getName();
         Account account = accountRepository.findByUsername(username)
                 .orElseThrow(() -> new ResponseStatusException(NOT_FOUND, "Tài khoản không tồn tại"));
-        log.info(account.getId());
         Employee a = employeeRepository.findStoreIdByAccountEmpId(account.getId());
-        try {
             validatePhoneNumber(customerDTO.getPhoneNumber());
             if (customerDTO.getEmail() != null) {
                 validateEmail(customerDTO.getEmail());
             }
             Customer customer = new Customer();
             customer.setName(capitalizeFirstLetters(customerDTO.getName()));
+            Customer existingCustomer = customerRepository.findByPhoneNumber(customerDTO.getPhoneNumber());
+            List<Customer> existingCustomerEmail = customerRepository.findByEmail(customerDTO.getEmail());
+            if(existingCustomer!=null) {
+                throw new AppException(ErrorCode.PHONENUMBER_EXISTED);
+            }
+            if(customerDTO.getEmail() !=null) {
+                for (Customer c : existingCustomerEmail){
+                    if(c.getEmail().equals(customerDTO.getEmail())) {
+                        throw new AppException(ErrorCode.EMAIL_EXISTED);
+                    }
+                }
+            }
             customer.setPhoneNumber(customerDTO.getPhoneNumber());
             customer.setEmail(customerDTO.getEmail());
             customer.setAddress(customerDTO.getAddress());
@@ -193,10 +205,6 @@
             customer.setStore(store);
             log.info("Saving customer thanh cong : {}", customer);
             return customerRepository.save(customer);
-        } catch (Exception ex) {
-            log.error("Error creating customer: {}", ex.getMessage(), ex);
-            throw new RuntimeException("Không thể tạo khách hàng: " + ex.getMessage());
-        }
     }
 
     @Override
@@ -323,13 +331,13 @@
 
     private void validatePhoneNumber(String phoneNumber) {
         if (phoneNumber == null || !phoneNumber.matches("^0\\d{9}$")) {
-            throw new IllegalArgumentException("SDT phải gồm 10 chữ số và bắt đầu bằng 0.");
+            throw new AppException(ErrorCode.PHONENUMBER_INVALID);
         }
     }
 
     private void validateEmail(String email) {
         if (!email.matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,6}$")) {
-            throw new IllegalArgumentException("Email không đúng định dạng.");
+            throw new AppException(ErrorCode.EMAIL_INVALID);
         }
     }
 }
Index: swp391/src/main/java/org/group5/swp391/service/impl/StoreServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.service.impl;\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.group5.swp391.converter.StoreConverter;\r\nimport org.group5.swp391.dto.response.AdminResponse.ViewStoreResponse;\r\nimport org.group5.swp391.dto.store_owner.all_store.StoreInfoDTO;\r\nimport org.group5.swp391.entity.Account;\r\nimport org.group5.swp391.entity.Store;\r\nimport org.group5.swp391.exception.AppException;\r\nimport org.group5.swp391.exception.ErrorCode;\r\nimport org.group5.swp391.repository.AccountRepository;\r\nimport org.group5.swp391.repository.StoreRepository;\r\nimport org.group5.swp391.service.StoreService;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.PageRequest;\r\nimport org.springframework.data.domain.Sort;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n@RequiredArgsConstructor\r\n@Service\r\npublic class StoreServiceImpl implements StoreService {\r\n    private final StoreRepository storeRepository;\r\n    private final StoreConverter storeConverter;\r\n    private final AccountRepository accountRepository;\r\n\r\n    @Override\r\n    public Page<StoreInfoDTO> getStores(String storeName, int page, int size, String sortBy, boolean descending) {\r\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\n        if (authentication == null || !authentication.isAuthenticated()) {\r\n            return null;\r\n        }\r\n        String username = authentication.getName();\r\n        Account account = accountRepository.findByUsername(username).orElseThrow(null);\r\n        Sort sort = descending ? Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();\r\n        PageRequest pageRequest = PageRequest.of(page, size, sort);\r\n        if (storeName == null || storeName.isEmpty()) {\r\n            return storeRepository.findByStoreAccount(account, pageRequest).map(storeConverter::toStoreDTO);\r\n        }\r\n        return storeRepository.findByStoreAccountAndStoreNameContainingIgnoreCase(account, storeName, pageRequest).map(storeConverter::toStoreDTO);\r\n    }\r\n\r\n    public List<ViewStoreResponse> getAllStores() {\r\n        return storeRepository.findAll().stream().map(store ->\r\n                ViewStoreResponse.builder()\r\n                        .storeID(store.getId())\r\n                        .storeName(store.getStoreName())\r\n                        .address(store.getAddress())\r\n                        .hotline(store.getHotline())\r\n                        .description(store.getDescription())\r\n                        .operatingHour(store.getOperatingHour())\r\n                        .expireAt(store.getExpireAt())\r\n                        .image(store.getImage())\r\n                        .accountName(store.getStoreAccount().getUsername())\r\n                        .subscriptionPlanID(store.getSubscriptionPlan().getId())\r\n                        .createdAt(store.getCreatedAt())\r\n                        .updateAt(store.getUpdatedAt())\r\n                        .subscriptionPlanName(store.getSubscriptionPlan().getName())\r\n                        .subscriptionPlanPrice(store.getSubscriptionPlan().getPrice())\r\n                        .subscriptionTimeOfExpiration(store.getSubscriptionPlan().getTimeOfExpiration())\r\n                        .build()\r\n        ).collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public List<StoreInfoDTO> getStoresForDebt() {\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        Account account = accountRepository.findByUsername(username).orElseThrow(() -> new AppException(ErrorCode.USER_NOT_EXISTED));\r\n        List<Store> storeList = account.getStores();\r\n        return storeList.stream().map(\r\n                item -> StoreInfoDTO.builder()\r\n                        .storeID(item.getId())\r\n                        .storeName(item.getStoreName())\r\n                        .build())\r\n                .toList();\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/service/impl/StoreServiceImpl.java b/swp391/src/main/java/org/group5/swp391/service/impl/StoreServiceImpl.java
--- a/swp391/src/main/java/org/group5/swp391/service/impl/StoreServiceImpl.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/service/impl/StoreServiceImpl.java	(date 1742498244318)
@@ -1,24 +1,32 @@
 package org.group5.swp391.service.impl;
 
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.transaction.Transactional;
 import lombok.RequiredArgsConstructor;
 import org.group5.swp391.converter.StoreConverter;
+import org.group5.swp391.dto.request.store_request.StoreRequest;
 import org.group5.swp391.dto.response.AdminResponse.ViewStoreResponse;
+import org.group5.swp391.dto.response.account_response.AccountResponse;
+import org.group5.swp391.dto.response.store_response.StoreResponse;
 import org.group5.swp391.dto.store_owner.all_store.StoreInfoDTO;
-import org.group5.swp391.entity.Account;
-import org.group5.swp391.entity.Store;
+import org.group5.swp391.entity.*;
 import org.group5.swp391.exception.AppException;
 import org.group5.swp391.exception.ErrorCode;
-import org.group5.swp391.repository.AccountRepository;
-import org.group5.swp391.repository.StoreRepository;
+import org.group5.swp391.repository.*;
 import org.group5.swp391.service.StoreService;
+import org.group5.swp391.service.SubscriptionPlanService;
+import org.group5.swp391.service.VNPayService;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.PageRequest;
 import org.springframework.data.domain.Sort;
+import org.springframework.http.HttpStatus;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.context.SecurityContextHolder;
 import org.springframework.stereotype.Service;
 
-import java.util.List;
+import java.text.NumberFormat;
+import java.time.LocalDateTime;
+import java.util.*;
 import java.util.stream.Collectors;
 
 @RequiredArgsConstructor
@@ -27,6 +35,10 @@
     private final StoreRepository storeRepository;
     private final StoreConverter storeConverter;
     private final AccountRepository accountRepository;
+    private final VNPayService vnPayService;
+    private final NotificationRepository notificationRepository;
+    private final SubscriptionPlanService subscriptionPlanService;
+    private final AppStatisticsRepository appStatisticsRepository;
 
     @Override
     public Page<StoreInfoDTO> getStores(String storeName, int page, int size, String sortBy, boolean descending) {
@@ -72,11 +84,293 @@
         Account account = accountRepository.findByUsername(username).orElseThrow(() -> new AppException(ErrorCode.USER_NOT_EXISTED));
         List<Store> storeList = account.getStores();
         return storeList.stream().map(
-                item -> StoreInfoDTO.builder()
-                        .storeID(item.getId())
-                        .storeName(item.getStoreName())
-                        .build())
+                        item -> StoreInfoDTO.builder()
+                                .storeID(item.getId())
+                                .storeName(item.getStoreName())
+                                .build())
                 .toList();
     }
 
+    // xử lí dữ liệu trả về để tạo cửa hàng mới
+    @Transactional
+    public String paymentCreateStore(String username, String vnp_TransactionNo, double amount) {
+
+        NumberFormat nf = NumberFormat.getInstance(new Locale("vi", "VN"));
+        String message = "Bạn đã thanh toán " + nf.format(amount) + " thành công.";
+
+        // Tạo thông báo thanh toán thành công
+        Notification notification = new Notification();
+        Account account = accountRepository.findByUsername(username).orElseThrow(() -> new AppException(ErrorCode.USER_NOT_EXISTED));
+        notification.setTargetAccount(account);
+        notification.setCreatedBy("admin");
+        notification.setIsRead(false);
+        notification.setMessage(message);
+        notificationRepository.save(notification);
+
+        // Lưu lịch sử giao dịch vào hệ thống
+        AppStatistics appStatistics = new AppStatistics();
+        appStatistics.setTransactionNo(vnp_TransactionNo);
+        appStatistics.setSubcriptionDescription(message);
+        appStatistics.setSubcriptionPlanName(subscriptionPlanService.getSubscriptionPlanByPrice(amount).getName());
+        appStatistics.setSubcriptionPlanPrice(amount);
+        appStatistics.setSubcriptionTimeOfExpiration(subscriptionPlanService.getSubscriptionPlanByPrice(amount).getTimeOfExpiration());
+        appStatisticsRepository.save(appStatistics);
+
+        return message;
+    }
+
+    // tạo cửa hàng mới
+    @Transactional
+    public StoreResponse createNewStore(StoreRequest request, String transactionNo, String username) {
+        // Kiểm tra transactionNo trong app_statistics
+        Optional<AppStatistics> optionalAppStatistics = appStatisticsRepository.findByTransactionNo(transactionNo);
+
+        Account account = accountRepository.findByUsername(username)
+                .orElseThrow(() -> new IllegalArgumentException("Tài khoản không tồn tại."));
+
+        if (optionalAppStatistics.isEmpty()) {
+            throw new IllegalArgumentException("TransactionNo không hợp lệ hoặc không tồn tại.");
+        }
+
+        AppStatistics appStatistics = optionalAppStatistics.get();
+
+        // Kiểm tra điều kiện trước khi tạo cửa hàng
+        if (appStatistics.getStore() != null) {
+            throw new IllegalArgumentException("Giao dịch này đã được xử lý.");
+        }
+
+        if (!username.equals(appStatistics.getCreatedBy())) {
+            throw new IllegalArgumentException("Người thực hiện không hợp lệ.");
+        }
+
+        // Tính expireAt dựa vào subscriptionTimeOfExpiration
+        Integer subscriptionTime = appStatistics.getSubcriptionTimeOfExpiration();
+        LocalDateTime expireAt = (subscriptionTime != null) ? LocalDateTime.now().plusMonths(subscriptionTime) : null;
+
+        SubscriptionPlan subscriptionPlan = subscriptionPlanService.getSubscriptionPlanByPrice(appStatistics.getSubcriptionPlanPrice());
+
+        // Tạo mới cửa hàng
+        Store newStore = new Store();
+        newStore.setStoreName(request.getStoreName());
+        newStore.setAddress(request.getAddress());
+        newStore.setHotline(request.getHotline());
+        newStore.setDescription(request.getDescription());
+        newStore.setOperatingHour(request.getOperatingHour());
+        newStore.setExpireAt(expireAt);
+        newStore.setStoreAccount(account);
+        newStore.setImage(request.getImage());
+        newStore.setSubscriptionPlan(subscriptionPlan);
+
+        // Lưu cửa hàng vào DB
+        Store savedStore = storeRepository.save(newStore);
+
+        // Cập nhật storeid vào app_statistics
+        appStatistics.setStore(newStore);
+        appStatisticsRepository.save(appStatistics);
+
+        // Tạo thông báo thanh toán thành công
+        Notification notification = new Notification();
+        notification.setTargetAccount(account);
+        notification.setCreatedBy("admin");
+        notification.setIsRead(false);
+        notification.setMessage("Tạo cửa hàng thành công.");
+        notificationRepository.save(notification);
+
+        return StoreResponse.builder()
+                .storeID(savedStore.getId())
+                .storeName(savedStore.getStoreName())
+                .address(savedStore.getAddress())
+                .hotline(savedStore.getHotline())
+                .description(savedStore.getDescription())
+                .operatingHour(savedStore.getOperatingHour())
+                .expireAt(savedStore.getExpireAt())
+                .image(savedStore.getImage())
+                .build();
+    }
+
+    // cập nhật thời hạn cho cửa hàng
+    @Transactional
+    public String updateStoreExpiration(String username, String storeID, double amount, String vnp_TransactionNo) {
+
+        Account account = accountRepository.findByUsername(username)
+                .orElseThrow(() -> new IllegalArgumentException("Tài khoản không tồn tại."));
+
+        if (storeID == null) {
+            throw new IllegalArgumentException("Không tìm thấy storeID trong vnp_OrderInfo.");
+        }
+
+        // Tìm cửa hàng theo storeID
+        Store store = storeRepository.findById(storeID)
+                .orElseThrow(() -> new AppException(ErrorCode.NOT_FOUND));
+
+        // Kiểm tra cửa hàng có thuộc người dùng không
+        if (!store.getStoreAccount().equals(account)) {
+            throw new IllegalArgumentException("Cửa hàng không thuộc quyền sở hữu của người dùng.");
+        }
+
+        // Lấy thông tin gói đăng ký của cửa hàng
+        SubscriptionPlan subscriptionPlan = subscriptionPlanService.getSubscriptionPlanByPrice(amount);
+        if (subscriptionPlan == null) {
+            throw new IllegalArgumentException("Gói đăng ký không phù hợp.");
+        }
+
+        // Cập nhật expire_at dựa trên thời gian hết hạn của gói đăng ký
+        Integer subscriptionTime = subscriptionPlan.getTimeOfExpiration();
+        if (subscriptionTime == null) {
+            throw new IllegalArgumentException("Thời hạn gói đăng ký không hợp lệ.");
+        }
+
+        store.setExpireAt(LocalDateTime.now().plusMonths(subscriptionTime));
+        storeRepository.save(store);
+
+        String message = "Cập nhật ngày hết hạn thành công cho cửa hàng " + store.getStoreName();
+
+        // Tạo thông báo thanh toán thành công
+        Notification notification = new Notification();
+        notification.setTargetAccount(account);
+        notification.setCreatedBy("admin");
+        notification.setIsRead(false);
+        notification.setMessage(message);
+        notificationRepository.save(notification);
+
+        // Lưu lịch sử giao dịch
+        AppStatistics appStatistics = new AppStatistics();
+        appStatistics.setTransactionNo(vnp_TransactionNo);
+        appStatistics.setSubcriptionDescription(message);
+        appStatistics.setSubcriptionPlanName(subscriptionPlanService.getSubscriptionPlanByPrice(amount).getName());
+        appStatistics.setSubcriptionPlanPrice(amount);
+        appStatistics.setSubcriptionTimeOfExpiration(subscriptionPlanService.getSubscriptionPlanByPrice(amount).getTimeOfExpiration());
+        appStatistics.setStore(store);
+        appStatisticsRepository.save(appStatistics);
+
+        return message;
+    }
+
+    // xử lí cập nhật thời hạn hoặc tạo mới cửa hàng
+    @Transactional
+    public String handlePayment(String username, String vnp_TxnRef, String vnp_TransDate, HttpServletRequest req) {
+        // Gọi VNPay API để lấy thông tin giao dịch
+        Map<String, Object> transaction = vnPayService.queryPayment(vnp_TxnRef, vnp_TransDate, req);
+
+        // Kiểm tra nếu VNPay trả về lỗi
+        if (transaction.containsKey("error")) {
+            transaction.put("status", HttpStatus.BAD_REQUEST.value());
+            transaction.put("message", "Không lấy được lịch sử thanh toán: " + transaction.get("error"));
+            return "Không lấy được lịch sử thanh toán: " + transaction.get("error");
+        }
+
+        // Kiểm tra vnp_ResponseCode (chỉ xử lý nếu == "00")
+        String vnp_ResponseCode = (String) transaction.get("vnp_ResponseCode");
+        if (!"00".equals(vnp_ResponseCode)) {
+            transaction.put("status", HttpStatus.BAD_REQUEST.value());
+            transaction.put("message", "vnp_ResponseCode: " + vnp_ResponseCode);
+            return "vnp_ResponseCode: " + vnp_ResponseCode;
+        }
+
+        String vnp_TransactionStatus = (String) transaction.get("vnp_TransactionStatus");
+        if (!"00".equals(vnp_TransactionStatus)) {
+            transaction.put("status", HttpStatus.BAD_REQUEST.value());
+            transaction.put("message", "vnp_TransactionStatus: " + vnp_TransactionStatus);
+            return "Giao dịch chưa hoàn tất";
+        }
+        if ("00".equals(vnp_ResponseCode) && "00".equals(vnp_TransactionStatus)) {
+            // Trích xuất thông tin cần thiết
+            String vnp_OrderInfo = (String) transaction.get("vnp_OrderInfo");
+            String vnp_TransactionNo = (String) transaction.get("vnp_TransactionNo");
+            String vnp_Amount = (String) transaction.get("vnp_Amount");
+            double amount = Double.parseDouble(vnp_Amount) / 100;
+
+            // Kiểm tra nếu giao dịch đã tồn tại trong appStatistics
+            if (appStatisticsRepository.existsByTransactionNo(vnp_TransactionNo)) {
+                transaction.put("status", HttpStatus.OK.value());
+                transaction.put("message", "Giao dịch đã được ghi nhận.");
+                return "Giao dịch đã được ghi nhận.";
+            }
+
+            // Kiểm tra xem vnp_OrderInfo có chứa Store ID không
+            String storeID = extractStoreID(vnp_OrderInfo);
+            if (storeID == null) {
+                return paymentCreateStore(username, vnp_TransactionNo, amount);
+            } else {
+                return updateStoreExpiration(username, storeID, amount, vnp_TransactionNo);
+            }
+        } else {
+            return "Lỗi giao dịch." + "vnp_ResponseCode: " + vnp_ResponseCode + "vnp_TransactionStatus: " + vnp_TransactionStatus;
+        }
+
+    }
+
+    // trích xuất Store ID từ vnp_OrderInfo
+    private String extractStoreID(String vnp_OrderInfo) {
+        if (vnp_OrderInfo == null || !vnp_OrderInfo.contains("ID:")) {
+            return null;
+        }
+        return vnp_OrderInfo.replaceAll(".*ID:\\s*", "").trim();
+    }
+
+    // cập nhật thông tin cửa hàng
+    public StoreResponse updateStoreInfor(String storeID, StoreRequest request, String username) {
+        Account account = accountRepository.findByUsername(username)
+                .orElseThrow(() -> new IllegalArgumentException("Tài khoản không tồn tại."));
+        if (storeID == null) {
+            throw new IllegalArgumentException("Không tìm thấy storeID");
+        }
+        Store store = storeRepository.findById(storeID)
+                .orElseThrow(() -> new AppException(ErrorCode.NOT_FOUND));
+        if (!store.getStoreAccount().equals(account)) {
+            throw new IllegalArgumentException("Cửa hàng không thuộc quyền sở hữu của người dùng.");
+        }
+
+        store.setStoreName(request.getStoreName());
+        store.setAddress(request.getAddress());
+        store.setHotline(request.getHotline());
+        store.setOperatingHour(request.getOperatingHour());
+        store.setDescription(request.getDescription());
+        store.setImage(request.getImage());
+
+        Store updateStore = storeRepository.save(store);
+
+        return StoreResponse.builder()
+                .storeID(updateStore.getId())
+                .storeName(updateStore.getStoreName())
+                .address(updateStore.getAddress())
+                .hotline(updateStore.getHotline())
+                .operatingHour(updateStore.getOperatingHour())
+                .description(updateStore.getDescription())
+                .image(updateStore.getImage())
+                .expireAt(updateStore.getExpireAt())
+                .build();
+    }
+
+    // lấy danh sách những yêu cầu tạo cửa hàng mới
+    public List<Map<String, Object>> getRequestCreateStores(String username) {
+        List<Object[]> results = appStatisticsRepository.findTransactionAndExpirationWithNullStoreAndCreatedBy(username);
+        List<Map<String, Object>> response = new ArrayList<>();
+
+        for (Object[] row : results) {
+            Map<String, Object> map = new HashMap<>();
+            map.put("transactionNo", row[0]);
+            map.put("subcriptionTimeOfExpiration", row[1]);
+            response.add(map);
+        }
+        return response;
+    }
+
+    // lấy thông tin store theo ID
+    public StoreResponse getStoreById(String storeID, String username) {
+        Store store = storeRepository.findByIdAndStoreAccount_Username(storeID, username)
+                .orElseThrow(() -> new AppException(ErrorCode.NOT_FOUND));
+
+        return StoreResponse.builder()
+                .storeID(store.getId())
+                .storeName(store.getStoreName())
+                .address(store.getAddress())
+                .hotline(store.getHotline())
+                .operatingHour(store.getOperatingHour())
+                .description(store.getDescription())
+                .image(store.getImage())
+                .expireAt(store.getExpireAt())
+                .build();
+    }
+
 }
\ No newline at end of file
Index: swp391/src/main/java/org/group5/swp391/service/impl/AppStatisticsServiceServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.service.impl;\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.group5.swp391.dto.response.AdminResponse.AppStatisticsResponse;\r\nimport org.group5.swp391.entity.AppStatistics;\r\nimport org.group5.swp391.repository.AppStatisticsRepository;\r\nimport org.group5.swp391.service.AppStatisticsService;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class AppStatisticsServiceServiceImpl implements AppStatisticsService {\r\n\r\n    private final AppStatisticsRepository appStatisticsRepository;\r\n\r\n    // lấy danh sách giao dịch các gói dịch vụ của trang web\r\n    public List<AppStatisticsResponse> getStatistics() {\r\n        List<AppStatistics> statistics = appStatisticsRepository.findAll();\r\n        return statistics.stream()\r\n                .map(stat -> AppStatisticsResponse.builder()\r\n                        .appStatisticsID(stat.getId())\r\n                        .storeID(stat.getStore().getId())\r\n                        .storeName(stat.getStore().getStoreName())\r\n                        .subcriptionPlanName(stat.getSubcriptionPlanName())\r\n                        .subcriptionPlanPrice(stat.getSubcriptionPlanPrice())\r\n                        .subcriptionDescription(stat.getSubcriptionDescription())\r\n                        .subcriptionTimeOfExpiration(stat.getSubcriptionTimeOfExpiration())\r\n                        .createdAt(stat.getCreatedAt())\r\n                        .createdBy(stat.getCreatedBy())\r\n                        .transactionNo(stat.getTransactionNo())\r\n                        .build())\r\n                .collect(Collectors.toList());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/service/impl/AppStatisticsServiceServiceImpl.java b/swp391/src/main/java/org/group5/swp391/service/impl/AppStatisticsServiceServiceImpl.java
--- a/swp391/src/main/java/org/group5/swp391/service/impl/AppStatisticsServiceServiceImpl.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/service/impl/AppStatisticsServiceServiceImpl.java	(date 1742498244313)
@@ -23,8 +23,7 @@
         return statistics.stream()
                 .map(stat -> AppStatisticsResponse.builder()
                         .appStatisticsID(stat.getId())
-                        .storeID(stat.getStore().getId())
-                        .storeName(stat.getStore().getStoreName())
+                        .storeID(stat.getStore() != null ? stat.getStore().getId() : null)
                         .subcriptionPlanName(stat.getSubcriptionPlanName())
                         .subcriptionPlanPrice(stat.getSubcriptionPlanPrice())
                         .subcriptionDescription(stat.getSubcriptionDescription())
@@ -35,4 +34,10 @@
                         .build())
                 .collect(Collectors.toList());
     }
+
+
+    // lấy danh sách giao dich có StoreID null
+    public List<String> getTransactionNosWithNullStore() {
+        return appStatisticsRepository.findTransactionNosWithNullStore();
+    }
 }
Index: swp391/src/main/java/org/group5/swp391/service/impl/AccountServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.service.impl;\r\n\r\nimport jakarta.persistence.EntityNotFoundException;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.group5.swp391.dto.request.account_request.ChangePasswordAccountRequest;\r\nimport org.group5.swp391.dto.request.account_request.UpdateAccountRequest;\r\nimport org.group5.swp391.dto.request.admin_request.UpdateAccountActiveRequest;\r\nimport org.group5.swp391.dto.response.account_response.AccountResponse;\r\nimport org.group5.swp391.entity.Account;\r\nimport org.group5.swp391.exception.AppException;\r\nimport org.group5.swp391.exception.ErrorCode;\r\nimport org.group5.swp391.repository.AccountRepository;\r\nimport org.group5.swp391.service.AccountService;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class AccountServiceImpl implements AccountService {\r\n    private final AccountRepository accountRepository;\r\n    private final PasswordEncoder passwordEncoder;\r\n\r\n    // lấy danh sách tài khoản theo role\r\n    public List<AccountResponse> getAccountsByRole(String roleCode) {\r\n        return accountRepository.findByRole_Code(roleCode).stream()\r\n                .map(account -> AccountResponse.builder()\r\n                        .accountID(account.getId())\r\n                        .username(account.getUsername())\r\n                        .name(account.getName())\r\n                        .email(account.getEmail())\r\n                        .phoneNumber(account.getPhoneNumber())\r\n                        .avatar(account.getAvatar())\r\n                        .createdAt(account.getCreatedAt())\r\n                        .updatedAt(account.getUpdatedAt())\r\n                        .isActive(account.getIsActive())\r\n                        .gender(account.getGender())\r\n                        .birthDate(account.getBirthDate())\r\n                        .build())\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    // cập nhật trạng thái tài khoản\r\n    public void updateAccountActiveStatus(UpdateAccountActiveRequest request) {\r\n        if (request.getId() == null || request.getId().isEmpty()) {\r\n            throw new AppException(ErrorCode.NOT_FOUND);\r\n        }\r\n        if (request.getIsActive() == null) {\r\n            throw new AppException(ErrorCode.NOT_FOUND);\r\n        }\r\n\r\n        Account account = accountRepository.findById(request.getId())\r\n                .orElseThrow(() -> new AppException(ErrorCode.NOT_FOUND));\r\n\r\n        account.setIsActive(request.getIsActive());\r\n        accountRepository.save(account);\r\n    }\r\n\r\n\r\n    // lấy tài khoản theo ID\r\n    public AccountResponse getAccountsByID(String accountID) {\r\n        return accountRepository.findById(accountID)\r\n                .map(account -> AccountResponse.builder()\r\n                        .accountID(account.getId())\r\n                        .username(account.getUsername())\r\n                        .name(account.getName())\r\n                        .email(account.getEmail())\r\n                        .phoneNumber(account.getPhoneNumber())\r\n                        .avatar(account.getAvatar())\r\n                        .createdAt(account.getCreatedAt())\r\n                        .updatedAt(account.getUpdatedAt())\r\n                        .isActive(account.getIsActive())\r\n                        .gender(account.getGender())\r\n                        .birthDate(account.getBirthDate())\r\n                        .build())\r\n                .orElseThrow(() -> new AppException(ErrorCode.NOT_FOUND));\r\n    }\r\n\r\n    public Optional<Account> getAccount(Account a) {\r\n        return accountRepository.findByUsername(a.getUsername());\r\n    }\r\n\r\n    // lấy thông tin tài khoản theo tên đăng nhập\r\n    public AccountResponse getAccountByUsername(String username) {\r\n        return accountRepository.findByUsername(username)\r\n                .map(account -> AccountResponse.builder()\r\n                        .accountID(account.getId())\r\n                        .username(account.getUsername())\r\n                        .name(account.getName())\r\n                        .email(account.getEmail())\r\n                        .phoneNumber(account.getPhoneNumber())\r\n                        .avatar(account.getAvatar())\r\n                        .createdAt(account.getCreatedAt())\r\n                        .updatedAt(account.getUpdatedAt())\r\n                        .isActive(account.getIsActive())\r\n                        .gender(account.getGender())\r\n                        .birthDate(account.getBirthDate())\r\n                        .build())\r\n                .orElseThrow(() -> new AppException(ErrorCode.NOT_FOUND));\r\n    }\r\n\r\n    // cập nhật thông tin tài khoản\r\n    public AccountResponse updateAccountInfor(String username, UpdateAccountRequest request) {\r\n        Account account = accountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new EntityNotFoundException(\"Not found username: \" + username));\r\n\r\n        if (request.getName() != null) account.setName(request.getName());\r\n        if (request.getPhoneNumber() != null) account.setPhoneNumber(request.getPhoneNumber());\r\n        if (request.getGender() != null) account.setGender(request.getGender());\r\n        if (request.getBirthDate() != null) account.setBirthDate(request.getBirthDate());\r\n        if (request.getAvatar() != null) account.setAvatar(request.getAvatar());\r\n\r\n        Account updatedAccount = accountRepository.save(account);\r\n\r\n        return AccountResponse.builder()\r\n                .accountID(updatedAccount.getId())\r\n                .username(updatedAccount.getUsername())\r\n                .name(updatedAccount.getName())\r\n                .email(updatedAccount.getEmail())\r\n                .phoneNumber(updatedAccount.getPhoneNumber())\r\n                .avatar(updatedAccount.getAvatar())\r\n                .createdAt(updatedAccount.getCreatedAt())\r\n                .updatedAt(updatedAccount.getUpdatedAt())\r\n                .isActive(updatedAccount.getIsActive())\r\n                .gender(updatedAccount.getGender())\r\n                .birthDate(updatedAccount.getBirthDate())\r\n                .build();\r\n    }\r\n\r\n    // lấy ID tài khoản theo tên đăng nhập\r\n    public String getIDByUsername(String username) {\r\n        Optional<Account> account = accountRepository.findByUsername(username);\r\n        if (account.isPresent()) {\r\n            return account.get().getId();\r\n        }\r\n        throw new AppException(ErrorCode.NOT_FOUND);\r\n    }\r\n\r\n    // thay đôi mật khẩu tài khoản\r\n    public boolean changePassword(String username, ChangePasswordAccountRequest request) {\r\n        Optional<Account> optionalAccount = accountRepository.findByUsername(username);\r\n        if (optionalAccount.isPresent()) {\r\n            Account account = optionalAccount.get();\r\n            if (!request.getOldPassword().equals(account.getPassword())) {\r\n                return false;\r\n            }\r\n            account.setPassword(request.getNewPassword());\r\n            accountRepository.save(account);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/service/impl/AccountServiceImpl.java b/swp391/src/main/java/org/group5/swp391/service/impl/AccountServiceImpl.java
--- a/swp391/src/main/java/org/group5/swp391/service/impl/AccountServiceImpl.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/service/impl/AccountServiceImpl.java	(date 1742498244312)
@@ -22,7 +22,6 @@
 @RequiredArgsConstructor
 public class AccountServiceImpl implements AccountService {
     private final AccountRepository accountRepository;
-    private final PasswordEncoder passwordEncoder;
 
     // lấy danh sách tài khoản theo role
     public List<AccountResponse> getAccountsByRole(String roleCode) {
Index: swp391/src/main/java/org/group5/swp391/service/impl/VNPayServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.service.impl;\r\n\r\nimport com.nimbusds.jose.shaded.gson.JsonObject;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.group5.swp391.config.VNPayConfig;\r\nimport org.group5.swp391.entity.SubscriptionPlan;\r\nimport org.group5.swp391.repository.SubscriptionPlanRepository;\r\nimport org.group5.swp391.service.VNPayService;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.DataOutputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.net.HttpURLConnection;\r\nimport java.net.URL;\r\nimport java.net.URLEncoder;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.*;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class VNPayServiceImpl implements VNPayService {\r\n    private final SubscriptionPlanRepository subscriptionPlanRepository;\r\n\r\n    // tạo yêu cầu thanh toán đến VN Pay\r\n    public String createPayment(HttpServletRequest request, double amount, String subscriptionPlanId) throws UnsupportedEncodingException {\r\n        SubscriptionPlan plan = subscriptionPlanRepository.findByIdAndIsActiveTrue(subscriptionPlanId)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"Subscription Plan not exist!\"));\r\n\r\n        if (amount != plan.getPrice()) {\r\n            throw new IllegalArgumentException(\"Amount does not match price of Subscription Plan!\");\r\n        }\r\n\r\n        String vnp_Version = \"2.1.0\";\r\n        String vnp_Command = \"pay\";\r\n        String orderType = \"other\";\r\n        long vnp_Amount = (long) (amount * 100);\r\n        String vnp_TxnRef = VNPayConfig.getRandomNumber(8);\r\n        String vnp_IpAddr = VNPayConfig.getIpAddress(request);\r\n        String vnp_TmnCode = VNPayConfig.vnp_TmnCode;\r\n\r\n//        long amount = Integer.parseInt(request.getParameter(\"amount\"))*100;\r\n//        String bankCode = req.getParameter(\"bankCode\");\r\n//        if (bankCode != null && !bankCode.isEmpty()) {\r\n//            vnp_Params.put(\"vnp_BankCode\", bankCode);\r\n//        }\r\n//        String locate = req.getParameter(\"language\");\r\n//        if (locate != null && !locate.isEmpty()) {\r\n//            vnp_Params.put(\"vnp_Locale\", locate);\r\n//        } else {\r\n//            vnp_Params.put(\"vnp_Locale\", \"vn\");\r\n//        }\r\n\r\n        Map<String, String> vnp_Params = new HashMap<>();\r\n        vnp_Params.put(\"vnp_Version\", vnp_Version);\r\n        vnp_Params.put(\"vnp_Command\", vnp_Command);\r\n        vnp_Params.put(\"vnp_TmnCode\", vnp_TmnCode);\r\n        vnp_Params.put(\"vnp_Amount\", String.valueOf(vnp_Amount));\r\n        vnp_Params.put(\"vnp_CurrCode\", \"VND\");\r\n        vnp_Params.put(\"vnp_BankCode\", \"NCB\");\r\n        vnp_Params.put(\"vnp_OrderType\", orderType);\r\n        vnp_Params.put(\"vnp_Locale\", \"vn\");\r\n        vnp_Params.put(\"vnp_TxnRef\", vnp_TxnRef);\r\n        vnp_Params.put(\"vnp_OrderInfo\", \"Thanh toan don hang:\" + vnp_TxnRef);\r\n        vnp_Params.put(\"vnp_ReturnUrl\", VNPayConfig.vnp_ReturnUrl);\r\n        vnp_Params.put(\"vnp_IpAddr\", vnp_IpAddr);\r\n\r\n        Calendar cld = Calendar.getInstance(TimeZone.getTimeZone(\"Etc/GMT+7\"));\r\n        SimpleDateFormat formatter = new SimpleDateFormat(\"yyyyMMddHHmmss\");\r\n        String vnp_CreateDate = formatter.format(cld.getTime());\r\n        vnp_Params.put(\"vnp_CreateDate\", vnp_CreateDate);\r\n\r\n        cld.add(Calendar.MINUTE, 15);\r\n        String vnp_ExpireDate = formatter.format(cld.getTime());\r\n        vnp_Params.put(\"vnp_ExpireDate\", vnp_ExpireDate);\r\n\r\n        List fieldNames = new ArrayList(vnp_Params.keySet());\r\n        Collections.sort(fieldNames);\r\n        StringBuilder hashData = new StringBuilder();\r\n        StringBuilder query = new StringBuilder();\r\n        Iterator itr = fieldNames.iterator();\r\n        while (itr.hasNext()) {\r\n            String fieldName = (String) itr.next();\r\n            String fieldValue = (String) vnp_Params.get(fieldName);\r\n            if ((fieldValue != null) && (fieldValue.length() > 0)) {\r\n                //Build hash data\r\n                hashData.append(fieldName);\r\n                hashData.append('=');\r\n                hashData.append(URLEncoder.encode(fieldValue, StandardCharsets.US_ASCII.toString()));\r\n                //Build query\r\n                query.append(URLEncoder.encode(fieldName, StandardCharsets.US_ASCII.toString()));\r\n                query.append('=');\r\n                query.append(URLEncoder.encode(fieldValue, StandardCharsets.US_ASCII.toString()));\r\n                if (itr.hasNext()) {\r\n                    query.append('&');\r\n                    hashData.append('&');\r\n                }\r\n            }\r\n        }\r\n\r\n        String queryUrl = query.toString();\r\n        String vnp_SecureHash = VNPayConfig.hmacSHA512(VNPayConfig.secretKey, hashData.toString());\r\n        queryUrl += \"&vnp_SecureHash=\" + vnp_SecureHash;\r\n        String paymentUrl = VNPayConfig.vnp_PayUrl + \"?\" + queryUrl;\r\n\r\n//        com.google.gson.JsonObject job = new JsonObject();\r\n//        job.addProperty(\"code\", \"00\");\r\n//        job.addProperty(\"message\", \"success\");\r\n//        job.addProperty(\"data\", paymentUrl);\r\n//        Gson gson = new Gson();\r\n//        resp.getWriter().write(gson.toJson(job));\r\n\r\n        return paymentUrl;\r\n    }\r\n\r\n    // truy xuất giao dịch VNPay từ TxnRef và PayDate\r\n    public String queryPayment(String vnp_TxnRef, String vnp_TransDate, HttpServletRequest req) {\r\n        try {\r\n            String vnp_RequestId = VNPayConfig.getRandomNumber(8);\r\n            String vnp_Version = \"2.1.0\";\r\n            String vnp_Command = \"querydr\";\r\n            String vnp_TmnCode = VNPayConfig.vnp_TmnCode;\r\n            String vnp_OrderInfo = \"Kiem tra ket qua GD OrderId:\" + vnp_TxnRef;\r\n\r\n            Calendar cld = Calendar.getInstance(TimeZone.getTimeZone(\"Etc/GMT+7\"));\r\n            SimpleDateFormat formatter = new SimpleDateFormat(\"yyyyMMddHHmmss\");\r\n            String vnp_CreateDate = formatter.format(cld.getTime());\r\n\r\n            String vnp_IpAddr = VNPayConfig.getIpAddress(req);\r\n\r\n            JsonObject vnp_Params = new JsonObject();\r\n            vnp_Params.addProperty(\"vnp_RequestId\", vnp_RequestId);\r\n            vnp_Params.addProperty(\"vnp_Version\", vnp_Version);\r\n            vnp_Params.addProperty(\"vnp_Command\", vnp_Command);\r\n            vnp_Params.addProperty(\"vnp_TmnCode\", vnp_TmnCode);\r\n            vnp_Params.addProperty(\"vnp_TxnRef\", vnp_TxnRef);\r\n            vnp_Params.addProperty(\"vnp_OrderInfo\", vnp_OrderInfo);\r\n            vnp_Params.addProperty(\"vnp_TransactionDate\", vnp_TransDate);\r\n            vnp_Params.addProperty(\"vnp_CreateDate\", vnp_CreateDate);\r\n            vnp_Params.addProperty(\"vnp_IpAddr\", vnp_IpAddr);\r\n\r\n            String hash_Data = String.join(\"|\", vnp_RequestId, vnp_Version, vnp_Command, vnp_TmnCode, vnp_TxnRef, vnp_TransDate, vnp_CreateDate, vnp_IpAddr, vnp_OrderInfo);\r\n            String vnp_SecureHash = VNPayConfig.hmacSHA512(VNPayConfig.secretKey, hash_Data);\r\n            vnp_Params.addProperty(\"vnp_SecureHash\", vnp_SecureHash);\r\n\r\n            URL url = new URL(VNPayConfig.vnp_ApiUrl);\r\n            HttpURLConnection con = (HttpURLConnection) url.openConnection();\r\n            con.setRequestMethod(\"POST\");\r\n            con.setRequestProperty(\"Content-Type\", \"application/json\");\r\n            con.setDoOutput(true);\r\n\r\n            DataOutputStream wr = new DataOutputStream(con.getOutputStream());\r\n            wr.writeBytes(vnp_Params.toString());\r\n            wr.flush();\r\n            wr.close();\r\n\r\n            int responseCode = con.getResponseCode();\r\n            System.out.println(\"Sending 'POST' request to URL: \" + url);\r\n            System.out.println(\"Post Data: \" + vnp_Params);\r\n            System.out.println(\"Response Code: \" + responseCode);\r\n\r\n            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\r\n            StringBuilder response = new StringBuilder();\r\n            String output;\r\n            while ((output = in.readLine()) != null) {\r\n                response.append(output);\r\n            }\r\n            in.close();\r\n\r\n            return response.toString();\r\n        } catch (Exception e) {\r\n            return \"Error: \" + e.getMessage();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/service/impl/VNPayServiceImpl.java b/swp391/src/main/java/org/group5/swp391/service/impl/VNPayServiceImpl.java
--- a/swp391/src/main/java/org/group5/swp391/service/impl/VNPayServiceImpl.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/service/impl/VNPayServiceImpl.java	(date 1742498244320)
@@ -1,5 +1,6 @@
 package org.group5.swp391.service.impl;
 
+import com.nimbusds.jose.shaded.gson.Gson;
 import com.nimbusds.jose.shaded.gson.JsonObject;
 import jakarta.servlet.http.HttpServletRequest;
 import lombok.RequiredArgsConstructor;
@@ -8,7 +9,6 @@
 import org.group5.swp391.repository.SubscriptionPlanRepository;
 import org.group5.swp391.service.VNPayService;
 import org.springframework.stereotype.Service;
-import org.springframework.web.bind.annotation.RequestParam;
 
 import java.io.BufferedReader;
 import java.io.DataOutputStream;
@@ -27,7 +27,7 @@
     private final SubscriptionPlanRepository subscriptionPlanRepository;
 
     // tạo yêu cầu thanh toán đến VN Pay
-    public String createPayment(HttpServletRequest request, double amount, String subscriptionPlanId) throws UnsupportedEncodingException {
+    public String createPayment(HttpServletRequest request, double amount, String subscriptionPlanId, String storeID) throws UnsupportedEncodingException {
         SubscriptionPlan plan = subscriptionPlanRepository.findByIdAndIsActiveTrue(subscriptionPlanId)
                 .orElseThrow(() -> new IllegalArgumentException("Subscription Plan not exist!"));
 
@@ -43,6 +43,10 @@
         String vnp_IpAddr = VNPayConfig.getIpAddress(request);
         String vnp_TmnCode = VNPayConfig.vnp_TmnCode;
 
+        String message = (storeID == null || storeID.isEmpty())
+                ? "Thanh toan don hang: " + vnp_TxnRef
+                : "Thanh toan don hang: " + vnp_TxnRef + ". ID: " + storeID;
+
 //        long amount = Integer.parseInt(request.getParameter("amount"))*100;
 //        String bankCode = req.getParameter("bankCode");
 //        if (bankCode != null && !bankCode.isEmpty()) {
@@ -65,7 +69,7 @@
         vnp_Params.put("vnp_OrderType", orderType);
         vnp_Params.put("vnp_Locale", "vn");
         vnp_Params.put("vnp_TxnRef", vnp_TxnRef);
-        vnp_Params.put("vnp_OrderInfo", "Thanh toan don hang:" + vnp_TxnRef);
+        vnp_Params.put("vnp_OrderInfo", message);
         vnp_Params.put("vnp_ReturnUrl", VNPayConfig.vnp_ReturnUrl);
         vnp_Params.put("vnp_IpAddr", vnp_IpAddr);
 
@@ -118,13 +122,13 @@
     }
 
     // truy xuất giao dịch VNPay từ TxnRef và PayDate
-    public String queryPayment(String vnp_TxnRef, String vnp_TransDate, HttpServletRequest req) {
+    public Map<String, Object> queryPayment(String vnp_TxnRef, String vnp_TransDate, HttpServletRequest req) {
         try {
             String vnp_RequestId = VNPayConfig.getRandomNumber(8);
             String vnp_Version = "2.1.0";
             String vnp_Command = "querydr";
             String vnp_TmnCode = VNPayConfig.vnp_TmnCode;
-            String vnp_OrderInfo = "Kiem tra ket qua GD OrderId:" + vnp_TxnRef;
+            String vnp_OrderInfo = "Kiem tra ket qua GD OrderId: " + vnp_TxnRef;
 
             Calendar cld = Calendar.getInstance(TimeZone.getTimeZone("Etc/GMT+7"));
             SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmss");
@@ -158,11 +162,7 @@
             wr.flush();
             wr.close();
 
-            int responseCode = con.getResponseCode();
-            System.out.println("Sending 'POST' request to URL: " + url);
-            System.out.println("Post Data: " + vnp_Params);
-            System.out.println("Response Code: " + responseCode);
-
+//            int responseCode = con.getResponseCode();
             BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
             StringBuilder response = new StringBuilder();
             String output;
@@ -171,9 +171,11 @@
             }
             in.close();
 
-            return response.toString();
+            // Chuyển đổi JSON String thành Map<String, Object>
+            return new Gson().fromJson(response.toString(), Map.class);
         } catch (Exception e) {
-            return "Error: " + e.getMessage();
+            return Map.of("error", e.getMessage());
         }
     }
 }
+
Index: swp391/src/main/java/org/group5/swp391/service/impl/CategoryServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.service.impl;\r\n\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.group5.swp391.converter.ProductConverter;\r\nimport org.group5.swp391.converter.CategoryConverter;\r\nimport org.group5.swp391.dto.customer_requirement.CustomerCategoryDTO;\r\nimport org.group5.swp391.dto.employee.EmployeeCategoryDTO;\r\nimport org.group5.swp391.dto.employee.EmployeeProductDTO;\r\nimport org.group5.swp391.dto.store_owner.store_detail.StoreDetailCategoryDTO;\r\nimport org.group5.swp391.entity.*;\r\nimport org.group5.swp391.repository.*;\r\nimport org.group5.swp391.dto.store_owner.all_product.StoreCategoryIdAndNameDTO;\r\nimport org.group5.swp391.entity.Category;\r\nimport org.group5.swp391.repository.CategoryRepository;\r\nimport org.group5.swp391.repository.ZoneRepository;\r\nimport org.group5.swp391.service.CategoryService;\r\nimport org.springframework.data.domain.*;\r\nimport org.springframework.security.access.AccessDeniedException;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.web.server.ResponseStatusException;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\nimport static org.springframework.http.HttpStatus.NOT_FOUND;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class CategoryServiceImpl implements CategoryService {\r\n    private final CategoryRepository CategoryRepository;\r\n    private final ZoneRepository zoneRepository;\r\n    private final AccountRepository accountRepository;\r\n    private final EmployeeRepository employeeRepository;\r\n    private final ProductRepository productRepository;\r\n    private final CategoryRepository categoryRepository;\r\n    private final ProductConverter productConverter;\r\n\r\n    private final CategoryConverter categoryConverter;\r\n    private final StoreRepository storeRepository;\r\n\r\n    public EmployeeCategoryDTO convertToCategoryDTO(Category category) {\r\n        long quantity = 0;\r\n        EmployeeCategoryDTO employeeCategoryDTO = new EmployeeCategoryDTO();\r\n\r\n        employeeCategoryDTO.setCategoryID(category.getId());\r\n        employeeCategoryDTO.setName(category.getName());\r\n        employeeCategoryDTO.setDescription(category.getDescription());\r\n\r\n\r\n        return employeeCategoryDTO;\r\n    }\r\n\r\n    public List<EmployeeCategoryDTO> getAllCategories() {\r\n        return CategoryRepository.findAll().stream()\r\n                .map(this::convertToCategoryDTO)\r\n                .collect(Collectors.toList());\r\n    }\r\n    public Page<EmployeeCategoryDTO> getAllCategories(int page, int size, String sortBy, boolean descending) {\r\n        Sort sort = descending ? Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();\r\n        Pageable pageable = PageRequest.of(page, size, sort);\r\n        Page<Category> categoryPage = CategoryRepository.findAll(pageable);\r\n        return categoryPage.map(this::convertToCategoryDTO);\r\n    }\r\n\r\n    @Override\r\n    public Page<EmployeeCategoryDTO> getCategoryBySearch(String name, int page, int size, String sortBy, boolean descending) {\r\n        return null;\r\n    }\r\n\r\n    public Page<EmployeeProductDTO> getProductBySearch(String name, int page, int size, String sortBy, boolean descending){\r\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\n        if (authentication == null || !authentication.isAuthenticated()) {\r\n            throw new AccessDeniedException(\"Bạn chưa đăng nhập!\");\r\n        }\r\n        String username = authentication.getName();\r\n        Account account = accountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResponseStatusException(NOT_FOUND, \"Tài khoản không tồn tại\"));\r\n        Employee a=employeeRepository.findStoreIdByAccountEmpId(account.getId());\r\n        System.out.println(a.getStore().getId());\r\n        Sort sort = descending ? Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();\r\n        Pageable pageable = PageRequest.of(page, size, sort);\r\n        Page<Category> categoryPage = CategoryRepository.findByNameIgnoreCase(name, pageable);\r\n        Page<Product> productPage= productRepository.findByNameAndStoreIdContainingIgnoreCase(name,a.getStore().getId(),pageable);\r\n        return productPage.map(productConverter::toEmployeeProductDTO);\r\n    }\r\n\r\n    public List<StoreCategoryIdAndNameDTO> getAllStoreCategories(){\r\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\n        if (authentication == null || !authentication.isAuthenticated()) {\r\n            return null;\r\n        }\r\n        String username = authentication.getName();\r\n        return CategoryRepository.findCategoriesForUser(username).stream().map(categoryConverter::toStoreCategoryIdAndName).collect(Collectors.toList());\r\n    }\r\n\r\n    //Hieu\r\n    @Override\r\n    public List<CustomerCategoryDTO> getAllCustomerCategories() {\r\n        List<Category> categories = categoryRepository.findAll();\r\n        return categories.stream().map(categoryConverter::toCategoryDTO).collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public StoreDetailCategoryDTO getCategoryByID(String categoryID) throws Exception {\r\n        Category category = categoryRepository.findById(categoryID).orElseThrow(() -> new Exception(\"Không tìm được category\"));\r\n        return categoryConverter.toStoreDetailCategoryDTO(category);\r\n    }\r\n\r\n    @Override\r\n    public List<StoreDetailCategoryDTO> getStoreDetailAllCategoriesByStoreID(String storeID) {\r\n        List<Category> categories = categoryRepository.findCategoryByStore_Id(storeID);\r\n        return categories.stream().map(categoryConverter::toStoreDetailCategoryDTO).collect(Collectors.toList());\r\n    }\r\n\r\n\r\n    @Override\r\n    public Page<StoreDetailCategoryDTO> getStoreDetailCategory(String search, String storeID, int page, int size, String sortBy, boolean descending) {\r\n        Sort sort = descending ? Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();\r\n        Pageable pageable = PageRequest.of(page, size, sort);\r\n        List<StoreDetailCategoryDTO> storeDetailCategoryDTOS;\r\n        List<Category> categories;\r\n        if(search == null) {\r\n            categories = categoryRepository.findCategoriesByStoreID(storeID, pageable);\r\n        } else {\r\n            categories = categoryRepository.findCategories(storeID, search, pageable);\r\n        }\r\n        storeDetailCategoryDTOS = categories.stream().map(categoryConverter::toStoreDetailCategoryDTO).collect(Collectors.toList());\r\n        return new PageImpl<>(storeDetailCategoryDTOS, pageable, (storeDetailCategoryDTOS.size() + 1));\r\n    }\r\n\r\n    @Override\r\n    public void addCategory(StoreDetailCategoryDTO storeDetailCategoryDTO) throws Exception {\r\n        Category category = new Category();\r\n        Store storeExisting = storeRepository\r\n                .findById(storeDetailCategoryDTO.getStoreID()).orElseThrow(() -> new Exception(\"Store not found\"));\r\n        category.setName(storeDetailCategoryDTO.getName());\r\n        category.setDescription(storeDetailCategoryDTO.getDescription());\r\n        category.setStore(storeExisting);\r\n        categoryRepository.save(category);\r\n    }\r\n\r\n    @Override\r\n    public void updateCategory(String categoryId, StoreDetailCategoryDTO storeDetailCategoryDTO) throws Exception {\r\n        Category updatingCategory = categoryRepository.findById(categoryId).orElseThrow(() -> new Exception(\"Category not found\"));\r\n        updatingCategory.setName(storeDetailCategoryDTO.getName());\r\n        updatingCategory.setDescription(storeDetailCategoryDTO.getDescription());\r\n        categoryRepository.save(updatingCategory);\r\n    }\r\n\r\n    @Override\r\n    public void deleteCategory(String categoryId) {\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/service/impl/CategoryServiceImpl.java b/swp391/src/main/java/org/group5/swp391/service/impl/CategoryServiceImpl.java
--- a/swp391/src/main/java/org/group5/swp391/service/impl/CategoryServiceImpl.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/service/impl/CategoryServiceImpl.java	(date 1742498244313)
@@ -72,20 +72,21 @@
     }
 
     public Page<EmployeeProductDTO> getProductBySearch(String name, int page, int size, String sortBy, boolean descending){
-        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
-        if (authentication == null || !authentication.isAuthenticated()) {
-            throw new AccessDeniedException("Bạn chưa đăng nhập!");
-        }
-        String username = authentication.getName();
-        Account account = accountRepository.findByUsername(username)
-                .orElseThrow(() -> new ResponseStatusException(NOT_FOUND, "Tài khoản không tồn tại"));
-        Employee a=employeeRepository.findStoreIdByAccountEmpId(account.getId());
-        System.out.println(a.getStore().getId());
-        Sort sort = descending ? Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();
-        Pageable pageable = PageRequest.of(page, size, sort);
-        Page<Category> categoryPage = CategoryRepository.findByNameIgnoreCase(name, pageable);
-        Page<Product> productPage= productRepository.findByNameAndStoreIdContainingIgnoreCase(name,a.getStore().getId(),pageable);
-        return productPage.map(productConverter::toEmployeeProductDTO);
+//        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
+//        if (authentication == null || !authentication.isAuthenticated()) {
+//            throw new AccessDeniedException("Bạn chưa đăng nhập!");
+//        }
+//        String username = authentication.getName();
+//        Account account = accountRepository.findByUsername(username)
+//                .orElseThrow(() -> new ResponseStatusException(NOT_FOUND, "Tài khoản không tồn tại"));
+//        Employee a=employeeRepository.findStoreIdByAccountEmpId(account.getId());
+//        System.out.println(a.getStore().getId());
+//        Sort sort = descending ? Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();
+//        Pageable pageable = PageRequest.of(page, size, sort);
+//        Page<Category> categoryPage = CategoryRepository.findByNameIgnoreCase(name, pageable);
+//        Page<Product> productPage= productRepository.findByNameAndStoreIdContainingIgnoreCase(name,a.getStore().getId(),pageable);
+//        return productPage.map(productConverter::toEmployeeProductDTO);
+        return null;
     }
 
     public List<StoreCategoryIdAndNameDTO> getAllStoreCategories(){
Index: Front-End/swp_interface/src/Components/StoreOwner/StoreCard/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from \"react\";\r\nimport './style.scss';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst StoreCard = ({urlStore, storeName, storeStatus, urlImg}) => {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"product-img\">\r\n        <img\r\n          src={urlImg}\r\n          alt=\"Product\"\r\n          height=\"100%\"\r\n          width=\"100%\"\r\n        />\r\n      </div>\r\n      <Link to={urlStore} className=\"product-link\">\r\n        <div className=\"product-info\">\r\n          <div className=\"product-text\">\r\n            <h1>{storeName}</h1>\r\n            <h2>{storeStatus}</h2>\r\n          </div>\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StoreCard;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Components/StoreOwner/StoreCard/index.js b/Front-End/swp_interface/src/Components/StoreOwner/StoreCard/index.js
--- a/Front-End/swp_interface/src/Components/StoreOwner/StoreCard/index.js	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/Front-End/swp_interface/src/Components/StoreOwner/StoreCard/index.js	(date 1742498244280)
@@ -1,17 +1,22 @@
 import React from "react";
-import './style.scss';
+import "./style.scss";
 import { Link } from "react-router-dom";
+import { Button } from "antd";
+import { useNavigate } from "react-router-dom";
 
-const StoreCard = ({urlStore, storeName, storeStatus, urlImg}) => {
+const StoreCard = ({
+  urlStore,
+  storeName,
+  storeStatus,
+  urlImg,
+  onUpdateExpiration,
+}) => {
+  const navigate = useNavigate();
+
   return (
     <div className="wrapper">
       <div className="product-img">
-        <img
-          src={urlImg}
-          alt="Product"
-          height="100%"
-          width="100%"
-        />
+        <img src={urlImg} alt="Product" height="100%" width="100%" />
       </div>
       <Link to={urlStore} className="product-link">
         <div className="product-info">
@@ -21,8 +26,18 @@
           </div>
         </div>
       </Link>
+      <Button
+        type="primary"
+        style={{ marginTop: 8, width: "100%" }}
+        onClick={(e) => {
+          e.stopPropagation(); // Ngăn chặn sự kiện click vào Card
+          onUpdateExpiration(); // Chuyển hướng đến /store-update
+        }}
+      >
+        Cập nhật thời hạn
+      </Button>
     </div>
   );
 };
 
-export default StoreCard;
\ No newline at end of file
+export default StoreCard;
Index: swp391/src/main/java/org/group5/swp391/service/impl/SubscriptionPlanServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.service.impl;\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.group5.swp391.dto.request.admin_request.SubscriptionPlanRequest;\r\nimport org.group5.swp391.dto.response.AdminResponse.SubscriptionPlanResponse;\r\nimport org.group5.swp391.entity.SubscriptionPlan;\r\nimport org.group5.swp391.repository.SubscriptionPlanRepository;\r\nimport org.group5.swp391.service.SubscriptionPlanService;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class SubscriptionPlanServiceImpl implements SubscriptionPlanService {\r\n\r\n    private final SubscriptionPlanRepository subscriptionPlanRepository;\r\n\r\n    // lấy danh sách các gói dịch vụ đăng kí của trang web\r\n    public List<SubscriptionPlanResponse> getAllSubscriptionPlans() {\r\n        return subscriptionPlanRepository.findAll().stream()\r\n                .map(plan -> SubscriptionPlanResponse.builder()\r\n                        .subscriptionPlanID(plan.getId())\r\n                        .name(plan.getName())\r\n                        .description(plan.getDescription())\r\n                        .price(plan.getPrice())\r\n                        .timeOfExpiration(plan.getTimeOfExpiration())\r\n                        .build())\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    // tìm gói dịch vụ đăng kí của trang web theo ID\r\n    public SubscriptionPlanResponse getSubscriptionPlanById(String id) {\r\n        SubscriptionPlan plan = subscriptionPlanRepository.findById(id)\r\n                .orElseThrow(() -> new RuntimeException(\"Subscription Plan not found\"));\r\n        return SubscriptionPlanResponse.builder()\r\n                .subscriptionPlanID(plan.getId())\r\n                .name(plan.getName())\r\n                .description(plan.getDescription())\r\n                .price(plan.getPrice())\r\n                .timeOfExpiration(plan.getTimeOfExpiration())\r\n                .build();\r\n    }\r\n\r\n    // tạo mới 1 gói đăng kí\r\n    public SubscriptionPlanResponse createSubscriptionPlan(SubscriptionPlanRequest request) {\r\n        SubscriptionPlan plan = new SubscriptionPlan();\r\n        plan.setName(request.getName());\r\n        plan.setDescription(request.getDescription());\r\n        plan.setPrice(request.getPrice());\r\n        plan.setTimeOfExpiration(request.getTimeOfExpiration());\r\n\r\n        SubscriptionPlan savedPlan = subscriptionPlanRepository.save(plan);\r\n        return SubscriptionPlanResponse.builder()\r\n                .subscriptionPlanID(savedPlan.getId())\r\n                .name(savedPlan.getName())\r\n                .description(savedPlan.getDescription())\r\n                .price(savedPlan.getPrice())\r\n                .timeOfExpiration(savedPlan.getTimeOfExpiration())\r\n                .build();\r\n    }\r\n\r\n    // cập nhật 1 gói đăng kí\r\n    public SubscriptionPlanResponse updateSubscriptionPlan(String id, SubscriptionPlanRequest request) {\r\n        SubscriptionPlan plan = subscriptionPlanRepository.findById(id)\r\n                .orElseThrow(() -> new RuntimeException(\"Subscription Plan not found\"));\r\n\r\n        plan.setName(request.getName());\r\n        plan.setDescription(request.getDescription());\r\n        plan.setPrice(request.getPrice());\r\n        plan.setTimeOfExpiration(request.getTimeOfExpiration());\r\n\r\n        SubscriptionPlan updatedPlan = subscriptionPlanRepository.save(plan);\r\n        return SubscriptionPlanResponse.builder()\r\n                .subscriptionPlanID(updatedPlan.getId())\r\n                .name(updatedPlan.getName())\r\n                .description(updatedPlan.getDescription())\r\n                .price(updatedPlan.getPrice())\r\n                .timeOfExpiration(updatedPlan.getTimeOfExpiration())\r\n                .build();\r\n    }\r\n\r\n    // lấy danh sách các gói đăng kí được hiển thị\r\n    public List<SubscriptionPlanResponse> getSubscriptionPlansIsActive() {\r\n        return subscriptionPlanRepository.findSubscriptionPlanByIsActive(true).stream()\r\n                .map(plan -> SubscriptionPlanResponse.builder()\r\n                        .subscriptionPlanID(plan.getId())\r\n                        .name(plan.getName())\r\n                        .description(plan.getDescription())\r\n                        .price(plan.getPrice())\r\n                        .timeOfExpiration(plan.getTimeOfExpiration())\r\n                        .isActive(plan.getIsActive())\r\n                        .build())\r\n                .collect(Collectors.toList());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/service/impl/SubscriptionPlanServiceImpl.java b/swp391/src/main/java/org/group5/swp391/service/impl/SubscriptionPlanServiceImpl.java
--- a/swp391/src/main/java/org/group5/swp391/service/impl/SubscriptionPlanServiceImpl.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/service/impl/SubscriptionPlanServiceImpl.java	(date 1742498244319)
@@ -94,4 +94,9 @@
                         .build())
                 .collect(Collectors.toList());
     }
+
+    // lấy gói dịch vụ theo giá tiền
+    public SubscriptionPlan getSubscriptionPlanByPrice(double price) {
+        return subscriptionPlanRepository.findByPrice(price);
+    }
 }
Index: swp391/src/main/java/org/group5/swp391/dto/employee/EmployeeCustomerDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.dto.employee;\r\n\r\nimport lombok.AccessLevel;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.experimental.FieldDefaults;\r\n\r\n@Data\r\n@FieldDefaults(level = AccessLevel.PRIVATE)\r\n@NoArgsConstructor\r\npublic class EmployeeCustomerDTO {\r\n    String customerID;\r\n    String name;\r\n    String phoneNumber;\r\n    String address;\r\n    String email;\r\n    Long created_at;\r\n    Long updated_at;\r\n    String created_by;\r\n    EmployeeStoreDTO employeeStoreDTO;\r\n\r\n    public EmployeeCustomerDTO(String customerID, String name, String phoneNumber) {\r\n        this.customerID = customerID;\r\n        this.name = name;\r\n        this.phoneNumber = phoneNumber;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/dto/employee/EmployeeCustomerDTO.java b/swp391/src/main/java/org/group5/swp391/dto/employee/EmployeeCustomerDTO.java
--- a/swp391/src/main/java/org/group5/swp391/dto/employee/EmployeeCustomerDTO.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/dto/employee/EmployeeCustomerDTO.java	(date 1742498244296)
@@ -19,6 +19,7 @@
     Long created_at;
     Long updated_at;
     String created_by;
+    Double balance;
     EmployeeStoreDTO employeeStoreDTO;
 
     public EmployeeCustomerDTO(String customerID, String name, String phoneNumber) {
Index: swp391/src/main/java/org/group5/swp391/converter/CustomerConverter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.converter;\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.group5.swp391.dto.debt.CustomerCreationRequest;\r\nimport org.group5.swp391.dto.debt.CustomerDebtUpdateRequest;\r\nimport org.group5.swp391.dto.debt.DebtCustomerDTO;\r\nimport org.group5.swp391.dto.employee.EmployeeCustomerDTO;\r\nimport org.group5.swp391.dto.employee.EmployeeStoreDTO;\r\nimport org.group5.swp391.entity.Customer;\r\nimport org.group5.swp391.entity.Store;\r\nimport org.group5.swp391.exception.AppException;\r\nimport org.group5.swp391.exception.ErrorCode;\r\nimport org.group5.swp391.repository.StoreRepository;\r\nimport org.modelmapper.ModelMapper;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.time.ZoneId;\r\n\r\n@Component\r\n@RequiredArgsConstructor\r\npublic class CustomerConverter {\r\n    private final ModelMapper modelMapper;\r\n    private final StoreRepository storeRepository;\r\n\r\n    //minh_snuppi\r\n//    public EmployeeCustomerDTO toEmployeeCustomerDTO(Customer customer) {\r\n//        EmployeeCustomerDTO dto = modelMapper.map(customer, EmployeeCustomerDTO.class);\r\n//        if (customer.getStore() != null) {\r\n//            dto.setEmployeeStoreDTO(modelMapper.map(customer.getStore(), EmployeeStoreDTO.class));\r\n//        } else {\r\n//            dto.setEmployeeStoreDTO(null);\r\n//        }\r\n//        return dto;\r\n//    }\r\n    public EmployeeCustomerDTO toEmployeeCustomerDTO(Customer customer) {\r\n        EmployeeCustomerDTO dto = new EmployeeCustomerDTO();\r\n        dto.setCustomerID(customer.getId());\r\n        dto.setName(customer.getName());\r\n        dto.setPhoneNumber(customer.getPhoneNumber());\r\n        dto.setEmail(customer.getEmail());\r\n        dto.setAddress(customer.getAddress());\r\n        dto.setCreated_by(customer.getCreatedBy());\r\n        dto.setEmployeeStoreDTO((customer.getStore() != null) ? modelMapper.map(customer.getStore(), EmployeeStoreDTO.class) : null);\r\n        if (customer.getStore() != null) {\r\n        dto.getEmployeeStoreDTO().setStoreID(customer.getStore().getId());\r\n        }\r\n        if (customer.getCreatedAt() != null) {\r\n            dto.setCreated_at(customer.getCreatedAt().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli());\r\n        }\r\n        // Convert LocalDateTime to epoch millis (long)\r\n        if (customer.getUpdatedAt() != null) {\r\n            dto.setUpdated_at(customer.getUpdatedAt().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli());\r\n        }\r\n        return dto;\r\n    }\r\n\r\n    public DebtCustomerDTO debtCustomerDTO(Customer customer){\r\n        DebtCustomerDTO dto = modelMapper.map(customer, DebtCustomerDTO.class);\r\n        dto.setCustomerId(customer.getId());\r\n        dto.setStoreId(customer.getStore().getId());\r\n        return dto;\r\n    }\r\n\r\n    public Customer toCustomerEntity(CustomerCreationRequest request){\r\n        Customer customer = modelMapper.map(request, Customer.class);\r\n        customer.setBalance((double) 0);\r\n        return customer;\r\n    }\r\n\r\n    public Customer toCustomerEntity(CustomerDebtUpdateRequest request){\r\n        return modelMapper.map(request, Customer.class);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/converter/CustomerConverter.java b/swp391/src/main/java/org/group5/swp391/converter/CustomerConverter.java
--- a/swp391/src/main/java/org/group5/swp391/converter/CustomerConverter.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/converter/CustomerConverter.java	(date 1742498244296)
@@ -40,9 +40,10 @@
         dto.setEmail(customer.getEmail());
         dto.setAddress(customer.getAddress());
         dto.setCreated_by(customer.getCreatedBy());
+        dto.setBalance(customer.getBalance());
         dto.setEmployeeStoreDTO((customer.getStore() != null) ? modelMapper.map(customer.getStore(), EmployeeStoreDTO.class) : null);
         if (customer.getStore() != null) {
-        dto.getEmployeeStoreDTO().setStoreID(customer.getStore().getId());
+            dto.getEmployeeStoreDTO().setStoreID(customer.getStore().getId());
         }
         if (customer.getCreatedAt() != null) {
             dto.setCreated_at(customer.getCreatedAt().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli());
Index: swp391/src/main/java/org/group5/swp391/dto/response/AdminResponse/AppStatisticsResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.dto.response.AdminResponse;\r\n\r\nimport lombok.*;\r\nimport lombok.experimental.FieldDefaults;\r\n\r\nimport java.time.LocalDateTime;\r\n\r\n@Data\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@FieldDefaults(level = AccessLevel.PRIVATE)\r\n@Builder\r\npublic class AppStatisticsResponse {\r\n    String appStatisticsID;\r\n    String storeID;\r\n    String storeName;\r\n    String subcriptionPlanName;\r\n    double subcriptionPlanPrice; // vnp_Amount\r\n    String subcriptionDescription; // vnp_OrderInfo\r\n    Integer subcriptionTimeOfExpiration;\r\n    LocalDateTime createdAt;\r\n    String createdBy; // Owner store\r\n    String transactionNo; // Mã giao dịch ghi nhận tại hệ thống VNPAY\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/dto/response/AdminResponse/AppStatisticsResponse.java b/swp391/src/main/java/org/group5/swp391/dto/response/AdminResponse/AppStatisticsResponse.java
--- a/swp391/src/main/java/org/group5/swp391/dto/response/AdminResponse/AppStatisticsResponse.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/dto/response/AdminResponse/AppStatisticsResponse.java	(date 1742498244297)
@@ -13,7 +13,6 @@
 public class AppStatisticsResponse {
     String appStatisticsID;
     String storeID;
-    String storeName;
     String subcriptionPlanName;
     double subcriptionPlanPrice; // vnp_Amount
     String subcriptionDescription; // vnp_OrderInfo
Index: Front-End/swp_interface/src/Utils/API/API.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const API_BASE_URL = \"http://localhost:9999\";\r\n\r\nconst API = {\r\n  ADMIN: {\r\n    GET_ALL_ACCOUNT: `${API_BASE_URL}/admin/account-owner`,\r\n    GET_ACCOUNT_BY_ID: (id) => `${API_BASE_URL}/admin/account/${id}`,\r\n    UPDATE_ACCOUNT_STATUS: `${API_BASE_URL}/admin/account-active`,\r\n    VIEW_REVENUE: `${API_BASE_URL}/admin/view-revenue`,\r\n    VIEW_ALL_STORE: `${API_BASE_URL}/admin/view-store`,\r\n    VIEW_ALL_SUBSCRIPTION_PLAN: `${API_BASE_URL}/admin/subscription-plans`,\r\n    VIEW_SUBSCRIPTION_PLAN_BY_ID: (id) =>\r\n      `${API_BASE_URL}/admin/subscription-plan/${id}`,\r\n    CREATE_SUBSCRIPTION_PLAN: `${API_BASE_URL}/admin/create-subscription-plan`,\r\n    UPDATE_SUBSCRIPTION_PLAN: (id) =>\r\n      `${API_BASE_URL}/admin/update-subscription-plan/${id}`,\r\n  },\r\n  CUSTOMER: {\r\n    GET_ALL_PRODUCT: `${API_BASE_URL}/store/products`\r\n  },\r\n  ACCOUNT: {\r\n    GET_ALL_NOTIFICATIONS: `${API_BASE_URL}/account/notifications`,\r\n    MARK_NOTI_AS_READ: `${API_BASE_URL}/account/notifications/mark-as-read`,\r\n    GET_INFOR_ACCOUNT: `${API_BASE_URL}/account/infor`,\r\n    UPDATE_ACCOUNT: `${API_BASE_URL}/account/update`,\r\n    CHANGE_PASSWORD: `${API_BASE_URL}/account/change-password`,\r\n  },\r\n  CUSTOMER: {\r\n    GET_ALL_PRODUCT: `${API_BASE_URL}/store/products`,\r\n    GET_ALL_CATEGORY: `${API_BASE_URL}/store/categories`\r\n  },\r\n  EMPLOYEE: {\r\n    GET_ALL_CUSTOMER: `${API_BASE_URL}/employee/customers`,\r\n    GET_ALL_CUSTOMERlist: `${API_BASE_URL}/employee/customersList`,\r\n    UPDATE_USER: (id) => `${API_BASE_URL}/employee/customers/edit/${id}`,\r\n    INVOICE_UPDATE_USER: (phoneNumber) => `${API_BASE_URL}/employee/customers/editInvoice/${phoneNumber}`,\r\n    CREATE_CUSTOMER: `${API_BASE_URL}/employee/customers/create`,\r\n    // GET_CATEGORY_PAGINATION: `${API_BASE_URL}/employee/categories/pagination`,\r\n    // GET_ALL_CATEGORY: `${API_BASE_URL}/employee/categories`,\r\n    // GET_CATEGORY_BY_NAME: `${API_BASE_URL}/employee/category`,\r\n    // GET_PRODUCTS_BY_CATEGORY: `${API_BASE_URL}/employee/products-by-category`,\r\n    GET_PRODUCTS_BY_NAMElist: `${API_BASE_URL}/employee/productsList`,\r\n    GET_PRODUCTS_BY_NAME: `${API_BASE_URL}/employee/products`,\r\n    GET_RICEZONE: `${API_BASE_URL}/employee/ricezone`,\r\n    SEARCH_RICEZONE: `${API_BASE_URL}/employee/ricezone/searchzone`,\r\n    GET_eINVOICES: `${API_BASE_URL}/employee/invoices`,\r\n    INVOICE_PACKAGElist: `${API_BASE_URL}/employee/packageList`,\r\n    INVOICE_CREATE: `${API_BASE_URL}/employee/invoice/invoice-create`,\r\n    GET_eINVOICES_DETAILS: `${API_BASE_URL}/employee/invoice-detail`,\r\n  },\r\n  STORE_OWNER: {\r\n    GET_INVOICES: `${API_BASE_URL}/store-owner/invoices`,\r\n    GET_INVOICE_DETAIL: `${API_BASE_URL}/store-owner/invoice-details`,\r\n    GET_STORE: `${API_BASE_URL}/store-owner/stores`,\r\n    GET_STORE_PRODUCTS: `${API_BASE_URL}/store-owner/products`,\r\n    GET_STORE_EMPLOYEES: `${API_BASE_URL}/store-owner/employees`,\r\n    GET_STORE_STATISTICs: `${API_BASE_URL}/store-owner/statistics`,\r\n    GET_STORE_PRODUCT_DETAIL: `${API_BASE_URL}/store-owner/product-detail`,\r\n    GET_CATEGORIES: `${API_BASE_URL}/store-owner/all/category`,\r\n    UPDATE_STORE_PRODUCT: `${API_BASE_URL}/store-owner/product/update`,\r\n    GET_ATTRIBUTES: `${API_BASE_URL}/store-owner/all/attribute`,\r\n    GET_ZONES: `${API_BASE_URL}/store-owner/store/zone`,\r\n    UPLOAD_PRODUCT_IMAGE: `${API_BASE_URL}/store-owner/product/upload-image`,\r\n    DELETE_STORE_PRODUCT: `${API_BASE_URL}/store-owner/product/delete`,\r\n    GET_STORE_EMPLOYEE_DETAIL: `${API_BASE_URL}/store-owner/employee-detail`,\r\n    UPLOAD_EMPLOYEE_AVATAR: `${API_BASE_URL}/store-owner/employee/upload-image`,\r\n    UPDATE_STORE_EMPLOYEE: `${API_BASE_URL}/store-owner/employee/update`,\r\n    DELETE_STORE_EMPLOYEE: `${API_BASE_URL}/store-owner/employee/delete`,\r\n    GET_EMPTY_ZONES: `${API_BASE_URL}/store-owner/store/empty-zone`,\r\n  },\r\n  STORE_DETAIL: {\r\n    GET_STORE_ZONES: `${API_BASE_URL}/store-detail/zones`,\r\n    UPDATE_STORE_ZONE: (id) => `${API_BASE_URL}/store-detail/zones/${id}`,\r\n    GET_ZONE_ID: `${API_BASE_URL}/store-detail/get-zone`,\r\n    GET_STORE_PRODUCTS_BY_STOREID: `${API_BASE_URL}/store-detail/products`,\r\n    UPDATE_STORE_PRODUCT: (id) => `${API_BASE_URL}/store-detail/products/${id}`,\r\n    GET_CATEGORY_ID: `${API_BASE_URL}/store-detail/category`,\r\n    GET_CATEGORIES_BY_STOREID: `${API_BASE_URL}/store-detail/all-categories`,\r\n    GET_CATEGORIES: `${API_BASE_URL}/store-detail/categories`,\r\n    UPDATE_STORE_CATEGORY: (id) => `${API_BASE_URL}/store-detail/categories/${id}`,\r\n    GET_STORE_PRODUCT_ATTRIBUTES: `${API_BASE_URL}/store-detail/product-attributes`,\r\n    UPDATE_STORE_PRODUCT_ATTRIBUTE: (id) => `${API_BASE_URL}/store-detail/product-attributes/${id}`,\r\n  },\r\n  AUTH: {\r\n    LOGIN: `${API_BASE_URL}/auth/login`,\r\n    REGISTER: `${API_BASE_URL}/auth/register`,\r\n    CHANGE_PASSWORD: `${API_BASE_URL}/auth/change-password`,\r\n    LOGOUT: `${API_BASE_URL}/auth/logout`,\r\n    INTROSPECT: `${API_BASE_URL}/auth/introspect`,\r\n    CHECK_EMAIL_PHONE: `${API_BASE_URL}/auth/check-email-phone`,\r\n    CHECK_USERNAME: (username) => `${API_BASE_URL}/auth/check-username/${username}`,\r\n    CHECK_USERNAME: (username) =>\r\n      `${API_BASE_URL}/auth/check-username/${username}`,\r\n    SEND_OTP: (key) => `${API_BASE_URL}/auth/send-otp/${key}`,\r\n    CHECK_OTP: `${API_BASE_URL}/auth/check-otp`,\r\n  },\r\n  PUBLIC: {\r\n    // UPLOAD_IMG: `${API_BASE_URL}/image`\r\n\r\n    UPLOAD_IMG: `${API_BASE_URL}/image`,\r\n    SUBSCRIPTION_PLAN: `${API_BASE_URL}/service-web`,\r\n  },\r\n  VNPAY: {\r\n    CREATE_PAYMENT: (amount, subscriptionPlanId) =>\r\n      `${API_BASE_URL}/vnpay/create-payment?amount=${amount}&subscriptionPlanId=${subscriptionPlanId}`,\r\n    PAYMENT_TRANSACTION: `${API_BASE_URL}/vnpay/payment-history`,\r\n  },\r\n};\r\n\r\nexport default API;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Utils/API/API.js b/Front-End/swp_interface/src/Utils/API/API.js
--- a/Front-End/swp_interface/src/Utils/API/API.js	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/Front-End/swp_interface/src/Utils/API/API.js	(date 1742498244292)
@@ -14,9 +14,9 @@
     UPDATE_SUBSCRIPTION_PLAN: (id) =>
       `${API_BASE_URL}/admin/update-subscription-plan/${id}`,
   },
-  CUSTOMER: {
-    GET_ALL_PRODUCT: `${API_BASE_URL}/store/products`
-  },
+  // CUSTOMER: {
+  //   GET_ALL_PRODUCT: `${API_BASE_URL}/store/products`,
+  // },
   ACCOUNT: {
     GET_ALL_NOTIFICATIONS: `${API_BASE_URL}/account/notifications`,
     MARK_NOTI_AS_READ: `${API_BASE_URL}/account/notifications/mark-as-read`,
@@ -26,13 +26,14 @@
   },
   CUSTOMER: {
     GET_ALL_PRODUCT: `${API_BASE_URL}/store/products`,
-    GET_ALL_CATEGORY: `${API_BASE_URL}/store/categories`
+    GET_ALL_CATEGORY: `${API_BASE_URL}/store/categories`,
   },
   EMPLOYEE: {
     GET_ALL_CUSTOMER: `${API_BASE_URL}/employee/customers`,
     GET_ALL_CUSTOMERlist: `${API_BASE_URL}/employee/customersList`,
     UPDATE_USER: (id) => `${API_BASE_URL}/employee/customers/edit/${id}`,
-    INVOICE_UPDATE_USER: (phoneNumber) => `${API_BASE_URL}/employee/customers/editInvoice/${phoneNumber}`,
+    INVOICE_UPDATE_USER: (phoneNumber) =>
+      `${API_BASE_URL}/employee/customers/editInvoice/${phoneNumber}`,
     CREATE_CUSTOMER: `${API_BASE_URL}/employee/customers/create`,
     // GET_CATEGORY_PAGINATION: `${API_BASE_URL}/employee/categories/pagination`,
     // GET_ALL_CATEGORY: `${API_BASE_URL}/employee/categories`,
@@ -66,6 +67,11 @@
     UPDATE_STORE_EMPLOYEE: `${API_BASE_URL}/store-owner/employee/update`,
     DELETE_STORE_EMPLOYEE: `${API_BASE_URL}/store-owner/employee/delete`,
     GET_EMPTY_ZONES: `${API_BASE_URL}/store-owner/store/empty-zone`,
+    CREATE_NEW_STORE: (transaction) =>
+      `${API_BASE_URL}/manage-store/create-store/${transaction}`,
+    GET_REQUEST_STORE: `${API_BASE_URL}/manage-store/request-store`,
+    UPDATE_STORE_INFOR: (storeID) =>
+      `${API_BASE_URL}/manage-store/update-store/${storeID}`,
   },
   STORE_DETAIL: {
     GET_STORE_ZONES: `${API_BASE_URL}/store-detail/zones`,
@@ -87,9 +93,10 @@
     LOGOUT: `${API_BASE_URL}/auth/logout`,
     INTROSPECT: `${API_BASE_URL}/auth/introspect`,
     CHECK_EMAIL_PHONE: `${API_BASE_URL}/auth/check-email-phone`,
-    CHECK_USERNAME: (username) => `${API_BASE_URL}/auth/check-username/${username}`,
     CHECK_USERNAME: (username) =>
       `${API_BASE_URL}/auth/check-username/${username}`,
+    // CHECK_USERNAME: (username) =>
+    //   `${API_BASE_URL}/auth/check-username/${username}`,
     SEND_OTP: (key) => `${API_BASE_URL}/auth/send-otp/${key}`,
     CHECK_OTP: `${API_BASE_URL}/auth/check-otp`,
   },
@@ -101,8 +108,9 @@
   },
   VNPAY: {
     CREATE_PAYMENT: (amount, subscriptionPlanId) =>
-      `${API_BASE_URL}/vnpay/create-payment?amount=${amount}&subscriptionPlanId=${subscriptionPlanId}`,
-    PAYMENT_TRANSACTION: `${API_BASE_URL}/vnpay/payment-history`,
+      `${API_BASE_URL}/vnpay/payment?amount=${amount}&subscriptionPlanId=${subscriptionPlanId}`,
+    PAYMENT_TRANSACTION: (orderId, transDate) =>
+      `${API_BASE_URL}/manage-store/handle-payment?order_id=${orderId}&trans_date=${transDate}`,
   },
 };
 
Index: Front-End/swp_interface/src/Components/StoreLayout/storelayout.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport {\r\n  FileTextOutlined,\r\n  MenuFoldOutlined,\r\n  MenuUnfoldOutlined,\r\n  ShopOutlined,\r\n  ProductOutlined,\r\n  OrderedListOutlined,\r\n} from '@ant-design/icons';\r\nimport { Button, Layout, Menu, theme } from 'antd';\r\n// import './style.css';\r\nimport { Link, Outlet, useLocation, useParams, useNavigate } from 'react-router-dom';\r\nimport CustomFooter from '../../Components/Footer';\r\n\r\nconst { Header, Sider, Content } = Layout;\r\n\r\nconst StoreLayout = () => {\r\n  const [collapsed, setCollapsed] = useState(false);\r\n  const {\r\n    token: { colorBgContainer, borderRadiusLG },\r\n  } = theme.useToken();\r\n\r\n  const location = useLocation();\r\n  const storeID = useParams(); // Lấy storeID từ URL\r\n\r\n  const selectedKey = location.pathname.startsWith(`/store/${storeID.id}/zone`)\r\n  ? '1'\r\n  : location.pathname.startsWith(`/store/${storeID.id}/productattribute`)\r\n    ? '4'\r\n    : location.pathname.startsWith(`/store/${storeID.id}/product`)\r\n      ? '2'\r\n      : location.pathname.startsWith(`/store/${storeID.id}/category`)\r\n        ? '3'\r\n        : '';\r\n\r\n  return (\r\n    <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n      <Layout style={{ minHeight: '100vh' }}>\r\n        <Sider\r\n          style={{\r\n            backgroundColor: 'white',\r\n            color: '#fff',\r\n          }}\r\n          trigger={null} collapsible collapsed={collapsed}>\r\n          <div className=\"demo-logo-vertical\" />\r\n          <div style={{ height: '80px' }}>\r\n            Logo\r\n          </div>\r\n          <Menu\r\n            theme=\"light\"\r\n            mode=\"inline\"\r\n            selectedKeys={[selectedKey]}\r\n            items={[\r\n              {\r\n                key: '1',\r\n                icon: <ShopOutlined />,\r\n                label: <Link to={`/store/${storeID.id}/zone`} style={{ textDecoration: 'none' }}>Zone</Link>,\r\n              },\r\n              {\r\n                key: '2',\r\n                icon: <OrderedListOutlined />,\r\n                label: <Link to={`/store/${storeID.id}/product`} style={{ textDecoration: 'none' }}>Product</Link>,\r\n              },\r\n              {\r\n                key: '3',\r\n                icon: <ProductOutlined />,\r\n                label: <Link to={`/store/${storeID.id}/category`} style={{ textDecoration: 'none' }}>Category</Link>,\r\n              },\r\n              {\r\n                key: '4',\r\n                icon: <FileTextOutlined />,\r\n                label: <Link to={`/store/${storeID.id}/productattribute`} style={{ textDecoration: 'none' }}>Product Attribute</Link>,\r\n              },\r\n            ]}\r\n          />\r\n        </Sider>\r\n        <Layout>\r\n          <Header\r\n            style={{\r\n              padding: 0,\r\n              background: colorBgContainer,\r\n            }}\r\n          >\r\n            <Button\r\n              type=\"text\"\r\n              icon={collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}\r\n              onClick={() => setCollapsed(!collapsed)}\r\n              style={{\r\n                fontSize: '16px',\r\n                width: 64,\r\n                height: 64,\r\n              }}\r\n            />\r\n          </Header>\r\n          <Content\r\n            style={{\r\n              margin: '24px 16px',\r\n              padding: 24,\r\n              minHeight: 280,\r\n              background: colorBgContainer,\r\n              borderRadius: borderRadiusLG,\r\n            }}\r\n          >\r\n            <Outlet />\r\n          </Content>\r\n        </Layout>\r\n      </Layout>\r\n      <CustomFooter />\r\n    </div>\r\n  );\r\n};\r\nexport default StoreLayout;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Components/StoreLayout/storelayout.js b/Front-End/swp_interface/src/Components/StoreLayout/storelayout.js
--- a/Front-End/swp_interface/src/Components/StoreLayout/storelayout.js	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/Front-End/swp_interface/src/Components/StoreLayout/storelayout.js	(date 1742499096936)
@@ -1,112 +1,135 @@
-import React, { useState, useEffect } from 'react';
+import React, { useState, useEffect } from "react";
 import {
-  FileTextOutlined,
-  MenuFoldOutlined,
-  MenuUnfoldOutlined,
-  ShopOutlined,
-  ProductOutlined,
-  OrderedListOutlined,
-} from '@ant-design/icons';
-import { Button, Layout, Menu, theme } from 'antd';
+    FileTextOutlined,
+    MenuFoldOutlined,
+    MenuUnfoldOutlined,
+    ShopOutlined,
+    TeamOutlined,
+    IdcardOutlined,
+    ProductOutlined,
+    OrderedListOutlined,
+} from "@ant-design/icons";
+import { Button, Layout, Menu, theme } from "antd";
 // import './style.css';
-import { Link, Outlet, useLocation, useParams, useNavigate } from 'react-router-dom';
-import CustomFooter from '../../Components/Footer';
+import {
+    Link,
+    Outlet,
+    useLocation,
+    useParams,
+    useNavigate,
+} from "react-router-dom";
+import CustomFooter from "../../Components/Footer";
 
 const { Header, Sider, Content } = Layout;
 
 const StoreLayout = () => {
-  const [collapsed, setCollapsed] = useState(false);
-  const {
-    token: { colorBgContainer, borderRadiusLG },
-  } = theme.useToken();
+    const [collapsed, setCollapsed] = useState(false);
+    const {
+        token: { colorBgContainer, borderRadiusLG },
+    } = theme.useToken();
 
-  const location = useLocation();
-  const storeID = useParams(); // Lấy storeID từ URL
-
-  const selectedKey = location.pathname.startsWith(`/store/${storeID.id}/zone`)
-  ? '1'
-  : location.pathname.startsWith(`/store/${storeID.id}/productattribute`)
-    ? '4'
-    : location.pathname.startsWith(`/store/${storeID.id}/product`)
-      ? '2'
-      : location.pathname.startsWith(`/store/${storeID.id}/category`)
-        ? '3'
-        : '';
+    const location = useLocation();
+    const storeID = useParams();
+    const selectedKey = location.pathname.startsWith(`/store/${storeID.id}/zone`)
+        ? "1"
+        : location.pathname.startsWith(`/store/${storeID.id}/productattribute`)
+            ? '4'
+            : location.pathname.startsWith(`/store/${storeID.id}/product`)
+                ? "2"
+                : location.pathname.startsWith(`/store/${storeID.id}/update-info`)
+                    ? "3"
+                    : location.pathname.startsWith(`/store/${storeID.id}/category`)
+                        ? '5'
+                        : "";
 
-  return (
-    <div style={{ display: 'flex', flexDirection: 'column' }}>
-      <Layout style={{ minHeight: '100vh' }}>
-        <Sider
-          style={{
-            backgroundColor: 'white',
-            color: '#fff',
-          }}
-          trigger={null} collapsible collapsed={collapsed}>
-          <div className="demo-logo-vertical" />
-          <div style={{ height: '80px' }}>
-            Logo
-          </div>
-          <Menu
-            theme="light"
-            mode="inline"
-            selectedKeys={[selectedKey]}
-            items={[
-              {
-                key: '1',
-                icon: <ShopOutlined />,
-                label: <Link to={`/store/${storeID.id}/zone`} style={{ textDecoration: 'none' }}>Zone</Link>,
-              },
-              {
-                key: '2',
-                icon: <OrderedListOutlined />,
-                label: <Link to={`/store/${storeID.id}/product`} style={{ textDecoration: 'none' }}>Product</Link>,
-              },
-              {
-                key: '3',
-                icon: <ProductOutlined />,
-                label: <Link to={`/store/${storeID.id}/category`} style={{ textDecoration: 'none' }}>Category</Link>,
-              },
-              {
-                key: '4',
-                icon: <FileTextOutlined />,
-                label: <Link to={`/store/${storeID.id}/productattribute`} style={{ textDecoration: 'none' }}>Product Attribute</Link>,
-              },
-            ]}
-          />
-        </Sider>
-        <Layout>
-          <Header
-            style={{
-              padding: 0,
-              background: colorBgContainer,
-            }}
-          >
-            <Button
-              type="text"
-              icon={collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}
-              onClick={() => setCollapsed(!collapsed)}
-              style={{
-                fontSize: '16px',
-                width: 64,
-                height: 64,
-              }}
-            />
-          </Header>
-          <Content
-            style={{
-              margin: '24px 16px',
-              padding: 24,
-              minHeight: 280,
-              background: colorBgContainer,
-              borderRadius: borderRadiusLG,
-            }}
-          >
-            <Outlet />
-          </Content>
-        </Layout>
-      </Layout>
-      <CustomFooter />
-    </div>
-  );
+    return (
+        <div style={{ display: "flex", flexDirection: "column" }}>
+            <Layout style={{ minHeight: "100vh" }}>
+                <Sider
+                    style={{
+                        backgroundColor: "white",
+                        color: "#fff",
+                    }}
+                    trigger={null}
+                    collapsible
+                    collapsed={collapsed}
+                >
+                    <div className="demo-logo-vertical" />
+                    <div style={{ height: "80px" }}>Logo</div>
+                    <Menu
+                        theme="light"
+                        mode="inline"
+                        selectedKeys={[selectedKey]}
+                        items={[
+                            {
+                                key: "1",
+                                icon: <ShopOutlined />,
+                                label: <Link to={`/store/${storeID.id}/zone`}
+                                    style={{ textDecoration: 'none' }}>Zone</Link>,
+                            },
+                            {
+                                key: "2",
+                                icon: <OrderedListOutlined />,
+                                label: <Link to={`/store/${storeID.id}/product`}
+                                    style={{ textDecoration: 'none' }}>Product</Link>,
+                            },
+                            {
+                                key: "3",
+                                icon: <IdcardOutlined />,
+                                label: (
+                                    <Link to={`/store/${storeID.id}/update-info`}>
+                                        Cập nhật cửa hàng
+                                    </Link>
+                                ),
+                            },
+                            {
+                                key: '5',
+                                icon: <ProductOutlined />,
+                                label: <Link to={`/store/${storeID.id}/category`}
+                                    style={{ textDecoration: 'none' }}>Category</Link>,
+                            },
+                            {
+                                key: '4',
+                                icon: <FileTextOutlined />,
+                                label: <Link to={`/store/${storeID.id}/productattribute`}
+                                    style={{ textDecoration: 'none' }}>Product Attribute</Link>,
+                            },
+                        ]}
+                    />
+                </Sider>
+                <Layout>
+                    <Header
+                        style={{
+                            padding: 0,
+                            background: colorBgContainer,
+                        }}
+                    >
+                        <Button
+                            type="text"
+                            icon={collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}
+                            onClick={() => setCollapsed(!collapsed)}
+                            style={{
+                                fontSize: "16px",
+                                width: 64,
+                                height: 64,
+                            }}
+                        />
+                    </Header>
+                    <Content
+                        style={{
+                            margin: "24px 16px",
+                            padding: 24,
+                            minHeight: 280,
+                            background: colorBgContainer,
+                            borderRadius: borderRadiusLG,
+                        }}
+                    >
+                        <Outlet />
+                    </Content>
+                </Layout>
+            </Layout>
+            <CustomFooter />
+        </div>
+    );
 };
 export default StoreLayout;
\ No newline at end of file
Index: swp391/src/main/java/org/group5/swp391/exception/ErrorCode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.exception;\r\n\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.HttpStatusCode;\r\n\r\n@Getter\r\npublic enum ErrorCode {\r\n    USER_EXISTED(400,\"User existed\", HttpStatus.BAD_REQUEST),\r\n    USER_NOT_EXISTED(400,\"User not existed\",HttpStatus.NOT_FOUND),\r\n    PASSWORD_INVALID(400,\"Password must be at least 10\",HttpStatus.BAD_REQUEST),\r\n    KEY_INVALID(400,\"Key invalid\",HttpStatus.BAD_REQUEST),\r\n    UNAUTHORIZED(401,\"Unauthorized\",HttpStatus.UNAUTHORIZED),\r\n    FORBIDDEN(403,\"Forbidden\",HttpStatus.FORBIDDEN),\r\n    NOT_FOUND(404,\"Not Found\",HttpStatus.NOT_FOUND),\r\n    UNCATEGORIZED(500,\"Error not defined\",HttpStatus.INTERNAL_SERVER_ERROR),\r\n    PASSWORD_EXISTED(400,\"Password already existed\",HttpStatus.CONFLICT),\r\n    EMAIL_EXISTED(400,\"Email already existed\",HttpStatus.CONFLICT),\r\n    USERNAME_EXISTED(400,\"Username already existed\",HttpStatus.CONFLICT),\r\n    PHONENUMBER_EXISTED(400,\"Phone number already existed\",HttpStatus.CONFLICT),\r\n    OTP_INVALID(400,\"OTP invalid\",HttpStatus.CONFLICT),\r\n    PRODUCT_NOT_FOUND(400,\"Product not found\",HttpStatus.CONFLICT),\r\n    USER_NOT_REGISTERED(400, \"User has not registered\", HttpStatus.BAD_REQUEST)\r\n    ;\r\n    private int code;\r\n    private String message;\r\n    private HttpStatusCode httpStatusCode;\r\n\r\n    ErrorCode(int code, String message,HttpStatusCode httpStatusCode) {\r\n        this.code = code;\r\n        this.message = message;\r\n        this.httpStatusCode = httpStatusCode;\r\n    }\r\n\r\n    public int getCode() {\r\n        return code;\r\n    }\r\n\r\n    public void setCode(int code) {\r\n        this.code = code;\r\n    }\r\n\r\n    public String getMessage() {\r\n        return message;\r\n    }\r\n\r\n    public void setMessage(String message) {\r\n        this.message = message;\r\n    }\r\n\r\n    public HttpStatusCode getHttpStatusCode() {\r\n        return httpStatusCode;\r\n    }\r\n\r\n    public void setHttpStatusCode(HttpStatusCode httpStatusCode) {\r\n        this.httpStatusCode = httpStatusCode;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/exception/ErrorCode.java b/swp391/src/main/java/org/group5/swp391/exception/ErrorCode.java
--- a/swp391/src/main/java/org/group5/swp391/exception/ErrorCode.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/exception/ErrorCode.java	(date 1742498244303)
@@ -21,7 +21,10 @@
     PHONENUMBER_EXISTED(400,"Phone number already existed",HttpStatus.CONFLICT),
     OTP_INVALID(400,"OTP invalid",HttpStatus.CONFLICT),
     PRODUCT_NOT_FOUND(400,"Product not found",HttpStatus.CONFLICT),
-    USER_NOT_REGISTERED(400, "User has not registered", HttpStatus.BAD_REQUEST)
+    USER_NOT_REGISTERED(400, "User has not registered", HttpStatus.BAD_REQUEST),
+    PHONENUMBER_INVALID(401,"SDT phải gồm 10 chữ số và bắt đầu bằng 0.",HttpStatus.BAD_REQUEST),
+    EMAIL_INVALID(402,"Email không đúng định dạng",HttpStatus.BAD_REQUEST),
+    INVOICE_INVALID(403,"Tổng tiền hoặc phí vận chuyển không được < 0!",HttpStatus.BAD_REQUEST),
     ;
     private int code;
     private String message;
Index: Front-End/swp_interface/src/App.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import \"./App.css\";\r\nimport { Routes, Route } from \"react-router-dom\";\r\nimport Home from \"./Pages/Home\";\r\nimport Login from \"./Pages/Login\";\r\nimport StoreHome from \"./Pages/StoreHome\";\r\nimport Register from \"./Pages/Register\";\r\nimport ForgetPassword from \"./Pages/ForgetPassword\";\r\nimport AdminDashboard from \"./Pages/AdminDashboard\";\r\nimport AccountOwner from \"./Pages/AdminDashboard/AccountOwner\";\r\nimport AdminViewStores from \"./Pages/AdminDashboard/AdminViewStores\";\r\nimport SubscriptionPlans from \"./Pages/AdminDashboard/SubscriptionPlans\";\r\n// import ProductsList from \"./Pages/ProductsLayout/ProductsLayout\";\r\nimport ZoneList from \"./Pages/ZoneLayout/Zone\";\r\n// import CreateProduct from \"./Pages/CreateProduct/CreateProduct\";\r\nimport Store from \"./Pages/ShopOwner/Store/Store\";\r\nimport StoreOwnerLayout from \"./Components/StoreOwner/Layout\";\r\nimport Invoice from \"./Pages/ShopOwner/Invoice/Invoice\";\r\nimport Product from \"./Pages/ShopOwner/Product/Product\";\r\nimport CommonProtected from \"./Pages/Protected/CommonProtected\";\r\nimport Unauthorized from \"./Pages/ErrorPage/Unauthorized\";\r\nimport AdminProtected from \"./Pages/Protected/AdminProtected\";\r\nimport EmployeeProtected from \"./Pages/Protected/EmployeeProtected\";\r\nimport StoreOwnerProtected from \"./Pages/Protected/StoreOwnerProtected\";\r\nimport Employee_Customer from \"./Pages/Employee_CustomerLayout\";\r\nimport CustomerIN4Edit from \"./Pages/Employee_CustomerLayout/components/customeEdit\";\r\nimport CustomerIN4Create from \"./Pages/Employee_CustomerLayout/components/customerCreate\";\r\nimport Employee from \"./Pages/ShopOwner/Employee/Employee\";\r\nimport Employee_Products from \"./Pages/Employee_ProductLayout/components/productsList\";\r\nimport Statistic from \"./Pages/ShopOwner/Statistic/Statistic\";\r\nimport Debt from \"./Pages/Debt\";\r\nimport Employee_Invoices from \"./Pages/Employee_InvoiceLayout\";\r\nimport ProductUpdate from \"./Pages/ShopOwner/ProductUpdate/ProductUpdate\";\r\nimport EmployeeUpdate from \"./Pages/ShopOwner/EmployeeUpdate/EmployeeUpdate\";\r\nimport SubscriptionPlan from \"./Pages/SubscriptionPlan/SubscriptionPlans\";\r\nimport PaymentReturn from \"./Pages/SubscriptionPlan/PaymentReturn\";\r\nimport AccountInfo from \"./Pages/Account/AccountInfo\";\r\nimport ChangePassword from \"./Pages/Account/ChangePasswordAcc\";\r\nimport Zone from \"./Pages/StoreManagement/Zone/Zone.js\";\r\nimport StoreLayout from \"./Components/StoreLayout/storelayout.js\";\r\nimport StoreProduct from \"./Pages/StoreManagement/Product/Product.js\";\r\nimport StoreDetailCategory from \"./Pages/StoreManagement/Category/Category.js\";\r\nimport StoreDetailProductAttribute from \"./Pages/StoreManagement/ProductAttribute/ProductAttribute.js\";\r\nimport { WebSocketProvider } from \"./Utils/Websocket/WebsocketContextProvider.js\";\r\nimport CustomerDebt from \"./Pages/Debt/CustomerDebt/customer.js\";\r\nimport Authenticate from \"./Pages/Login/authenticate.js\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Routes>\r\n        <Route path=\"/\" index element={<Home />}></Route>\r\n        <Route path=\"/login\" element={<Login />}></Route>\r\n        <Route path=\"/forgot-password\" element={<ForgetPassword />}></Route>\r\n        <Route path=\"/register\" element={<Register />}></Route>\r\n        <Route path='/authenticate' element={<Authenticate/>}></Route>\r\n        <Route path=\"/unauthorized\" element={<Unauthorized />}></Route>\r\n        <Route path='/storehome' element={<StoreHome />}></Route>\r\n        <Route path=\"/storehome\" element={<StoreHome />}></Route>\r\n        <Route path=\"/subscriptionPlan\" element={<SubscriptionPlan />}></Route>\r\n\r\n        <Route element={<CommonProtected />}>\r\n            <Route element={<AdminProtected />}>\r\n              <Route path=\"/admin\" element={<AdminDashboard />}></Route>\r\n              <Route\r\n                path=\"/admin/account_owner\"\r\n                element={<AccountOwner />}\r\n              ></Route>\r\n              <Route\r\n                path=\"/admin/view_stores\"\r\n                element={<AdminViewStores />}\r\n              ></Route>\r\n              <Route\r\n                path=\"/admin/subscription_plans\"\r\n                element={<SubscriptionPlans />}\r\n              ></Route>\r\n            </Route>\r\n            <Route element={<EmployeeProtected />}>\r\n              <Route path='/employee/products' element={<Employee_Products />}> </Route>\r\n              <Route path='/employee/ricezone' element={<ZoneList />}></Route>\r\n              <Route path='/employee/customers/edit' element={<CustomerIN4Edit />}></Route>\r\n              <Route path='/employee/customers' element={<Employee_Customer />}></Route>\r\n              <Route path='/employee/customers/create' element={<CustomerIN4Create />}></Route>\r\n              <Route path='/employee/invoices' element={<WebSocketProvider><Employee_Invoices /></WebSocketProvider>}></Route>\r\n              {/* <Route path=\"/employee/products\" element={<ProductsList />}></Route> */}\r\n              {/* <Route path=\"/employee/products/createproduct\" element={<CreateProduct />} ></Route> */}\r\n              <Route path=\"/employee/customers/edit\" element={<CustomerIN4Edit />} ></Route>\r\n              <Route path=\"/employee/customers\" element={<Employee_Customer />}></Route>\r\n              <Route path=\"/employee/customers/create\" element={<CustomerIN4Create />}></Route>\r\n            </Route>\r\n            <Route element={<StoreOwnerProtected />}>\r\n              <Route path=\"/store-owner\" element={<StoreOwnerLayout />}>\r\n                <Route path=\"store\" element={<Store />}></Route>\r\n                <Route path=\"invoice\" element={<Invoice />}></Route>\r\n                <Route path=\"product\" element={<Product />}></Route>\r\n                <Route path=\"employee\" element={<Employee />}></Route>\r\n                <Route path=\"statistic\" element={<Statistic />}></Route>\r\n                <Route path=\"debt\" element={<Debt />}></Route>\r\n                <Route path=\"product/update\" element={<ProductUpdate />} />\r\n                <Route path=\"employee/update\" element={<EmployeeUpdate />} />\r\n                <Route path=\"debt\" element={<Debt />}></Route>\r\n                <Route path=\"customer-debt\" element={<CustomerDebt />}></Route>\r\n              </Route>\r\n              <Route path=\"/vnpay/payment-return\" element={<PaymentReturn />} />\r\n            </Route>\r\n            <Route element={<StoreOwnerProtected/>}>\r\n              <Route path=\"/store/:id\" element={<StoreLayout />}>  \r\n                <Route path=\"zone\" element={<Zone />}></Route>\r\n                <Route path=\"product\" element={<StoreProduct />}></Route>\r\n                <Route path=\"category\" element={<StoreDetailCategory />}></Route>\r\n                <Route path=\"productattribute\" element={<StoreDetailProductAttribute />}></Route>\r\n              </Route>\r\n            </Route>\r\n            <Route path=\"/account-info\" element={<AccountInfo />} />\r\n            <Route path=\"/account-change-password\" element={<ChangePassword />} />\r\n            </Route>\r\n      </Routes>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/App.js b/Front-End/swp_interface/src/App.js
--- a/Front-End/swp_interface/src/App.js	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/Front-End/swp_interface/src/App.js	(date 1742498393040)
@@ -9,9 +9,7 @@
 import AccountOwner from "./Pages/AdminDashboard/AccountOwner";
 import AdminViewStores from "./Pages/AdminDashboard/AdminViewStores";
 import SubscriptionPlans from "./Pages/AdminDashboard/SubscriptionPlans";
-// import ProductsList from "./Pages/ProductsLayout/ProductsLayout";
 import ZoneList from "./Pages/ZoneLayout/Zone";
-// import CreateProduct from "./Pages/CreateProduct/CreateProduct";
 import Store from "./Pages/ShopOwner/Store/Store";
 import StoreOwnerLayout from "./Components/StoreOwner/Layout";
 import Invoice from "./Pages/ShopOwner/Invoice/Invoice";
@@ -43,6 +41,8 @@
 import { WebSocketProvider } from "./Utils/Websocket/WebsocketContextProvider.js";
 import CustomerDebt from "./Pages/Debt/CustomerDebt/customer.js";
 import Authenticate from "./Pages/Login/authenticate.js";
+import CreateStore from "./Pages/StoreManagement/StoreInfor/CreateStore.js";
+import UpdateStore from "./Pages/StoreManagement/StoreInfor/UpdateStore.js";
 
 function App() {
   return (
@@ -52,67 +52,96 @@
         <Route path="/login" element={<Login />}></Route>
         <Route path="/forgot-password" element={<ForgetPassword />}></Route>
         <Route path="/register" element={<Register />}></Route>
-        <Route path='/authenticate' element={<Authenticate/>}></Route>
+        <Route path='/authenticate' element={<Authenticate />}></Route>
         <Route path="/unauthorized" element={<Unauthorized />}></Route>
-        <Route path='/storehome' element={<StoreHome />}></Route>
+        <Route path="/storehome" element={<StoreHome />}></Route>
         <Route path="/storehome" element={<StoreHome />}></Route>
-        <Route path="/subscriptionPlan" element={<SubscriptionPlan />}></Route>
-
+        <Route path="/service/:storeID?" element={<SubscriptionPlan />} />
         <Route element={<CommonProtected />}>
-            <Route element={<AdminProtected />}>
-              <Route path="/admin" element={<AdminDashboard />}></Route>
-              <Route
-                path="/admin/account_owner"
-                element={<AccountOwner />}
-              ></Route>
-              <Route
-                path="/admin/view_stores"
-                element={<AdminViewStores />}
-              ></Route>
-              <Route
-                path="/admin/subscription_plans"
-                element={<SubscriptionPlans />}
-              ></Route>
-            </Route>
-            <Route element={<EmployeeProtected />}>
-              <Route path='/employee/products' element={<Employee_Products />}> </Route>
-              <Route path='/employee/ricezone' element={<ZoneList />}></Route>
-              <Route path='/employee/customers/edit' element={<CustomerIN4Edit />}></Route>
-              <Route path='/employee/customers' element={<Employee_Customer />}></Route>
-              <Route path='/employee/customers/create' element={<CustomerIN4Create />}></Route>
-              <Route path='/employee/invoices' element={<WebSocketProvider><Employee_Invoices /></WebSocketProvider>}></Route>
-              {/* <Route path="/employee/products" element={<ProductsList />}></Route> */}
-              {/* <Route path="/employee/products/createproduct" element={<CreateProduct />} ></Route> */}
-              <Route path="/employee/customers/edit" element={<CustomerIN4Edit />} ></Route>
-              <Route path="/employee/customers" element={<Employee_Customer />}></Route>
-              <Route path="/employee/customers/create" element={<CustomerIN4Create />}></Route>
-            </Route>
-            <Route element={<StoreOwnerProtected />}>
-              <Route path="/store-owner" element={<StoreOwnerLayout />}>
-                <Route path="store" element={<Store />}></Route>
-                <Route path="invoice" element={<Invoice />}></Route>
-                <Route path="product" element={<Product />}></Route>
-                <Route path="employee" element={<Employee />}></Route>
-                <Route path="statistic" element={<Statistic />}></Route>
-                <Route path="debt" element={<Debt />}></Route>
-                <Route path="product/update" element={<ProductUpdate />} />
-                <Route path="employee/update" element={<EmployeeUpdate />} />
-                <Route path="debt" element={<Debt />}></Route>
-                <Route path="customer-debt" element={<CustomerDebt />}></Route>
-              </Route>
-              <Route path="/vnpay/payment-return" element={<PaymentReturn />} />
-            </Route>
-            <Route element={<StoreOwnerProtected/>}>
-              <Route path="/store/:id" element={<StoreLayout />}>  
-                <Route path="zone" element={<Zone />}></Route>
-                <Route path="product" element={<StoreProduct />}></Route>
+          <Route element={<AdminProtected />}>
+            <Route path="/admin" element={<AdminDashboard />}></Route>
+            <Route
+              path="/admin/account_owner"
+              element={<AccountOwner />}
+            ></Route>
+            <Route
+              path="/admin/view_stores"
+              element={<AdminViewStores />}
+            ></Route>
+            <Route
+              path="/admin/subscription_plans"
+              element={<SubscriptionPlans />}
+            ></Route>
+          </Route>
+          <Route element={<EmployeeProtected />}>
+            <Route path="/employee/products" element={<Employee_Products />}>
+            </Route>
+            <Route path="/employee/ricezone" element={<ZoneList />}></Route>
+            <Route
+              path="/employee/customers/edit"
+              element={<CustomerIN4Edit />}
+            ></Route>
+            <Route
+              path="/employee/customers"
+              element={<Employee_Customer />}
+            ></Route>
+            <Route
+              path="/employee/customers/create"
+              element={<CustomerIN4Create />}
+            ></Route>
+            <Route
+              path="/employee/invoices"
+              element={
+                <WebSocketProvider>
+                  <Employee_Invoices />
+                </WebSocketProvider>
+              }
+            ></Route>
+            {/* <Route path="/employee/products" element={<ProductsList />}></Route> */}
+            {/* <Route path="/employee/products/createproduct" element={<CreateProduct />} ></Route> */}
+            <Route
+              path="/employee/customers/edit"
+              element={<CustomerIN4Edit />}
+            ></Route>
+            <Route
+              path="/employee/customers"
+              element={<Employee_Customer />}
+            ></Route>
+            <Route
+              path="/employee/customers/create"
+              element={<CustomerIN4Create />}
+            ></Route>
+          </Route>
+          <Route element={<StoreOwnerProtected />}>
+            <Route path="/store-owner" element={<StoreOwnerLayout />}>
+              <Route path="store" element={<Store />}></Route>
+              <Route path="invoice" element={<Invoice />}></Route>
+              <Route path="product" element={<Product />}></Route>
+              <Route path="employee" element={<Employee />}></Route>
+              <Route path="statistic" element={<Statistic />}></Route>
+              <Route path="debt" element={<Debt />}></Route>
+              <Route path="product/update" element={<ProductUpdate />} />
+              <Route path="employee/update" element={<EmployeeUpdate />} />
+              <Route path="debt" element={<Debt />}></Route>
+              <Route
+                path="create-store/:transactionNo"
+                element={<CreateStore />}
+              ></Route>
+            </Route>
+            <Route path="/vnpay/payment-return" element={<PaymentReturn />} />
+          </Route>
+          <Route element={<StoreOwnerProtected />}>
+            <Route path="/store/:id" element={<StoreLayout />}>
+              <Route path="zone" element={<Zone />}></Route>
+              <Route path="product" element={<StoreProduct />}></Route>
                 <Route path="category" element={<StoreDetailCategory />}></Route>
                 <Route path="productattribute" element={<StoreDetailProductAttribute />}></Route>
-              </Route>
-            </Route>
-            <Route path="/account-info" element={<AccountInfo />} />
-            <Route path="/account-change-password" element={<ChangePassword />} />
-            </Route>
+              <Route path="update-info" element={<UpdateStore />}></Route>
+            </Route>
+          </Route>
+          <Route path="/account-info" element={<AccountInfo />} />
+          <Route path="/account-change-password" element={<ChangePassword />} />
+        </Route>
       </Routes>
     </>
   );
Index: swp391/src/main/java/org/group5/swp391/controller/vnpay/VNPayController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.controller.vnpay;\r\n\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.group5.swp391.dto.response.ApiResponse;\r\nimport org.group5.swp391.service.VNPayService;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n\r\nimport java.io.UnsupportedEncodingException;\r\n\r\n\r\n@RestController\r\n@RequestMapping(\"/vnpay\")\r\n@RequiredArgsConstructor\r\npublic class VNPayController {\r\n\r\n    private final VNPayService vnPayService;\r\n\r\n    // Tạo yêu cầu thanh toán cho các gói dịch vụ\r\n    @GetMapping(\"/create-payment\")\r\n    public ApiResponse<String> createPayment(HttpServletRequest request,\r\n                                             @RequestParam double amount,\r\n                                             @RequestParam String subscriptionPlanId) throws UnsupportedEncodingException {\r\n        String paymentUrl = vnPayService.createPayment(request, amount, subscriptionPlanId);\r\n        return ApiResponse.<String>builder()\r\n                .code(HttpStatus.OK.value())\r\n                .message(\"Request payment created successfully!\")\r\n                .data(paymentUrl)\r\n                .build();\r\n    }\r\n\r\n    // Truy xuất giao dịch thanh toán từ VN Pay\r\n    @PostMapping(\"/payment-history\")\r\n    public ApiResponse<String> paymentHistory(@RequestParam(\"order_id\") String vnp_TxnRef,\r\n                                              @RequestParam(\"trans_date\") String vnp_TransDate,\r\n                                              HttpServletRequest req) {\r\n        String transaction = vnPayService.queryPayment(vnp_TxnRef, vnp_TransDate, req);\r\n        return ApiResponse.<String>builder()\r\n                .code(HttpStatus.OK.value())\r\n                .message(\"Request payment history successfully!\")\r\n                .data(transaction)\r\n                .build();\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/controller/vnpay/VNPayController.java b/swp391/src/main/java/org/group5/swp391/controller/vnpay/VNPayController.java
--- a/swp391/src/main/java/org/group5/swp391/controller/vnpay/VNPayController.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/controller/vnpay/VNPayController.java	(date 1742498244295)
@@ -3,12 +3,14 @@
 import jakarta.servlet.http.HttpServletRequest;
 import lombok.RequiredArgsConstructor;
 import org.group5.swp391.dto.response.ApiResponse;
+import org.group5.swp391.service.StoreService;
 import org.group5.swp391.service.VNPayService;
 import org.springframework.http.HttpStatus;
 import org.springframework.web.bind.annotation.*;
 
 
 import java.io.UnsupportedEncodingException;
+import java.util.Map;
 
 
 @RestController
@@ -18,12 +20,13 @@
 
     private final VNPayService vnPayService;
 
-    // Tạo yêu cầu thanh toán cho các gói dịch vụ
-    @GetMapping("/create-payment")
+    // Tạo yêu cầu thanh toán cho các gói dịch vụ để tạo cửa hàng mới
+    @GetMapping("/payment")
     public ApiResponse<String> createPayment(HttpServletRequest request,
                                              @RequestParam double amount,
                                              @RequestParam String subscriptionPlanId) throws UnsupportedEncodingException {
-        String paymentUrl = vnPayService.createPayment(request, amount, subscriptionPlanId);
+        String storeID = request.getParameter("storeID");
+        String paymentUrl = vnPayService.createPayment(request, amount, subscriptionPlanId, storeID);
         return ApiResponse.<String>builder()
                 .code(HttpStatus.OK.value())
                 .message("Request payment created successfully!")
@@ -31,17 +34,21 @@
                 .build();
     }
 
-    // Truy xuất giao dịch thanh toán từ VN Pay
-    @PostMapping("/payment-history")
-    public ApiResponse<String> paymentHistory(@RequestParam("order_id") String vnp_TxnRef,
-                                              @RequestParam("trans_date") String vnp_TransDate,
-                                              HttpServletRequest req) {
-        String transaction = vnPayService.queryPayment(vnp_TxnRef, vnp_TransDate, req);
-        return ApiResponse.<String>builder()
+    // Tra cứu lịch sử giao dịch
+    @GetMapping("/payment-history")
+    public ApiResponse<Map<String, Object>> queryPayment(
+            @RequestParam String vnp_TxnRef,
+            @RequestParam String vnp_TransDate,
+            HttpServletRequest req) {
+
+        Map<String, Object> data = vnPayService.queryPayment(vnp_TxnRef, vnp_TransDate, req);
+
+        return ApiResponse.<Map<String, Object>>builder()
                 .code(HttpStatus.OK.value())
-                .message("Request payment history successfully!")
-                .data(transaction)
+                .message("Request payment created successfully!")
+                .data(data)
                 .build();
     }
+
 }
 
Index: swp391/src/main/java/org/group5/swp391/controller/employee/EmployeeInvoiceController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.controller.employee;\r\n\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.group5.swp391.config.RabbitMqConfig;\r\nimport org.group5.swp391.dto.employee.EmployeeInvoiceDTO;\r\nimport org.group5.swp391.dto.employee.InvoiceRequest.InvoiceDTO;\r\nimport org.group5.swp391.dto.employee.InvoiceRequest.InvoiceRequest;\r\nimport org.group5.swp391.service.impl.InvoiceServiceImpl;\r\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n@Slf4j\r\n@RestController\r\n@RequestMapping(\"/employee\")\r\n@RequiredArgsConstructor\r\npublic class EmployeeInvoiceController {\r\n    private final InvoiceServiceImpl invoiceService;\r\n    private final RabbitTemplate rabbitTemplate;\r\n\r\n    @GetMapping(\"/invoices\")\r\n    public Page<InvoiceDTO> getEmployeeInvoices (@RequestParam(\"page\") int page,\r\n                                                 @RequestParam(\"size\") int size,\r\n                                                 @RequestParam(value = \"sortBy\", required = false, defaultValue = \"createdAt\")String sortBy,\r\n                                                 @RequestParam(value = \"sortOrder\", required = false, defaultValue = \"false\")boolean sortOrder,\r\n                                                 @RequestParam(value = \"phonesearch\", required = false, defaultValue = \"\") String phonesearch ) {\r\n        return invoiceService.getInvoicesForEmployee(phonesearch,page,size,sortBy,sortOrder);\r\n    }\r\n\r\n    @PostMapping(\"/invoice/invoice-create\")\r\n    public ResponseEntity<String> createInvoice(@RequestBody InvoiceRequest invoiceRequest) {\r\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\n        if (authentication != null && authentication.isAuthenticated()) {\r\n            log.info(\"controller\"+authentication.getName());\r\n            invoiceRequest.setEmployeeUsername(authentication.getName());\r\n        } else {\r\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(\"Bạn chưa đăng nhập!\");\r\n        }\r\n        rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE_NAME2,RabbitMqConfig.ROUTING_KEY2,invoiceRequest);\r\n        return ResponseEntity.ok(\"Yêu cầu tạo hóa đơn đã được gửi vào queue!\");\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/controller/employee/EmployeeInvoiceController.java b/swp391/src/main/java/org/group5/swp391/controller/employee/EmployeeInvoiceController.java
--- a/swp391/src/main/java/org/group5/swp391/controller/employee/EmployeeInvoiceController.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/controller/employee/EmployeeInvoiceController.java	(date 1742498244295)
@@ -12,11 +12,13 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
+import org.springframework.format.annotation.DateTimeFormat;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.context.SecurityContextHolder;
 import org.springframework.web.bind.annotation.*;
+import java.time.LocalDateTime;
 
 @Slf4j
 @RestController
@@ -27,12 +29,21 @@
     private final RabbitTemplate rabbitTemplate;
 
     @GetMapping("/invoices")
-    public Page<InvoiceDTO> getEmployeeInvoices (@RequestParam("page") int page,
-                                                 @RequestParam("size") int size,
-                                                 @RequestParam(value = "sortBy", required = false, defaultValue = "createdAt")String sortBy,
-                                                 @RequestParam(value = "sortOrder", required = false, defaultValue = "false")boolean sortOrder,
-                                                 @RequestParam(value = "phonesearch", required = false, defaultValue = "") String phonesearch ) {
-        return invoiceService.getInvoicesForEmployee(phonesearch,page,size,sortBy,sortOrder);
+    public Page<InvoiceDTO> getEmployeeInvoices(
+            @RequestParam("page") int page,
+            @RequestParam("size") int size,
+            @RequestParam(value = "sortBy", required = false, defaultValue = "createdAt") String sortBy,
+            @RequestParam(value = "sortOrder", required = false, defaultValue = "false") boolean sortOrder,
+            @RequestParam(value = "phonesearch", required = false, defaultValue = "") String phonesearch,
+            @RequestParam(value = "namesearch", required = false, defaultValue = "") String name,
+            @RequestParam(value = "minAmount", required = false) Long minAmount,
+            @RequestParam(value = "maxAmount", required = false) Long maxAmount,
+            @RequestParam(value = "minShipping", required = false) Long minShipping,
+            @RequestParam(value = "maxShipping", required = false) Long maxShipping,
+            @RequestParam(value = "startDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDateTime startDate,
+            @RequestParam(value = "endDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDateTime endDate) {
+        return invoiceService.getInvoicesForEmployee(phonesearch, name, page, size, sortBy, sortOrder,
+                minAmount, maxAmount, minShipping, maxShipping, startDate, endDate);
     }
 
     @PostMapping("/invoice/invoice-create")
Index: swp391/src/main/java/org/group5/swp391/controller/employee/EmployeeCustomerController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.controller.employee;\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.group5.swp391.dto.employee.CustomerUpdateRequest;\r\nimport org.group5.swp391.dto.employee.EmployeeCustomerDTO;\r\nimport org.group5.swp391.entity.Customer;\r\nimport org.group5.swp391.service.impl.CustomerServiceImpl;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\n\r\n\r\n@RestController\r\n@RequestMapping(\"/employee\")\r\n@RequiredArgsConstructor\r\npublic class EmployeeCustomerController {\r\n    private final CustomerServiceImpl customerService;\r\n\r\n    @GetMapping(\"/customers\")\r\n    public Page<EmployeeCustomerDTO> getAllCustomers(@RequestParam(\"page\") int page,\r\n                                                     @RequestParam(\"size\") int size,\r\n                                                     @RequestParam(value = \"sortBy\", required = false, defaultValue = \"createdAt\")String sortBy,\r\n                                                     @RequestParam(value = \"sortOrder\", required = false, defaultValue = \"false\")boolean sortOrder,\r\n                                                     @RequestParam(value = \"phonesearch\", required = false, defaultValue = \"\") String phonesearch )\r\n    {\r\n        return customerService.EmployeeGetAllCustomer(page, size, sortBy, sortOrder,phonesearch);\r\n    }\r\n    @GetMapping(\"/customersList\")\r\n    public List<EmployeeCustomerDTO> getAllCustomersInList(@RequestParam(value = \"phonesearch\", required = false, defaultValue = \"\") String phonesearch )\r\n    {\r\n        return customerService.EmployeeGetAllCustomerInList(phonesearch);\r\n    }\r\n\r\n    @PutMapping(\"/customers/edit/{customerId}\")\r\n    public ResponseEntity<?> updateCustomer(\r\n            @PathVariable String customerId,\r\n            @RequestBody Customer customerDetails  )\r\n    {\r\n        try {\r\n            Customer updatedCustomer = customerService.updateCustomer(customerId, customerDetails);\r\n            return ResponseEntity.ok(updatedCustomer);\r\n        } catch (RuntimeException e) {\r\n            return ResponseEntity.status(404).body(e.getMessage());\r\n        }\r\n    }\r\n    @PutMapping(\"/customers/editInvoice/{phoneNumber}\")\r\n    public ResponseEntity<?> updateCustomerInvoice(\r\n            @PathVariable String phoneNumber,\r\n            @RequestBody CustomerUpdateRequest customerDetails)\r\n    {\r\n        try {\r\n            Customer updatedCustomer = customerService.InvoiceUpdateCustomer(phoneNumber, customerDetails);\r\n            return ResponseEntity.ok(updatedCustomer);\r\n        } catch (RuntimeException e) {\r\n            return ResponseEntity.status(404).body(e.getMessage());\r\n        }\r\n    }\r\n\r\n\r\n    @PostMapping(\"/customers/create\")\r\n    public ResponseEntity<?> createCustomer(@RequestBody EmployeeCustomerDTO customerDTO) {\r\n        try {\r\n            Customer savedCustomer = customerService.createCustomer(customerDTO);\r\n            return ResponseEntity.status(HttpStatus.CREATED).body(savedCustomer);\r\n        } catch (RuntimeException e) {\r\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"Lỗi khi tạo khách hàng: \" + e.getMessage());\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/controller/employee/EmployeeCustomerController.java b/swp391/src/main/java/org/group5/swp391/controller/employee/EmployeeCustomerController.java
--- a/swp391/src/main/java/org/group5/swp391/controller/employee/EmployeeCustomerController.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/controller/employee/EmployeeCustomerController.java	(date 1742498244293)
@@ -51,22 +51,14 @@
             @PathVariable String phoneNumber,
             @RequestBody CustomerUpdateRequest customerDetails)
     {
-        try {
             Customer updatedCustomer = customerService.InvoiceUpdateCustomer(phoneNumber, customerDetails);
             return ResponseEntity.ok(updatedCustomer);
-        } catch (RuntimeException e) {
-            return ResponseEntity.status(404).body(e.getMessage());
-        }
     }
 
 
     @PostMapping("/customers/create")
     public ResponseEntity<?> createCustomer(@RequestBody EmployeeCustomerDTO customerDTO) {
-        try {
-            Customer savedCustomer = customerService.createCustomer(customerDTO);
-            return ResponseEntity.status(HttpStatus.CREATED).body(savedCustomer);
-        } catch (RuntimeException e) {
-            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Lỗi khi tạo khách hàng: " + e.getMessage());
-        }
+            customerService.createCustomer(customerDTO);
+            return ResponseEntity.ok("tạo khách hàng thành công ");
     }
 }
Index: swp391/src/main/java/org/group5/swp391/controller/employee/EmployeeProductController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.controller.employee;\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.group5.swp391.dto.employee.EmployeeProductDTO;\r\nimport org.group5.swp391.service.ProductService;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport java.util.List;\r\n\r\n@Slf4j\r\n@RestController\r\n@RequestMapping(\"/employee\")\r\n@RequiredArgsConstructor\r\npublic class EmployeeProductController {\r\n    private final ProductService productService;\r\n\r\n    @GetMapping(\"/products\")\r\n    public Page<EmployeeProductDTO> getAllProductByName(\r\n            @RequestParam(value = \"name\", required = false) String name,\r\n            @RequestParam(\"page\") int page,\r\n            @RequestParam(\"size\") int size,\r\n            @RequestParam(value = \"sortBy\", defaultValue = \"price\") String sortBy,\r\n            @RequestParam(value = \"descending\", defaultValue = \"false\") boolean descending\r\n    ) {\r\n        return productService.getProductBySearch(name, page, size, sortBy, descending);\r\n    }\r\n    @GetMapping(\"/productsList\")\r\n    public List<EmployeeProductDTO>getAllProductByNameInList(@RequestParam(value = \"name\", required = false) String name){\r\n        name=name.trim();\r\n        return productService.getProductBySearchInList(name);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/controller/employee/EmployeeProductController.java b/swp391/src/main/java/org/group5/swp391/controller/employee/EmployeeProductController.java
--- a/swp391/src/main/java/org/group5/swp391/controller/employee/EmployeeProductController.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/controller/employee/EmployeeProductController.java	(date 1742498244295)
@@ -25,9 +25,11 @@
             @RequestParam("page") int page,
             @RequestParam("size") int size,
             @RequestParam(value = "sortBy", defaultValue = "price") String sortBy,
-            @RequestParam(value = "descending", defaultValue = "false") boolean descending
+            @RequestParam(value = "descending", defaultValue = "false") boolean descending,
+            @RequestParam(value = "minQuantity", required = false) Integer minQuantity,
+            @RequestParam(value = "maxQuantity", required = false) Integer maxQuantity
     ) {
-        return productService.getProductBySearch(name, page, size, sortBy, descending);
+        return productService.getProductBySearch(name, page, size, sortBy, descending,minQuantity, maxQuantity);
     }
     @GetMapping("/productsList")
     public List<EmployeeProductDTO>getAllProductByNameInList(@RequestParam(value = "name", required = false) String name){
Index: swp391/src/main/java/org/group5/swp391/repository/InvoiceRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.repository;\r\n\r\nimport org.group5.swp391.entity.Customer;\r\nimport org.group5.swp391.entity.Invoice;\r\nimport org.group5.swp391.entity.Store;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\n\r\nimport java.util.Collection;\r\n\r\n\r\npublic interface InvoiceRepository extends JpaRepository<Invoice, String> {\r\n\r\n    @Query(\"\"\"\r\n    SELECT i FROM Invoice i \r\n    WHERE i.store IN :stores \r\n      AND i.customer IN :customers\r\n      AND (:type IS NULL OR i.type = :type) \r\n      AND (:status IS NULL OR i.status = :status)\r\n\"\"\")\r\n    Page<Invoice> findInvoices(\r\n            @Param(\"stores\") Collection<Store> stores,\r\n            @Param(\"customers\") Collection<Customer> customers,\r\n            @Param(\"type\") Boolean type,\r\n            @Param(\"status\") Boolean status,\r\n            Pageable pageable\r\n    );\r\n\r\n    Page<Invoice> findByStoreIn(Collection<Store> stores, Pageable pageable);\r\n    @Query(\"SELECT c FROM Invoice c \" +\r\n            \"WHERE c.store.id= :storeId AND \" +\r\n            \"(:customerPhone IS NULL OR c.customer.phoneNumber  LIKE %:customerPhone% ) \")\r\n    Page<Invoice> findInvoiceByCustomerPhone(String customerPhone,\r\n                                             String storeId,\r\n                                             Pageable pageable);\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/repository/InvoiceRepository.java b/swp391/src/main/java/org/group5/swp391/repository/InvoiceRepository.java
--- a/swp391/src/main/java/org/group5/swp391/repository/InvoiceRepository.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/repository/InvoiceRepository.java	(date 1742498244307)
@@ -9,6 +9,8 @@
 import org.springframework.data.jpa.repository.Query;
 import org.springframework.data.repository.query.Param;
 
+import java.time.LocalDate;
+import java.time.LocalDateTime;
 import java.util.Collection;
 
 
@@ -31,11 +33,26 @@
 
     Page<Invoice> findByStoreIn(Collection<Store> stores, Pageable pageable);
     @Query("SELECT c FROM Invoice c " +
-            "WHERE c.store.id= :storeId AND " +
-            "(:customerPhone IS NULL OR c.customer.phoneNumber  LIKE %:customerPhone% ) ")
-    Page<Invoice> findInvoiceByCustomerPhone(String customerPhone,
-                                             String storeId,
-                                             Pageable pageable);
+            "WHERE c.store.id = :storeId " +
+            "AND (:customerPhone IS NULL OR c.customer.phoneNumber LIKE %:customerPhone%) " +
+            "AND (:name IS NULL OR c.customer.name LIKE %:name%) " +
+            "AND (:minAmount IS NULL OR c.productMoney >= :minAmount) " +
+            "AND (:maxAmount IS NULL OR c.productMoney <= :maxAmount) " +
+            "AND (:minShipping IS NULL OR c.shipMoney >= :minShipping) " +
+            "AND (:maxShipping IS NULL OR c.shipMoney <= :maxShipping) " +
+            "AND (:startDate IS NULL OR c.createdAt >= :startDate) " +
+            "AND (:endDate IS NULL OR c.createdAt <= :endDate)")
+    Page<Invoice> findInvoiceByCustomerPhone(
+            @Param("customerPhone") String customerPhone,
+            @Param("name") String name,
+            @Param("storeId") String storeId,
+            @Param("minAmount") Long minAmount,
+            @Param("maxAmount") Long maxAmount,
+            @Param("minShipping") Long minShipping,
+            @Param("maxShipping") Long maxShipping,
+            @Param("startDate") LocalDateTime startDate,
+            @Param("endDate") LocalDateTime endDate,
+            Pageable pageable);
 
 
 
Index: swp391/src/main/java/org/group5/swp391/repository/SubscriptionPlanRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.repository;\r\n\r\nimport org.group5.swp391.entity.SubscriptionPlan;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\n@Repository\r\npublic interface SubscriptionPlanRepository extends JpaRepository<SubscriptionPlan, String> {\r\n    // Lấy danh sách gói dịch vụ theo trạng thái hiển thị\r\n    List<SubscriptionPlan> findSubscriptionPlanByIsActive(Boolean isActive);\r\n\r\n    // Tìm gói dịch vụ có trạng thái hiển thị True theo ID\r\n    Optional<SubscriptionPlan> findByIdAndIsActiveTrue(String id);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/repository/SubscriptionPlanRepository.java b/swp391/src/main/java/org/group5/swp391/repository/SubscriptionPlanRepository.java
--- a/swp391/src/main/java/org/group5/swp391/repository/SubscriptionPlanRepository.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/repository/SubscriptionPlanRepository.java	(date 1742498244309)
@@ -14,4 +14,7 @@
 
     // Tìm gói dịch vụ có trạng thái hiển thị True theo ID
     Optional<SubscriptionPlan> findByIdAndIsActiveTrue(String id);
+
+    // Tìm gói dịch vụ theo giá
+    SubscriptionPlan findByPrice(Double price);
 }
Index: Front-End/swp_interface/src/Pages/Account/AccountInfo.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useEffect, useState } from \"react\";\r\nimport API from \"../../Utils/API/API.js\";\r\nimport { getToken } from \"../../Utils/UserInfoUtils\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Container, Card, Button, Spinner, Alert, Form } from \"react-bootstrap\";\r\nimport avt_default from \"../../assets/img/avt_default.jpg\";\r\nimport UpdateProfile from \"./UpdateProfile\";\r\nimport Navbar from \"./NavbarAccount.js\";\r\n\r\nconst AccountInfo = () => {\r\n  const [account, setAccount] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [showUpdate, setShowUpdate] = useState(false);\r\n  const [message, setMessage] = useState(null);\r\n  const [messageType, setMessageType] = useState(\"success\");\r\n  const [uploading, setUploading] = useState(false);\r\n  const token = getToken();\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    fetch(API.ACCOUNT.GET_INFOR_ACCOUNT, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.code === 200) {\r\n          setAccount(data.data);\r\n        }\r\n      })\r\n      .catch((error) => console.error(\"Error fetching account info:\", error))\r\n      .finally(() => setLoading(false));\r\n  }, [token]);\r\n\r\n  const handleUpdateSuccess = (updatedAccount) => {\r\n    setAccount(updatedAccount);\r\n    setShowUpdate(false);\r\n    setMessage(\"Cập nhật thông tin thành công!\");\r\n    setMessageType(\"success\");\r\n    setTimeout(() => setMessage(null), 3000);\r\n  };\r\n\r\n  const handleUpdateFail = (errorMessage) => {\r\n    setMessage(errorMessage || \"Cập nhật thất bại!\");\r\n    setMessageType(\"danger\");\r\n    setTimeout(() => setMessage(null), 3000);\r\n  };\r\n\r\n  const handleAvatarChange = async (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n\r\n    setUploading(true);\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n\r\n    try {\r\n      const response = await fetch(API.PUBLIC.UPLOAD_IMG, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: formData,\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (data.code === 200) {\r\n        const newAvatarUrl = data.data;\r\n        const updateResponse = await fetch(API.ACCOUNT.UPDATE_ACCOUNT, {\r\n          method: \"PATCH\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          body: JSON.stringify({ avatar: newAvatarUrl }),\r\n        });\r\n\r\n        const updateData = await updateResponse.json();\r\n        if (updateData.code === 200) {\r\n          setAccount(updateData.data);\r\n          setMessage(\"Cập nhật ảnh đại diện thành công!\");\r\n          setMessageType(\"success\");\r\n        } else {\r\n          throw new Error(\"Cập nhật thất bại!\");\r\n        }\r\n      } else {\r\n        throw new Error(\"Tải ảnh lên thất bại!\");\r\n      }\r\n    } catch (error) {\r\n      setMessage(error.message);\r\n      setMessageType(\"danger\");\r\n    } finally {\r\n      setUploading(false);\r\n      setTimeout(() => setMessage(null), 3000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* <div className=\"mt-5\">\r\n        <Navbar />\r\n      </div> */}\r\n      <Container className=\"mt-5\">\r\n        <h2 className=\"mb-4\">Thông tin tài khoản</h2>\r\n        {message && <Alert variant={messageType}>{message}</Alert>}\r\n        {loading ? (\r\n          <div className=\"text-center\">\r\n            <Spinner animation=\"border\" />\r\n          </div>\r\n        ) : account ? (\r\n          <Card className=\"p-4 shadow\">\r\n            <div className=\"d-flex justify-content-between align-items-center\">\r\n              <div className=\"text-center\">\r\n                <img\r\n                  src={account.avatar || avt_default}\r\n                  alt=\"Avatar\"\r\n                  className=\"rounded-circle mb-3 border border-primary p-1\"\r\n                  width={100}\r\n                  height={100}\r\n                />\r\n                <Form.Group>\r\n                  <Form.Label className=\"btn btn-link\">\r\n                    {uploading ? \"Đang tải lên...\" : \"Thay đổi ảnh\"}\r\n                    <Form.Control\r\n                      type=\"file\"\r\n                      accept=\"image/*\"\r\n                      hidden\r\n                      onChange={handleAvatarChange}\r\n                    />\r\n                  </Form.Label>\r\n                </Form.Group>\r\n              </div>\r\n              <div className=\"d-flex\">\r\n                <Button variant=\"primary\" onClick={() => setShowUpdate(true)}>\r\n                  Chỉnh sửa\r\n                </Button>\r\n                <Button\r\n                  variant=\"warning\"\r\n                  className=\"ms-2\"\r\n                  onClick={() => navigate(\"/account-change-password\")}\r\n                >\r\n                  Thay đổi mật khẩu\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            <Card.Body>\r\n              <p>\r\n                <strong>Tên đăng nhập:</strong> {account.username}\r\n              </p>\r\n              <p>\r\n                <strong>Họ Tên:</strong> {account.name}\r\n              </p>\r\n              <p>\r\n                <strong>Email:</strong> {account.email}\r\n              </p>\r\n              <p>\r\n                <strong>Số điện thoại:</strong> {account.phoneNumber}\r\n              </p>\r\n              <p>\r\n                <strong>Giới tính:</strong> {account.gender ? \"Nam\" : \"Nữ\"}\r\n              </p>\r\n              <p>\r\n                <strong>Ngày sinh:</strong> {account.birthDate}\r\n              </p>\r\n            </Card.Body>\r\n            <Button variant=\"secondary\" onClick={() => navigate(-1)}>\r\n              Quay lại\r\n            </Button>\r\n          </Card>\r\n        ) : (\r\n          <p className=\"text-danger\">Không thể tải thông tin tài khoản</p>\r\n        )}\r\n\r\n        {account && (\r\n          <UpdateProfile\r\n            show={showUpdate}\r\n            handleClose={() => setShowUpdate(false)}\r\n            account={account}\r\n            onUpdateSuccess={handleUpdateSuccess}\r\n            onUpdateFail={handleUpdateFail}\r\n          />\r\n        )}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AccountInfo;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Pages/Account/AccountInfo.js b/Front-End/swp_interface/src/Pages/Account/AccountInfo.js
--- a/Front-End/swp_interface/src/Pages/Account/AccountInfo.js	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/Front-End/swp_interface/src/Pages/Account/AccountInfo.js	(date 1742498244280)
@@ -6,6 +6,8 @@
 import avt_default from "../../assets/img/avt_default.jpg";
 import UpdateProfile from "./UpdateProfile";
 import Navbar from "./NavbarAccount.js";
+import { UserOutlined } from "@ant-design/icons";
+import { Avatar, Space } from "antd";
 
 const AccountInfo = () => {
   const [account, setAccount] = useState(null);
@@ -112,13 +114,16 @@
           <Card className="p-4 shadow">
             <div className="d-flex justify-content-between align-items-center">
               <div className="text-center">
-                <img
-                  src={account.avatar || avt_default}
-                  alt="Avatar"
-                  className="rounded-circle mb-3 border border-primary p-1"
-                  width={100}
-                  height={100}
-                />
+                <Space direction="vertical" size={20}>
+                  <Space wrap size={20}>
+                    <Avatar
+                      size={64}
+                      src={account.avatar || avt_default}
+                      icon={!account.avatar && <UserOutlined />}
+                    />
+                  </Space>
+                </Space>
+                
                 <Form.Group>
                   <Form.Label className="btn btn-link">
                     {uploading ? "Đang tải lên..." : "Thay đổi ảnh"}
Index: Front-End/swp_interface/src/Components/HomeHeader/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import \"../../assets/css/main.css\";\r\nimport \"../../assets/css/style.css\";\r\nimport logo from \"../../assets/img/logo-no-background.png\";\r\nimport Upper from \"../../Utils/Animation/Upper\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { getToken, logout, getRole } from \"../../Utils/UserInfoUtils\";\r\nimport Loading from \"../../Pages/Loading/Loading\";\r\nimport { useState } from \"react\";\r\nimport { successWSmile } from \"../../Utils/AntdNotification\";\r\nimport { scroller } from \"react-scroll\";\r\nimport { message } from \"antd\";\r\n\r\nfunction HomeHeader() {\r\n  const [messageApi, contextHolder] = message.useMessage();\r\n  const [loading, setLoading] = useState(false);\r\n  const token = getToken();\r\n  const role = getRole();\r\n  const navigate = useNavigate();\r\n  const naviLogin = () => {\r\n    navigate(\"/login\");\r\n  };\r\n  const naviRegister = () => {\r\n    navigate(\"/register\");\r\n  };\r\n  const handleLogout = () => {\r\n    setLoading(true);\r\n    successWSmile(\"See you later!\", messageApi);\r\n    logout();\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n      navigate(\"/\");\r\n    }, 1000);\r\n  };\r\n  const naviDashboard = () => {\r\n    console.log(role);\r\n    if (role == \"ADMIN\") {\r\n      setLoading(true);\r\n      setTimeout(() => {\r\n        setLoading(false);\r\n        navigate(\"/admin\");\r\n      }, 1000);\r\n    } else if (role == \"EMPLOYEE\") {\r\n      setLoading(true);\r\n      setTimeout(() => {\r\n        setLoading(false);\r\n        navigate(\"/employee/products\");\r\n      }, 1000);\r\n    } else if (role == \"STORE_OWNER\") {\r\n      setLoading(true);\r\n      setTimeout(() => {\r\n        setLoading(false);\r\n        navigate(\"/store-owner/store\");\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n    const scrollToSection = (str) => {\r\n      scroller.scrollTo(str, {\r\n        duration: 300,\r\n        delay: 0,\r\n        smooth: \"easeInOutQuart\",\r\n      });\r\n    }\r\n\r\n  return (\r\n    <>\r\n      {contextHolder}\r\n      {loading && <Loading />}\r\n      <Upper>\r\n        <div class=\"header\" >\r\n          <div class=\"container\">\r\n            <div class=\"row\">\r\n              <div class=\"col-xl-12\">\r\n                <div class=\"header__navbar\" style={{padding:'20px 0px'}}>\r\n                  <img\r\n                    style={{marginRight: \"100px\", height:'60px' }}\r\n                    src={logo}\r\n                    alt=\"logo\"\r\n                    class=\"header__navbar__img\"\r\n                  />\r\n                  <div style={{padding:'10px 0px'}} class=\"header__navbar__menu\">\r\n                    <div onClick={() => scrollToSection(\"head\")} class=\"header__navbar__menu__item\">Trang chủ</div>\r\n                    <div onClick={() => scrollToSection(\"introduction\")} class=\"header__navbar__menu__item\">Giới thiệu</div>\r\n                    <div\r\n                      className=\"header__navbar__menu__item\"\r\n                      onClick={() =>\r\n                        (window.location.href = \"/subscriptionPlan\")\r\n                      }\r\n                    >\r\n                      Gói đăng ký\r\n                    </div>\r\n                    <div onClick={() => scrollToSection(\"feedback\")} class=\"header__navbar__menu__item\">Feedback</div>\r\n                    <div onClick={() => scrollToSection(\"lienhe\")} class=\"header__navbar__menu__item\">Liên hệ</div>\r\n                    {token ? (\r\n                      <>\r\n                        <div\r\n                          onClick={naviDashboard}\r\n                          class=\"header__navbar__menu__item\"\r\n                        >\r\n                          Dashboard\r\n                        </div>\r\n                        <div\r\n                          onClick={handleLogout}\r\n                          class=\"header__navbar__menu__item\"\r\n                        >\r\n                          Đăng xuất\r\n                        </div>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <div\r\n                          onClick={naviLogin}\r\n                          class=\"header__navbar__menu__item\"\r\n                        >\r\n                          Đăng nhập\r\n                        </div>\r\n                        <div\r\n                          onClick={naviRegister}\r\n                          class=\"header__navbar__menu__item\"\r\n                        >\r\n                          Đăng ký\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Upper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default HomeHeader;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Front-End/swp_interface/src/Components/HomeHeader/index.js b/Front-End/swp_interface/src/Components/HomeHeader/index.js
--- a/Front-End/swp_interface/src/Components/HomeHeader/index.js	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/Front-End/swp_interface/src/Components/HomeHeader/index.js	(date 1742498244279)
@@ -84,7 +84,7 @@
                     <div
                       className="header__navbar__menu__item"
                       onClick={() =>
-                        (window.location.href = "/subscriptionPlan")
+                        (window.location.href = "/service")
                       }
                     >
                       Gói đăng ký
Index: swp391/src/main/java/org/group5/swp391/repository/CustomerRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.repository;\r\n\r\nimport org.group5.swp391.dto.employee.EmployeeCustomerDTO;\r\nimport org.group5.swp391.dto.employee.EmployeeCustomerDTO;\r\nimport org.group5.swp391.entity.Customer;\r\nimport org.group5.swp391.entity.Debt;\r\nimport org.group5.swp391.enums.DebtType;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\n\r\npublic interface CustomerRepository extends JpaRepository<Customer, String> {\r\n    List<Customer> findByPhoneNumberContainingIgnoreCase(String customerPhoneNumber);\r\n\r\n    @Query(\"SELECT c FROM Customer c \" +\r\n            \"WHERE c.store.id= :id AND \" +\r\n            \"(:phoneNumber IS NULL OR c.phoneNumber  LIKE %:phoneNumber%)\")\r\n    Page<Customer> findAllWithPhoneNumber(Pageable pageable,\r\n                                          @Param(\"phoneNumber\") String phoneNumber,\r\n                                          @Param(\"id\")String storeId);\r\n    @Query(\"SELECT c FROM Customer c \" +\r\n            \"WHERE c.store.id= :id AND \" +\r\n            \"(:phoneNumber IS NULL OR c.phoneNumber  LIKE %:phoneNumber%)\")\r\n    List<Customer> findAllWithPhoneNumberInList( @Param(\"phoneNumber\") String phoneNumber,\r\n                                                 @Param(\"id\")String storeId);\r\n    Customer findByPhoneNumber(String phoneNumber);\r\n\r\n    @Query(\"\"\"\r\n    SELECT new org.group5.swp391.dto.employee.EmployeeCustomerDTO(c.id, c.name, c.phoneNumber) FROM Customer c\r\n    WHERE ( c.store.id IN (:storeList))\r\n    \"\"\")\r\n    public List<EmployeeCustomerDTO> getCustomersForDebts(List<String> storeList);\r\n\r\n    @Query(\"\"\"\r\n    SELECT c FROM Customer c\r\n    WHERE ( c.store.id IN (:storeId))\r\n      AND (:startCreatedAt IS NULL OR c.createdAt >= :startCreatedAt)\r\n      AND (:endCreatedAt IS NULL OR c.createdAt <= :endCreatedAt)\r\n      AND (:startUpdatedAt IS NULL OR c.updatedAt >= :startUpdatedAt)\r\n      AND (:endUpdatedAt IS NULL OR c.updatedAt <= :endUpdatedAt)\r\n      AND (:customerName IS NULL OR TRIM(:customerName) <> '' AND LOWER(c.name) LIKE LOWER(CONCAT('%', :customerName, '%')))\r\n      AND (:phoneNumber IS NULL OR TRIM(:phoneNumber) <> '' AND c.phoneNumber LIKE CONCAT('%', :phoneNumber, '%'))\r\n      AND (:email IS NULL OR TRIM(:email) <> '' AND LOWER(c.email) LIKE LOWER(CONCAT('%', :email, '%')))\r\n      AND (:address IS NULL OR TRIM(:address) <> '' AND LOWER(c.address) LIKE LOWER(CONCAT('%', :address, '%')))\r\n      AND (:fromAmount IS NULL OR c.balance >= :fromAmount)\r\n      AND (:toAmount IS NULL OR c.balance <= :toAmount)\r\n      AND (:createdBy IS NULL OR TRIM(:createdBy) <> '' AND LOWER(c.createdBy) LIKE LOWER(CONCAT('%', :createdBy, '%')))\r\n\"\"\")\r\n    Page<Customer> searchForDebtCustomer(\r\n            @Param(\"storeId\") List<String> storeId,\r\n            @Param(\"startCreatedAt\") LocalDateTime startCreatedAt,\r\n            @Param(\"endCreatedAt\") LocalDateTime endCreatedAt,\r\n            @Param(\"startUpdatedAt\") LocalDateTime startUpdatedAt,\r\n            @Param(\"endUpdatedAt\") LocalDateTime endUpdatedAt,\r\n            @Param(\"customerName\") String customerName,\r\n            @Param(\"phoneNumber\") String phoneNumber,\r\n            @Param(\"email\") String email,\r\n            @Param(\"address\") String address,\r\n            @Param(\"fromAmount\") Double fromAmount,\r\n            @Param(\"toAmount\") Double toAmount,\r\n            @Param(\"createdBy\") String createdBy,\r\n            Pageable pageable\r\n    );\r\n\r\n    public boolean existsByPhoneNumber(String phoneNumber);\r\n    public boolean existsByEmail(String email);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/repository/CustomerRepository.java b/swp391/src/main/java/org/group5/swp391/repository/CustomerRepository.java
--- a/swp391/src/main/java/org/group5/swp391/repository/CustomerRepository.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/repository/CustomerRepository.java	(date 1742498244305)
@@ -29,6 +29,7 @@
     List<Customer> findAllWithPhoneNumberInList( @Param("phoneNumber") String phoneNumber,
                                                  @Param("id")String storeId);
     Customer findByPhoneNumber(String phoneNumber);
+    List<Customer> findByEmail(String email);
 
     @Query("""
     SELECT new org.group5.swp391.dto.employee.EmployeeCustomerDTO(c.id, c.name, c.phoneNumber) FROM Customer c
Index: swp391/src/main/java/org/group5/swp391/repository/StoreRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.repository;\r\n\r\nimport org.group5.swp391.entity.Account;\r\nimport org.group5.swp391.entity.Store;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport java.util.List;\r\n\r\n@Repository\r\npublic interface StoreRepository extends JpaRepository<Store, String> {\r\n    Page<Store> findByStoreAccount(Account storeAccount, Pageable pageable);\r\n    Page<Store> findByStoreAccountAndStoreNameContainingIgnoreCase(Account account, String storeName, Pageable pageable);\r\n    List<Store> findByStoreAccount(Account storeAccount);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/repository/StoreRepository.java b/swp391/src/main/java/org/group5/swp391/repository/StoreRepository.java
--- a/swp391/src/main/java/org/group5/swp391/repository/StoreRepository.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/repository/StoreRepository.java	(date 1742498244309)
@@ -1,5 +1,6 @@
 package org.group5.swp391.repository;
 
+import org.group5.swp391.dto.response.store_response.StoreResponse;
 import org.group5.swp391.entity.Account;
 import org.group5.swp391.entity.Store;
 import org.springframework.data.domain.Page;
@@ -8,10 +9,15 @@
 import org.springframework.stereotype.Repository;
 
 import java.util.List;
+import java.util.Optional;
 
 @Repository
 public interface StoreRepository extends JpaRepository<Store, String> {
     Page<Store> findByStoreAccount(Account storeAccount, Pageable pageable);
+
     Page<Store> findByStoreAccountAndStoreNameContainingIgnoreCase(Account account, String storeName, Pageable pageable);
+
     List<Store> findByStoreAccount(Account storeAccount);
+
+    Optional<Store> findByIdAndStoreAccount_Username(String storeID, String username);
 }
\ No newline at end of file
Index: swp391/src/main/java/org/group5/swp391/repository/ProductRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.repository;\r\n\r\nimport org.group5.swp391.entity.Product;\r\nimport org.group5.swp391.entity.Store;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\nimport org.springframework.security.access.prepost.PostAuthorize;\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport java.util.Collection;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\n@Repository(\"storeOwnerProductRepository\")\r\npublic interface ProductRepository extends JpaRepository<Product, String> {\r\n    Page<Product> findAll(Pageable pageable);\r\n\r\n    Page<Product> findByStoreInAndNameContainingIgnoreCase(Collection<Store> stores, String name, Pageable pageable);\r\n\r\n    //minh\r\n    @Query(\"SELECT s FROM Product s WHERE s.store.id = :id \" +\r\n            \"AND (:name IS NULL OR :name = '' \" +\r\n            \"OR LOWER(s.name) LIKE LOWER(CONCAT('%', :name, '%')))\")\r\n    Page<Product> findByNameAndStoreIdContainingIgnoreCase(@Param(\"name\") String name,\r\n                                                           @Param(\"id\") String storeid,\r\n                                                           Pageable pageable);\r\n\r\n    @Query(\"SELECT s FROM Product s WHERE s.store.id = :id \" +\r\n            \"AND (:name IS NULL OR :name = '' \" +\r\n            \"OR LOWER(s.name) LIKE LOWER(CONCAT('%', :name, '%')))\")\r\n    List<Product> findByNameAndStoreIdContainingIgnoreCaseInList(@Param(\"name\") String name,\r\n                                                                 @Param(\"id\") String storeid);\r\n\r\n    @Query(\"Select s from Product  s where s.category.id = ?1\")\r\n    List<Product> findAllByCategoryId(String categoryId);\r\n\r\n    @Query(\"Select s from Product s where s.category.id = :categoryId\")\r\n    Page<Product> findAllByCategoryId(Pageable pageable, String categoryId);\r\n\r\n    @Query(\"SELECT s FROM Product s WHERE LOWER(s.name) LIKE LOWER(CONCAT('%', :name, '%')) and s.category.id = :categoryId\")\r\n    Page<Product> findByNameIgnoreCase(String name, String categoryId, Pageable pageable);\r\n\r\n    @Query(\"SELECT p FROM Product p WHERE \" +\r\n            \"p.name LIKE CONCAT('%',:query, '%') \")\r\n//            \"OR p.information LIKE CONCAT('%',:query, '%')\")\r\n    Page<Product> searchProducts(String query, Pageable pageable);\r\n\r\n    List<Product> findByNameContainingAndPriceBetween(String name, Double minPrice, Double maxPrice, Pageable pageable);\r\n\r\n    @Query(\"select  p from Product p where p.id = :stringId\")\r\n    Product findByStringId(String stringId);\r\n\r\n    Optional<Product> findById(String id);\r\n\r\n    @Query(\"\"\"\r\n                SELECT p \r\n                FROM Product p \r\n                JOIN p.store s \r\n                JOIN s.storeAccount a \r\n                WHERE a.username = :username \r\n                AND p.id = :productId\r\n            \"\"\")\r\n    Optional<Product> findProductForUser(@Param(\"username\") String username, @Param(\"productId\") String productId);\r\n\r\n    @Query(\"SELECT p FROM Product p WHERE p.store.id LIKE %:storeID%\")\r\n    List<Product> findProductsByStoreID(String storeID, Pageable pageable);\r\n\r\n    @Query(\"SELECT p FROM Product p WHERE p.store.id LIKE %:storeID% AND (p.name LIKE %:search% OR p.information LIKE %:search%)\")\r\n    List<Product> findProductsByInformationAndNameContainingIgnoreCase(String search, String storeID, Pageable pageable);\r\n\r\n    long countByStore_Id(String storeID);\r\n    long countByInformationAndNameContainingIgnoreCase(String search, String storeID);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/repository/ProductRepository.java b/swp391/src/main/java/org/group5/swp391/repository/ProductRepository.java
--- a/swp391/src/main/java/org/group5/swp391/repository/ProductRepository.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/repository/ProductRepository.java	(date 1742498244308)
@@ -21,12 +21,16 @@
     Page<Product> findByStoreInAndNameContainingIgnoreCase(Collection<Store> stores, String name, Pageable pageable);
 
     //minh
-    @Query("SELECT s FROM Product s WHERE s.store.id = :id " +
-            "AND (:name IS NULL OR :name = '' " +
-            "OR LOWER(s.name) LIKE LOWER(CONCAT('%', :name, '%')))")
+    @Query("SELECT p FROM Product p WHERE "
+            + "(:name IS NULL OR LOWER(p.name) LIKE %:name%) AND "
+            + "(p.store.id = :storeId) AND "
+            + "(:minQuantity IS NULL OR p.quantity >= :minQuantity) AND "
+            + "(:maxQuantity IS NULL OR p.quantity <= :maxQuantity)")
     Page<Product> findByNameAndStoreIdContainingIgnoreCase(@Param("name") String name,
-                                                           @Param("id") String storeid,
-                                                           Pageable pageable);
+                                                           @Param("storeId") String storeId,
+                                                           Pageable pageable,
+                                                           @Param("minQuantity") Integer minQuantity,
+                                                           @Param("maxQuantity") Integer maxQuantity);
 
     @Query("SELECT s FROM Product s WHERE s.store.id = :id " +
             "AND (:name IS NULL OR :name = '' " +
Index: swp391/src/main/java/org/group5/swp391/repository/InvalidatedTokenRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.repository;\r\n\r\nimport org.group5.swp391.entity.InvalidatedToken;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\npublic interface InvalidatedTokenRepository extends JpaRepository<InvalidatedToken, String> {\r\n    public boolean existsById(String id);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/repository/InvalidatedTokenRepository.java b/swp391/src/main/java/org/group5/swp391/repository/InvalidatedTokenRepository.java
--- a/swp391/src/main/java/org/group5/swp391/repository/InvalidatedTokenRepository.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/repository/InvalidatedTokenRepository.java	(date 1742498244305)
@@ -2,6 +2,8 @@
 
 import org.group5.swp391.entity.InvalidatedToken;
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
 
 public interface InvalidatedTokenRepository extends JpaRepository<InvalidatedToken, String> {
     public boolean existsById(String id);
Index: swp391/src/main/java/org/group5/swp391/repository/AppStatisticsRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.repository;\r\n\r\nimport org.group5.swp391.entity.AppStatistics;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport java.util.List;\r\n\r\n@Repository\r\npublic interface AppStatisticsRepository extends JpaRepository<AppStatistics, String> {\r\n\r\n    // Lấy danh sách thống kê theo storeId\r\n    List<AppStatistics> findByStore_Id(String storeID);\r\n\r\n    // Lấy danh sách thống kê theo gói đăng ký\r\n    List<AppStatistics> findBySubcriptionPlanName(String planName);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/repository/AppStatisticsRepository.java b/swp391/src/main/java/org/group5/swp391/repository/AppStatisticsRepository.java
--- a/swp391/src/main/java/org/group5/swp391/repository/AppStatisticsRepository.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/repository/AppStatisticsRepository.java	(date 1742498244304)
@@ -2,9 +2,12 @@
 
 import org.group5.swp391.entity.AppStatistics;
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
 import org.springframework.stereotype.Repository;
 
+import javax.swing.text.html.Option;
 import java.util.List;
+import java.util.Optional;
 
 @Repository
 public interface AppStatisticsRepository extends JpaRepository<AppStatistics, String> {
@@ -14,4 +17,23 @@
 
     // Lấy danh sách thống kê theo gói đăng ký
     List<AppStatistics> findBySubcriptionPlanName(String planName);
+
+    // Kiểm tra tồn tại mã giao dịch
+    boolean existsByTransactionNo(String transactionNo);
+
+    // Lấy danh sách các TransactionNo có StoreID là null
+    @Query("SELECT a.transactionNo FROM AppStatistics a WHERE a.store IS NULL")
+    List<String> findTransactionNosWithNullStore();
+
+    // Lấy thông kê giao dịch theo TransactionNo
+    Optional<AppStatistics> getAppStatisticsByTransactionNo(String transactionNo);
+
+    // Lấy giao dịch theo TransactionNo
+    Optional<AppStatistics> findByTransactionNo(String transactionNo);
+
+    // Lấy mã giao dịch và gói dịch vụ của Owner theo username
+    @Query("SELECT a.transactionNo, a.subcriptionTimeOfExpiration FROM AppStatistics a WHERE a.store IS NULL AND a.createdBy = :username")
+    List<Object[]> findTransactionAndExpirationWithNullStoreAndCreatedBy(String username);
+
+
 }
Index: swp391/src/main/java/org/group5/swp391/service/impl/ProductServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.group5.swp391.service.impl;\r\n\r\nimport jakarta.persistence.EntityNotFoundException;\r\nimport jakarta.transaction.Transactional;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.group5.swp391.converter.ProductAttributeConverter;\r\nimport org.group5.swp391.converter.ProductConverter;\r\nimport org.group5.swp391.dto.customer_requirement.CustomerProductDTO;\r\nimport org.group5.swp391.dto.employee.EmployeeProductDTO;\r\nimport org.group5.swp391.dto.store_owner.all_product.StoreProductAttributeDTO;\r\nimport org.group5.swp391.dto.store_owner.all_product.StoreProductDTO;\r\nimport org.group5.swp391.dto.store_owner.store_detail.StoreDetailProductDTO;\r\nimport org.group5.swp391.entity.Account;\r\nimport org.group5.swp391.entity.Employee;\r\nimport org.group5.swp391.entity.Product;\r\nimport org.group5.swp391.entity.Store;\r\nimport org.group5.swp391.repository.AccountRepository;\r\nimport org.group5.swp391.repository.EmployeeRepository;\r\nimport org.group5.swp391.repository.ProductRepository;\r\nimport org.group5.swp391.repository.StoreRepository;\r\nimport org.group5.swp391.dto.store_owner.all_product.StoreProductDetailDTO;\r\nimport org.group5.swp391.dto.store_owner.all_product.StoreZoneIdAndNameDTO;\r\nimport org.group5.swp391.entity.*;\r\nimport org.group5.swp391.exception.AppException;\r\nimport org.group5.swp391.exception.ErrorCode;\r\nimport org.group5.swp391.repository.*;\r\nimport org.group5.swp391.service.ProductService;\r\nimport org.group5.swp391.utils.CloudinaryService;\r\nimport org.springframework.data.domain.*;\r\nimport org.springframework.security.access.AccessDeniedException;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.web.server.ResponseStatusException;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\nimport static org.springframework.http.HttpStatus.NOT_FOUND;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class ProductServiceImpl implements ProductService {\r\n    private final ProductRepository productRepository;\r\n    private final ProductConverter productConverter;\r\n    private final AccountRepository accountRepository;\r\n    private final StoreRepository storeRepository;\r\n    private final EmployeeRepository employeeRepository;\r\n    private final CategoryRepository categoryRepository;\r\n    private final ProductAttributeRepository productAttributeRepository;\r\n    private final CloudinaryService cloudinaryService;\r\n    private final ZoneRepository zoneRepository;\r\n    private final ProductAttributeConverter productAttributeConverter;\r\n\r\n    // Chien\r\n    @Override\r\n    public Page<StoreProductDTO> getProducts(String productName, int page, int size, String sortBy, boolean descending) {\r\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\n        if (authentication == null || !authentication.isAuthenticated()) {\r\n            return null;\r\n        }\r\n        String username = authentication.getName();\r\n        Account account = accountRepository.findByUsername(username).orElseThrow(null);\r\n        List<Store> stores = storeRepository.findByStoreAccount(account);\r\n        Sort sort = descending ? Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();\r\n        Pageable pageable = PageRequest.of(page, size, sort);\r\n        if (productName == null || productName.isEmpty()) {\r\n            productRepository.findAll(pageable).map(productConverter::toStoreProductDTO);\r\n        }\r\n        return productRepository.findByStoreInAndNameContainingIgnoreCase(stores, productName, pageable).map(productConverter::toStoreProductDTO);\r\n    }\r\n\r\n    private Product checkProductOfUser(String productID) {\r\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\n        if (authentication == null || !authentication.isAuthenticated()) {\r\n            throw new AppException(ErrorCode.PRODUCT_NOT_FOUND);\r\n        }\r\n        String username = authentication.getName();\r\n        return productRepository.findProductForUser(username, productID)\r\n                .orElseThrow(() -> new RuntimeException(\"Không tìm thấy sản phẩm\"));\r\n    }\r\n\r\n    public StoreProductDetailDTO getProduct(String id) {\r\n        Product product = checkProductOfUser(id);\r\n        return productConverter.toStoreProductDetailDTO(product);\r\n    }\r\n\r\n    @Transactional\r\n    public StoreProductDetailDTO updateStoreProduct(String productID, StoreProductDetailDTO dto) {\r\n        Product product = checkProductOfUser(productID);\r\n        product.setName(dto.getName());\r\n        product.setPrice(dto.getPrice());\r\n        product.setInformation(dto.getInformation());\r\n        product.setQuantity(dto.getQuantity());\r\n        product.setProductImage(dto.getProductImage());\r\n        Category category = categoryRepository.findById(dto.getCategory().getId())\r\n                .orElseThrow(() -> new EntityNotFoundException(\"Không tìm thấy danh mục với ID: \" + dto.getCategory().getId()));\r\n        product.setCategory(category);\r\n        List<ProductAttribute> attributes = productAttributeRepository.findAllById(\r\n                dto.getAttributes().stream()\r\n                        .map(StoreProductAttributeDTO::getId)\r\n                        .toList()\r\n        );\r\n        product.setProductAttributes(attributes);\r\n        List<Zone> oldZones = new ArrayList<>(product.getZones());\r\n        product.getZones().clear();\r\n        for (StoreZoneIdAndNameDTO zoneDto : dto.getZones()) {\r\n            Zone zone;\r\n            if (zoneDto.getId() != null) {\r\n                zone = zoneRepository.findById(zoneDto.getId()).orElse(new Zone());\r\n            } else {\r\n                zone = new Zone();\r\n            }\r\n            zone.setName(zoneDto.getName());\r\n            zone.setProduct(product);\r\n            product.getZones().add(zone);\r\n        }\r\n        for (Zone oldZone : oldZones) {\r\n            if (!product.getZones().contains(oldZone)) {\r\n                oldZone.setProduct(null);\r\n                zoneRepository.save(oldZone);\r\n            }\r\n        }\r\n        productRepository.save(product);\r\n        return productConverter.toStoreProductDetailDTO(product);\r\n    }\r\n\r\n    @Transactional\r\n    public String updateStoreProductImage(String productID, MultipartFile file) {\r\n        try {\r\n            checkProductOfUser(productID);\r\n            return cloudinaryService.uploadFile(file);\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(\"Không thể tải ảnh lên!\");\r\n        }\r\n    }\r\n\r\n    @Transactional\r\n    public void deleteProduct(String productId) {\r\n        Product product = checkProductOfUser(productId);\r\n        List<Zone> zones = product.getZones();\r\n        zones.forEach(zone -> {\r\n            zone.setProduct(null);\r\n            zoneRepository.save(zone);\r\n        });\r\n        productRepository.delete(product);\r\n    }\r\n\r\n\r\n    // Minh Tran\r\n    @Override\r\n    public Page<EmployeeProductDTO> getProductsByCateID(String CateID, int page, int size, String sortBy, boolean descending) {\r\n        Sort sort = descending ? Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();\r\n        Pageable pageable = PageRequest.of(page, size, sort);\r\n        Page<Product> productPage = productRepository.findAllByCategoryId(pageable, CateID);\r\n        return productPage.map(productConverter::toEmployeeProductDTO);\r\n    }\r\n\r\n    @Override\r\n    public Page<EmployeeProductDTO> getProductBySearch(String name, int page, int size, String sortBy, boolean descending) {\r\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\n        if (authentication == null || !authentication.isAuthenticated()) {\r\n            throw new AccessDeniedException(\"Bạn chưa đăng nhập!\");\r\n        }\r\n        String username = authentication.getName();\r\n        Account account = accountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResponseStatusException(NOT_FOUND, \"Tài khoản không tồn tại\"));\r\n        Employee a = employeeRepository.findStoreIdByAccountEmpId(account.getId());\r\n        System.out.println(a.getStore().getId());\r\n        System.out.println(sortBy);\r\n        System.out.println(descending);\r\n        Sort sort = descending ? Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();\r\n        Pageable pageable = PageRequest.of(page, size, sort);\r\n        if (name.equals(\"\") || name.isEmpty()) {\r\n            name = null;\r\n        } else {\r\n            name = name.toLowerCase();\r\n            name = capitalizeFirstLetters(name);\r\n            System.out.println(name);\r\n        }\r\n        Page<Product> productPage = productRepository.findByNameAndStoreIdContainingIgnoreCase(name, a.getStore().getId(), pageable);\r\n        return productPage.map(productConverter::toEmployeeProductDTO);\r\n    }\r\n\r\n    @Override\r\n    public List<EmployeeProductDTO> getProductBySearchInList(String name) {\r\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\n        if (authentication == null || !authentication.isAuthenticated()) {\r\n            throw new AccessDeniedException(\"Bạn chưa đăng nhập!\");\r\n        }\r\n        String username = authentication.getName();\r\n        Account account = accountRepository.findByUsername(username)\r\n                .orElseThrow(() -> new ResponseStatusException(NOT_FOUND, \"Tài khoản không tồn tại\"));\r\n        Employee a = employeeRepository.findStoreIdByAccountEmpId(account.getId());\r\n        if (name.equals(\"\") || name.isEmpty()) {\r\n            name = null;\r\n        } else {\r\n            name = name.toLowerCase();\r\n            name = capitalizeFirstLetters(name);\r\n        }\r\n        List<Product> productPage = productRepository.findByNameAndStoreIdContainingIgnoreCaseInList(name, a.getStore().getId());\r\n        return productPage.stream().map(productConverter::toEmployeeProductDTO).collect(Collectors.toList());\r\n\r\n    }\r\n\r\n    // Hieu\r\n    @Override\r\n    public Page<CustomerProductDTO> getAllProducts() {\r\n        List<Product> products = productRepository.findAll();\r\n        List<CustomerProductDTO> customerProductDTOS = products.stream().map(productConverter::toCustomerProductDTO).collect(Collectors.toList());\r\n\r\n        return new PageImpl<>(customerProductDTOS);\r\n    }\r\n\r\n    @Override\r\n    public Page<CustomerProductDTO> searchProducts(String query, int page, int size) {\r\n        Pageable pageable = PageRequest.of(page, size);\r\n        Page<Product> products = productRepository.searchProducts(query, pageable);\r\n        List<CustomerProductDTO> productPages = products.stream().map(productConverter::toCustomerProductDTO).collect(Collectors.toList());\r\n        return new PageImpl<>(productPages, pageable, products.getTotalElements());\r\n    }\r\n\r\n    @Override\r\n    public Page<StoreDetailProductDTO> getAllProductsByStoreID(String search, String storeID, int page, int size, String sortBy, boolean descending) {\r\n        Sort sort = descending\r\n                ? Sort.by(sortBy).descending()\r\n                : Sort.by(sortBy).ascending();\r\n        Pageable pageable = PageRequest.of(page, size, sort);\r\n        List<StoreDetailProductDTO> productPages;\r\n        long total;\r\n        if (search == null || search.isEmpty()) {\r\n            List<Product> products = productRepository.findProductsByStoreID(storeID, pageable);\r\n            productPages = products.stream().map(productConverter::toStoreDetailProductDTO).collect(Collectors.toList());\r\n            total = productRepository.countByStore_Id(storeID);\r\n        } else {\r\n            List<Product> filteredProducts = productRepository.findProductsByInformationAndNameContainingIgnoreCase(search, storeID, pageable);\r\n            productPages = filteredProducts.stream().map(productConverter::toStoreDetailProductDTO).collect(Collectors.toList());\r\n            total = productRepository.countByInformationAndNameContainingIgnoreCase(search, storeID); // Đếm tổng số sản phẩm theo điều kiện search\r\n        }\r\n        return new PageImpl<>(productPages, pageable, total);\r\n    }\r\n\r\n    @Override\r\n    public Page<CustomerProductDTO> searchProductsQuery(String querySearchName, Double minPrice, Double maxPrice, int page, int size, String sortBy, boolean descending, String categoryID) {\r\n        Sort sort = descending ? Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();\r\n        Pageable pageable = PageRequest.of(page, size, sort);\r\n        List<Product> products = productRepository\r\n                .findByNameContainingAndPriceBetween(querySearchName, minPrice, maxPrice, pageable);\r\n        List<CustomerProductDTO> productPages;\r\n        if (categoryID != null && !categoryID.isEmpty()) {\r\n            productPages = productRepository.findAllByCategoryId(categoryID).stream()\r\n                    .map(productConverter::toCustomerProductDTO).collect(Collectors.toList());\r\n        } else {\r\n            productPages = products.stream()\r\n                    .map(productConverter::toCustomerProductDTO).collect(Collectors.toList());\r\n        }\r\n        return new PageImpl<>(productPages, pageable, (products.size() + 1));\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public void addProduct(String storeID, StoreDetailProductDTO storeDetailProductDTO) throws Exception {\r\n        try {\r\n            Authentication auth = SecurityContextHolder.getContext().getAuthentication();\r\n            if (auth == null || !auth.isAuthenticated()) {\r\n                throw new Exception(\"Not authenticated\");\r\n            }\r\n            String username = auth.getName();\r\n            Account account = accountRepository.findByUsername(username)\r\n                    .orElseThrow(() -> new Exception(\"Account not found for username: \" + username));\r\n            List<Store> stores = storeRepository.findByStoreAccount(account);\r\n            String storeList = new String();\r\n            for (Store store : stores) {\r\n                storeList += store.getId() + \" \";\r\n            }\r\n            if (!storeList.contains(storeID)) {\r\n                throw new Exception(\"Store not found for id: \" + storeID);\r\n            }\r\n\r\n            Product newProduct = new Product();\r\n\r\n            Category cateExisting = categoryRepository\r\n                    .findCategoryById(storeDetailProductDTO.getCategoryID());\r\n            if (cateExisting == null) {\r\n                throw new Exception(\"Category does not exist\");\r\n            }\r\n\r\n            Store storeExisting = storeRepository.findById(storeID)\r\n                    .orElseThrow(() -> new Exception(\"Store not found for ID: \" + storeID));\r\n\r\n            newProduct.setName(storeDetailProductDTO.getName());\r\n            newProduct.setPrice(storeDetailProductDTO.getPrice());\r\n            newProduct.setInformation(storeDetailProductDTO.getInformation());\r\n            newProduct.setCategory(cateExisting);\r\n            newProduct.setStore(storeExisting);\r\n            newProduct.setQuantity(storeDetailProductDTO.getQuantity());\r\n            newProduct.setProductImage(storeDetailProductDTO.getProductImage());\r\n\r\n            if(storeDetailProductDTO.getStoreDetailProductAttributeDTOList() != null) {\r\n                List<ProductAttribute> attributes = storeDetailProductDTO.getProductAttributeList().stream()\r\n                        .map(id -> {\r\n                            try {\r\n                                return productAttributeRepository.findById(id)\r\n                                        .orElseThrow(() -> new Exception(\"ProductAttribute not found for ID: \" + id));\r\n                            } catch (Exception e) {\r\n                                throw new RuntimeException(e);\r\n                            }\r\n                        })\r\n                        .collect(Collectors.toList());\r\n\r\n                newProduct.setProductAttributes(attributes);\r\n            }\r\n            if(storeDetailProductDTO.getStoreDetailZoneDTOList() != null) {\r\n                List<Zone> zones = storeDetailProductDTO.getZoneList().stream()\r\n                        .map(id -> {\r\n                            try {\r\n                                Zone zone = zoneRepository.findById(id)\r\n                                        .orElseThrow(() -> new Exception(\"Zone not found for ID: \" + id));\r\n                                return new Zone(zone.getName(),\r\n                                        zone.getLocation(),\r\n                                        productConverter.toProduct(storeDetailProductDTO),\r\n                                        storeRepository.findById(storeID).orElseThrow(() -> new Exception(\"Không tìm thấy store\")));\r\n                            } catch (Exception e) {\r\n                                throw new RuntimeException(e);\r\n                            }\r\n                        }).collect(Collectors.toList());\r\n                newProduct.setZones(zones);\r\n            }\r\n            productRepository.save(newProduct);\r\n        } catch (Exception e) {\r\n            throw new Exception(\"Failed to save product: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void updateProduct(String storeID, String productID, StoreDetailProductDTO storeDetailProductDTO) throws Exception {\r\n        Product updatingProduct = productRepository\r\n                .findById(productID)\r\n                .orElseThrow(() -> new Exception(\"Product not found for ID: \" + storeDetailProductDTO.getId()));\r\n        updatingProduct.setName(storeDetailProductDTO.getName());\r\n        updatingProduct.setPrice(storeDetailProductDTO.getPrice());\r\n        updatingProduct.setInformation(storeDetailProductDTO.getInformation());\r\n        updatingProduct.setQuantity(storeDetailProductDTO.getQuantity());\r\n        updatingProduct.setProductImage(storeDetailProductDTO.getProductImage());\r\n        Category cateExisting = categoryRepository\r\n                .findById(storeDetailProductDTO.getCategoryID())\r\n                .orElseThrow(() -> new Exception(\"không tìm thấy category\"));\r\n        if (cateExisting == null) {\r\n            throw new Exception(\"Category does not exist\");\r\n        }\r\n        updatingProduct.setCategory(cateExisting);\r\n\r\n        if(storeDetailProductDTO.getStoreDetailProductAttributeDTOList() != null) {\r\n            List<ProductAttribute> attributes = storeDetailProductDTO.getProductAttributeList().stream()\r\n                    .map(id -> {\r\n                        try {\r\n                            return productAttributeRepository.findById(id)\r\n                                    .orElseThrow(() -> new Exception(\"ProductAttribute not found for ID: \" + id));\r\n                        } catch (Exception e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                    })\r\n                    .collect(Collectors.toList());\r\n\r\n            updatingProduct.setProductAttributes(attributes);\r\n        }\r\n        if(storeDetailProductDTO.getStoreDetailZoneDTOList() != null) {\r\n            List<Zone> zones = storeDetailProductDTO.getStoreDetailZoneDTOList().stream()\r\n                    .map(dto -> {\r\n                        try {\r\n                            Zone zone = zoneRepository.findById(dto.getId())\r\n                                    .orElseThrow(() -> new Exception(\"Zone not found for ID: \" + dto.getId()));\r\n                            return new Zone(zone.getName(),\r\n                                    zone.getLocation(),\r\n                                    productRepository.findById(productID).orElseThrow(() -> new Exception(\"không tìm thấy product\")),\r\n                                    storeRepository.findById(storeID).orElseThrow(() -> new Exception(\"Không tìm thấy store\")));\r\n                        } catch (Exception e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                    }).collect(Collectors.toList());\r\n            updatingProduct.setZones(zones);\r\n        }\r\n        productRepository.save(updatingProduct);\r\n    }\r\n\r\n    //hàm cắt chuỗi in hoa chữ đầu cho mọi người\r\n    public String capitalizeFirstLetters(String input) {\r\n        if (input == null || input.isEmpty()) {\r\n            return input;\r\n        }\r\n        String[] words = input.split(\"\\\\s+\");\r\n        StringBuilder capitalizedString = new StringBuilder();\r\n        for (String word : words) {\r\n            if (word.length() > 0) {\r\n                capitalizedString.append(word.substring(0, 1).toUpperCase())\r\n                        .append(word.substring(1).toLowerCase())\r\n                        .append(\" \");\r\n            }\r\n        }\r\n        return capitalizedString.toString().trim();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/swp391/src/main/java/org/group5/swp391/service/impl/ProductServiceImpl.java b/swp391/src/main/java/org/group5/swp391/service/impl/ProductServiceImpl.java
--- a/swp391/src/main/java/org/group5/swp391/service/impl/ProductServiceImpl.java	(revision 0e06268e6f2fd3316acd6f8b44454a2ac3bd160d)
+++ b/swp391/src/main/java/org/group5/swp391/service/impl/ProductServiceImpl.java	(date 1742498244317)
@@ -162,7 +162,8 @@
     }
 
     @Override
-    public Page<EmployeeProductDTO> getProductBySearch(String name, int page, int size, String sortBy, boolean descending) {
+    public Page<EmployeeProductDTO> getProductBySearch(String name, int page, int size,
+                                                       String sortBy, boolean descending,Integer minQuantity, Integer maxQuantity) {
         Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
         if (authentication == null || !authentication.isAuthenticated()) {
             throw new AccessDeniedException("Bạn chưa đăng nhập!");
@@ -183,7 +184,7 @@
             name = capitalizeFirstLetters(name);
             System.out.println(name);
         }
-        Page<Product> productPage = productRepository.findByNameAndStoreIdContainingIgnoreCase(name, a.getStore().getId(), pageable);
+        Page<Product> productPage = productRepository.findByNameAndStoreIdContainingIgnoreCase(name, a.getStore().getId(), pageable,minQuantity,maxQuantity);
         return productPage.map(productConverter::toEmployeeProductDTO);
     }
 
